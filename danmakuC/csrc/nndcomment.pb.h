// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nndcomment.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_nndcomment_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_nndcomment_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_nndcomment_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_nndcomment_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_nndcomment_2eproto;
class NNDComment;
struct NNDCommentDefaultTypeInternal;
extern NNDCommentDefaultTypeInternal _NNDComment_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::NNDComment* Arena::CreateMaybeMessage<::NNDComment>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class NNDComment final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NNDComment) */ {
 public:
  inline NNDComment() : NNDComment(nullptr) {}
  ~NNDComment() override;
  explicit PROTOBUF_CONSTEXPR NNDComment(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NNDComment(const NNDComment& from);
  NNDComment(NNDComment&& from) noexcept
    : NNDComment() {
    *this = ::std::move(from);
  }

  inline NNDComment& operator=(const NNDComment& from) {
    CopyFrom(from);
    return *this;
  }
  inline NNDComment& operator=(NNDComment&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NNDComment& default_instance() {
    return *internal_default_instance();
  }
  static inline const NNDComment* internal_default_instance() {
    return reinterpret_cast<const NNDComment*>(
               &_NNDComment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NNDComment& a, NNDComment& b) {
    a.Swap(&b);
  }
  inline void Swap(NNDComment* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NNDComment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NNDComment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NNDComment>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NNDComment& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NNDComment& from) {
    NNDComment::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NNDComment* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NNDComment";
  }
  protected:
  explicit NNDComment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 7,
    kMailFieldNumber = 8,
    kContentFieldNumber = 12,
    kForkFieldNumber = 15,
    kThreadFieldNumber = 1,
    kNoFieldNumber = 2,
    kVposFieldNumber = 3,
    kDateFieldNumber = 4,
    kDateUsecFieldNumber = 5,
    kAnonymityFieldNumber = 6,
    kPremiumFieldNumber = 10,
    kLeafFieldNumber = 9,
    kScoreFieldNumber = 11,
  };
  // string user_id = 7;
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string mail = 8;
  void clear_mail();
  const std::string& mail() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mail(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mail();
  PROTOBUF_NODISCARD std::string* release_mail();
  void set_allocated_mail(std::string* mail);
  private:
  const std::string& _internal_mail() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mail(const std::string& value);
  std::string* _internal_mutable_mail();
  public:

  // string content = 12;
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // string fork = 15;
  void clear_fork();
  const std::string& fork() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_fork(ArgT0&& arg0, ArgT... args);
  std::string* mutable_fork();
  PROTOBUF_NODISCARD std::string* release_fork();
  void set_allocated_fork(std::string* fork);
  private:
  const std::string& _internal_fork() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_fork(const std::string& value);
  std::string* _internal_mutable_fork();
  public:

  // int64 thread = 1;
  void clear_thread();
  int64_t thread() const;
  void set_thread(int64_t value);
  private:
  int64_t _internal_thread() const;
  void _internal_set_thread(int64_t value);
  public:

  // int32 no = 2;
  void clear_no();
  int32_t no() const;
  void set_no(int32_t value);
  private:
  int32_t _internal_no() const;
  void _internal_set_no(int32_t value);
  public:

  // int32 vpos = 3;
  void clear_vpos();
  int32_t vpos() const;
  void set_vpos(int32_t value);
  private:
  int32_t _internal_vpos() const;
  void _internal_set_vpos(int32_t value);
  public:

  // int64 date = 4;
  void clear_date();
  int64_t date() const;
  void set_date(int64_t value);
  private:
  int64_t _internal_date() const;
  void _internal_set_date(int64_t value);
  public:

  // int32 date_usec = 5;
  void clear_date_usec();
  int32_t date_usec() const;
  void set_date_usec(int32_t value);
  private:
  int32_t _internal_date_usec() const;
  void _internal_set_date_usec(int32_t value);
  public:

  // bool anonymity = 6;
  void clear_anonymity();
  bool anonymity() const;
  void set_anonymity(bool value);
  private:
  bool _internal_anonymity() const;
  void _internal_set_anonymity(bool value);
  public:

  // bool premium = 10;
  void clear_premium();
  bool premium() const;
  void set_premium(bool value);
  private:
  bool _internal_premium() const;
  void _internal_set_premium(bool value);
  public:

  // int32 leaf = 9;
  void clear_leaf();
  int32_t leaf() const;
  void set_leaf(int32_t value);
  private:
  int32_t _internal_leaf() const;
  void _internal_set_leaf(int32_t value);
  public:

  // int32 score = 11;
  void clear_score();
  int32_t score() const;
  void set_score(int32_t value);
  private:
  int32_t _internal_score() const;
  void _internal_set_score(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:NNDComment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mail_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fork_;
    int64_t thread_;
    int32_t no_;
    int32_t vpos_;
    int64_t date_;
    int32_t date_usec_;
    bool anonymity_;
    bool premium_;
    int32_t leaf_;
    int32_t score_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nndcomment_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NNDComment

// int64 thread = 1;
inline void NNDComment::clear_thread() {
  _impl_.thread_ = int64_t{0};
}
inline int64_t NNDComment::_internal_thread() const {
  return _impl_.thread_;
}
inline int64_t NNDComment::thread() const {
  // @@protoc_insertion_point(field_get:NNDComment.thread)
  return _internal_thread();
}
inline void NNDComment::_internal_set_thread(int64_t value) {
  
  _impl_.thread_ = value;
}
inline void NNDComment::set_thread(int64_t value) {
  _internal_set_thread(value);
  // @@protoc_insertion_point(field_set:NNDComment.thread)
}

// int32 no = 2;
inline void NNDComment::clear_no() {
  _impl_.no_ = 0;
}
inline int32_t NNDComment::_internal_no() const {
  return _impl_.no_;
}
inline int32_t NNDComment::no() const {
  // @@protoc_insertion_point(field_get:NNDComment.no)
  return _internal_no();
}
inline void NNDComment::_internal_set_no(int32_t value) {
  
  _impl_.no_ = value;
}
inline void NNDComment::set_no(int32_t value) {
  _internal_set_no(value);
  // @@protoc_insertion_point(field_set:NNDComment.no)
}

// int32 vpos = 3;
inline void NNDComment::clear_vpos() {
  _impl_.vpos_ = 0;
}
inline int32_t NNDComment::_internal_vpos() const {
  return _impl_.vpos_;
}
inline int32_t NNDComment::vpos() const {
  // @@protoc_insertion_point(field_get:NNDComment.vpos)
  return _internal_vpos();
}
inline void NNDComment::_internal_set_vpos(int32_t value) {
  
  _impl_.vpos_ = value;
}
inline void NNDComment::set_vpos(int32_t value) {
  _internal_set_vpos(value);
  // @@protoc_insertion_point(field_set:NNDComment.vpos)
}

// int64 date = 4;
inline void NNDComment::clear_date() {
  _impl_.date_ = int64_t{0};
}
inline int64_t NNDComment::_internal_date() const {
  return _impl_.date_;
}
inline int64_t NNDComment::date() const {
  // @@protoc_insertion_point(field_get:NNDComment.date)
  return _internal_date();
}
inline void NNDComment::_internal_set_date(int64_t value) {
  
  _impl_.date_ = value;
}
inline void NNDComment::set_date(int64_t value) {
  _internal_set_date(value);
  // @@protoc_insertion_point(field_set:NNDComment.date)
}

// int32 date_usec = 5;
inline void NNDComment::clear_date_usec() {
  _impl_.date_usec_ = 0;
}
inline int32_t NNDComment::_internal_date_usec() const {
  return _impl_.date_usec_;
}
inline int32_t NNDComment::date_usec() const {
  // @@protoc_insertion_point(field_get:NNDComment.date_usec)
  return _internal_date_usec();
}
inline void NNDComment::_internal_set_date_usec(int32_t value) {
  
  _impl_.date_usec_ = value;
}
inline void NNDComment::set_date_usec(int32_t value) {
  _internal_set_date_usec(value);
  // @@protoc_insertion_point(field_set:NNDComment.date_usec)
}

// bool anonymity = 6;
inline void NNDComment::clear_anonymity() {
  _impl_.anonymity_ = false;
}
inline bool NNDComment::_internal_anonymity() const {
  return _impl_.anonymity_;
}
inline bool NNDComment::anonymity() const {
  // @@protoc_insertion_point(field_get:NNDComment.anonymity)
  return _internal_anonymity();
}
inline void NNDComment::_internal_set_anonymity(bool value) {
  
  _impl_.anonymity_ = value;
}
inline void NNDComment::set_anonymity(bool value) {
  _internal_set_anonymity(value);
  // @@protoc_insertion_point(field_set:NNDComment.anonymity)
}

// string user_id = 7;
inline void NNDComment::clear_user_id() {
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& NNDComment::user_id() const {
  // @@protoc_insertion_point(field_get:NNDComment.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NNDComment::set_user_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:NNDComment.user_id)
}
inline std::string* NNDComment::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:NNDComment.user_id)
  return _s;
}
inline const std::string& NNDComment::_internal_user_id() const {
  return _impl_.user_id_.Get();
}
inline void NNDComment::_internal_set_user_id(const std::string& value) {
  
  _impl_.user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* NNDComment::_internal_mutable_user_id() {
  
  return _impl_.user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* NNDComment::release_user_id() {
  // @@protoc_insertion_point(field_release:NNDComment.user_id)
  return _impl_.user_id_.Release();
}
inline void NNDComment::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  _impl_.user_id_.SetAllocated(user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NNDComment.user_id)
}

// string mail = 8;
inline void NNDComment::clear_mail() {
  _impl_.mail_.ClearToEmpty();
}
inline const std::string& NNDComment::mail() const {
  // @@protoc_insertion_point(field_get:NNDComment.mail)
  return _internal_mail();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NNDComment::set_mail(ArgT0&& arg0, ArgT... args) {
 
 _impl_.mail_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:NNDComment.mail)
}
inline std::string* NNDComment::mutable_mail() {
  std::string* _s = _internal_mutable_mail();
  // @@protoc_insertion_point(field_mutable:NNDComment.mail)
  return _s;
}
inline const std::string& NNDComment::_internal_mail() const {
  return _impl_.mail_.Get();
}
inline void NNDComment::_internal_set_mail(const std::string& value) {
  
  _impl_.mail_.Set(value, GetArenaForAllocation());
}
inline std::string* NNDComment::_internal_mutable_mail() {
  
  return _impl_.mail_.Mutable(GetArenaForAllocation());
}
inline std::string* NNDComment::release_mail() {
  // @@protoc_insertion_point(field_release:NNDComment.mail)
  return _impl_.mail_.Release();
}
inline void NNDComment::set_allocated_mail(std::string* mail) {
  if (mail != nullptr) {
    
  } else {
    
  }
  _impl_.mail_.SetAllocated(mail, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.mail_.IsDefault()) {
    _impl_.mail_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NNDComment.mail)
}

// int32 leaf = 9;
inline void NNDComment::clear_leaf() {
  _impl_.leaf_ = 0;
}
inline int32_t NNDComment::_internal_leaf() const {
  return _impl_.leaf_;
}
inline int32_t NNDComment::leaf() const {
  // @@protoc_insertion_point(field_get:NNDComment.leaf)
  return _internal_leaf();
}
inline void NNDComment::_internal_set_leaf(int32_t value) {
  
  _impl_.leaf_ = value;
}
inline void NNDComment::set_leaf(int32_t value) {
  _internal_set_leaf(value);
  // @@protoc_insertion_point(field_set:NNDComment.leaf)
}

// bool premium = 10;
inline void NNDComment::clear_premium() {
  _impl_.premium_ = false;
}
inline bool NNDComment::_internal_premium() const {
  return _impl_.premium_;
}
inline bool NNDComment::premium() const {
  // @@protoc_insertion_point(field_get:NNDComment.premium)
  return _internal_premium();
}
inline void NNDComment::_internal_set_premium(bool value) {
  
  _impl_.premium_ = value;
}
inline void NNDComment::set_premium(bool value) {
  _internal_set_premium(value);
  // @@protoc_insertion_point(field_set:NNDComment.premium)
}

// int32 score = 11;
inline void NNDComment::clear_score() {
  _impl_.score_ = 0;
}
inline int32_t NNDComment::_internal_score() const {
  return _impl_.score_;
}
inline int32_t NNDComment::score() const {
  // @@protoc_insertion_point(field_get:NNDComment.score)
  return _internal_score();
}
inline void NNDComment::_internal_set_score(int32_t value) {
  
  _impl_.score_ = value;
}
inline void NNDComment::set_score(int32_t value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:NNDComment.score)
}

// string content = 12;
inline void NNDComment::clear_content() {
  _impl_.content_.ClearToEmpty();
}
inline const std::string& NNDComment::content() const {
  // @@protoc_insertion_point(field_get:NNDComment.content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NNDComment::set_content(ArgT0&& arg0, ArgT... args) {
 
 _impl_.content_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:NNDComment.content)
}
inline std::string* NNDComment::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:NNDComment.content)
  return _s;
}
inline const std::string& NNDComment::_internal_content() const {
  return _impl_.content_.Get();
}
inline void NNDComment::_internal_set_content(const std::string& value) {
  
  _impl_.content_.Set(value, GetArenaForAllocation());
}
inline std::string* NNDComment::_internal_mutable_content() {
  
  return _impl_.content_.Mutable(GetArenaForAllocation());
}
inline std::string* NNDComment::release_content() {
  // @@protoc_insertion_point(field_release:NNDComment.content)
  return _impl_.content_.Release();
}
inline void NNDComment::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  _impl_.content_.SetAllocated(content, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NNDComment.content)
}

// string fork = 15;
inline void NNDComment::clear_fork() {
  _impl_.fork_.ClearToEmpty();
}
inline const std::string& NNDComment::fork() const {
  // @@protoc_insertion_point(field_get:NNDComment.fork)
  return _internal_fork();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NNDComment::set_fork(ArgT0&& arg0, ArgT... args) {
 
 _impl_.fork_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:NNDComment.fork)
}
inline std::string* NNDComment::mutable_fork() {
  std::string* _s = _internal_mutable_fork();
  // @@protoc_insertion_point(field_mutable:NNDComment.fork)
  return _s;
}
inline const std::string& NNDComment::_internal_fork() const {
  return _impl_.fork_.Get();
}
inline void NNDComment::_internal_set_fork(const std::string& value) {
  
  _impl_.fork_.Set(value, GetArenaForAllocation());
}
inline std::string* NNDComment::_internal_mutable_fork() {
  
  return _impl_.fork_.Mutable(GetArenaForAllocation());
}
inline std::string* NNDComment::release_fork() {
  // @@protoc_insertion_point(field_release:NNDComment.fork)
  return _impl_.fork_.Release();
}
inline void NNDComment::set_allocated_fork(std::string* fork) {
  if (fork != nullptr) {
    
  } else {
    
  }
  _impl_.fork_.SetAllocated(fork, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.fork_.IsDefault()) {
    _impl_.fork_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NNDComment.fork)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_nndcomment_2eproto
