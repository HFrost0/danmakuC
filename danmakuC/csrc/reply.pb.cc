// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: reply.proto

#include "reply.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace bilibili {
namespace community {
namespace service {
namespace dm {
namespace v1 {
PROTOBUF_CONSTEXPR DmSegSDKReq::DmSegSDKReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pid_)*/int64_t{0}
  , /*decltype(_impl_.oid_)*/int64_t{0}
  , /*decltype(_impl_.segment_index_)*/int64_t{0}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DmSegSDKReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DmSegSDKReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DmSegSDKReqDefaultTypeInternal() {}
  union {
    DmSegSDKReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DmSegSDKReqDefaultTypeInternal _DmSegSDKReq_default_instance_;
PROTOBUF_CONSTEXPR DmSegSDKReply::DmSegSDKReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.elems_)*/{}
  , /*decltype(_impl_.closed_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DmSegSDKReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DmSegSDKReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DmSegSDKReplyDefaultTypeInternal() {}
  union {
    DmSegSDKReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DmSegSDKReplyDefaultTypeInternal _DmSegSDKReply_default_instance_;
PROTOBUF_CONSTEXPR DmSegOttReq::DmSegOttReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pid_)*/int64_t{0}
  , /*decltype(_impl_.oid_)*/int64_t{0}
  , /*decltype(_impl_.segment_index_)*/int64_t{0}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DmSegOttReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DmSegOttReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DmSegOttReqDefaultTypeInternal() {}
  union {
    DmSegOttReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DmSegOttReqDefaultTypeInternal _DmSegOttReq_default_instance_;
PROTOBUF_CONSTEXPR DmSegOttReply::DmSegOttReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.elems_)*/{}
  , /*decltype(_impl_.closed_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DmSegOttReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DmSegOttReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DmSegOttReplyDefaultTypeInternal() {}
  union {
    DmSegOttReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DmSegOttReplyDefaultTypeInternal _DmSegOttReply_default_instance_;
PROTOBUF_CONSTEXPR DmSegMobileReq::DmSegMobileReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pid_)*/int64_t{0}
  , /*decltype(_impl_.oid_)*/int64_t{0}
  , /*decltype(_impl_.segment_index_)*/int64_t{0}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.teenagers_mode_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DmSegMobileReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DmSegMobileReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DmSegMobileReqDefaultTypeInternal() {}
  union {
    DmSegMobileReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DmSegMobileReqDefaultTypeInternal _DmSegMobileReq_default_instance_;
PROTOBUF_CONSTEXPR DmSegMobileReply::DmSegMobileReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.elems_)*/{}
  , /*decltype(_impl_.ai_flag_)*/nullptr
  , /*decltype(_impl_.state_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DmSegMobileReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DmSegMobileReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DmSegMobileReplyDefaultTypeInternal() {}
  union {
    DmSegMobileReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DmSegMobileReplyDefaultTypeInternal _DmSegMobileReply_default_instance_;
PROTOBUF_CONSTEXPR DmViewReq::DmViewReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.spmid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pid_)*/int64_t{0}
  , /*decltype(_impl_.oid_)*/int64_t{0}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.is_hard_boot_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DmViewReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DmViewReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DmViewReqDefaultTypeInternal() {}
  union {
    DmViewReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DmViewReqDefaultTypeInternal _DmViewReq_default_instance_;
PROTOBUF_CONSTEXPR DmViewReply::DmViewReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.special_dms_)*/{}
  , /*decltype(_impl_.report_filter_content_)*/{}
  , /*decltype(_impl_.check_box_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.check_box_show_msg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.text_placeholder_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.input_placeholder_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mask_)*/nullptr
  , /*decltype(_impl_.subtitle_)*/nullptr
  , /*decltype(_impl_.ai_flag_)*/nullptr
  , /*decltype(_impl_.player_config_)*/nullptr
  , /*decltype(_impl_.closed_)*/false
  , /*decltype(_impl_.allow_)*/false
  , /*decltype(_impl_.send_box_style_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DmViewReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DmViewReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DmViewReplyDefaultTypeInternal() {}
  union {
    DmViewReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DmViewReplyDefaultTypeInternal _DmViewReply_default_instance_;
PROTOBUF_CONSTEXPR DmWebViewReply::DmWebViewReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.special_dms_)*/{}
  , /*decltype(_impl_.commanddms_)*/{}
  , /*decltype(_impl_.report_filter_content_)*/{}
  , /*decltype(_impl_.text_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.text_side_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.dm_sge_)*/nullptr
  , /*decltype(_impl_.flag_)*/nullptr
  , /*decltype(_impl_.player_config_)*/nullptr
  , /*decltype(_impl_.state_)*/0
  , /*decltype(_impl_.check_box_)*/false
  , /*decltype(_impl_.count_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DmWebViewReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DmWebViewReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DmWebViewReplyDefaultTypeInternal() {}
  union {
    DmWebViewReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DmWebViewReplyDefaultTypeInternal _DmWebViewReply_default_instance_;
PROTOBUF_CONSTEXPR CommandDm::CommandDm(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.mid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.command_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.content_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ctime_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mtime_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.extra_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.idstr_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/int64_t{0}
  , /*decltype(_impl_.oid_)*/int64_t{0}
  , /*decltype(_impl_.progress_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CommandDmDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandDmDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandDmDefaultTypeInternal() {}
  union {
    CommandDm _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandDmDefaultTypeInternal _CommandDm_default_instance_;
PROTOBUF_CONSTEXPR DmSegConfig::DmSegConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.page_size_)*/int64_t{0}
  , /*decltype(_impl_.total_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DmSegConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DmSegConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DmSegConfigDefaultTypeInternal() {}
  union {
    DmSegConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DmSegConfigDefaultTypeInternal _DmSegConfig_default_instance_;
PROTOBUF_CONSTEXPR VideoMask::VideoMask(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.mask_url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.cid_)*/int64_t{0}
  , /*decltype(_impl_.plat_)*/0
  , /*decltype(_impl_.fps_)*/0
  , /*decltype(_impl_.time_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VideoMaskDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VideoMaskDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VideoMaskDefaultTypeInternal() {}
  union {
    VideoMask _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VideoMaskDefaultTypeInternal _VideoMask_default_instance_;
PROTOBUF_CONSTEXPR VideoSubtitle::VideoSubtitle(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.subtitles_)*/{}
  , /*decltype(_impl_.lan_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.landoc_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VideoSubtitleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VideoSubtitleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VideoSubtitleDefaultTypeInternal() {}
  union {
    VideoSubtitle _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VideoSubtitleDefaultTypeInternal _VideoSubtitle_default_instance_;
PROTOBUF_CONSTEXPR DanmuWebPlayerConfig::DanmuWebPlayerConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.fontfamily_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.draw_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ai_level_)*/0
  , /*decltype(_impl_.dm_switch_)*/false
  , /*decltype(_impl_.ai_switch_)*/false
  , /*decltype(_impl_.blocktop_)*/false
  , /*decltype(_impl_.blockscroll_)*/false
  , /*decltype(_impl_.blockbottom_)*/false
  , /*decltype(_impl_.blockcolor_)*/false
  , /*decltype(_impl_.blockspecial_)*/false
  , /*decltype(_impl_.preventshade_)*/false
  , /*decltype(_impl_.opacity_)*/0
  , /*decltype(_impl_.dmarea_)*/0
  , /*decltype(_impl_.speedplus_)*/0
  , /*decltype(_impl_.fontsize_)*/0
  , /*decltype(_impl_.dmask_)*/false
  , /*decltype(_impl_.screensync_)*/false
  , /*decltype(_impl_.speedsync_)*/false
  , /*decltype(_impl_.bold_)*/false
  , /*decltype(_impl_.fontborder_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DanmuWebPlayerConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DanmuWebPlayerConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DanmuWebPlayerConfigDefaultTypeInternal() {}
  union {
    DanmuWebPlayerConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DanmuWebPlayerConfigDefaultTypeInternal _DanmuWebPlayerConfig_default_instance_;
PROTOBUF_CONSTEXPR SubtitleItem::SubtitleItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_str_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.lan_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.lan_doc_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.subtitle_url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.author_)*/nullptr
  , /*decltype(_impl_.id_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SubtitleItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubtitleItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubtitleItemDefaultTypeInternal() {}
  union {
    SubtitleItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubtitleItemDefaultTypeInternal _SubtitleItem_default_instance_;
PROTOBUF_CONSTEXPR UserInfo::UserInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sex_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.face_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sign_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mid_)*/int64_t{0}
  , /*decltype(_impl_.rank_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UserInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserInfoDefaultTypeInternal() {}
  union {
    UserInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserInfoDefaultTypeInternal _UserInfo_default_instance_;
PROTOBUF_CONSTEXPR DanmakuElem::DanmakuElem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.midhash_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.content_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.action_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.idstr_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/int64_t{0}
  , /*decltype(_impl_.progress_)*/0
  , /*decltype(_impl_.mode_)*/0
  , /*decltype(_impl_.fontsize_)*/0
  , /*decltype(_impl_.color_)*/0u
  , /*decltype(_impl_.ctime_)*/int64_t{0}
  , /*decltype(_impl_.weight_)*/0
  , /*decltype(_impl_.pool_)*/0
  , /*decltype(_impl_.attr_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DanmakuElemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DanmakuElemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DanmakuElemDefaultTypeInternal() {}
  union {
    DanmakuElem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DanmakuElemDefaultTypeInternal _DanmakuElem_default_instance_;
PROTOBUF_CONSTEXPR DmPlayerConfigReq::DmPlayerConfigReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.switch__)*/nullptr
  , /*decltype(_impl_.switch_save_)*/nullptr
  , /*decltype(_impl_.use_default_config_)*/nullptr
  , /*decltype(_impl_.ai_recommended_switch_)*/nullptr
  , /*decltype(_impl_.ai_recommended_level_)*/nullptr
  , /*decltype(_impl_.blocktop_)*/nullptr
  , /*decltype(_impl_.blockscroll_)*/nullptr
  , /*decltype(_impl_.blockbottom_)*/nullptr
  , /*decltype(_impl_.blockcolorful_)*/nullptr
  , /*decltype(_impl_.blockrepeat_)*/nullptr
  , /*decltype(_impl_.blockspecial_)*/nullptr
  , /*decltype(_impl_.opacity_)*/nullptr
  , /*decltype(_impl_.scalingfactor_)*/nullptr
  , /*decltype(_impl_.domain_)*/nullptr
  , /*decltype(_impl_.speed_)*/nullptr
  , /*decltype(_impl_.enableblocklist_)*/nullptr
  , /*decltype(_impl_.inlineplayerdanmakuswitch_)*/nullptr
  , /*decltype(_impl_.ts_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DmPlayerConfigReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DmPlayerConfigReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DmPlayerConfigReqDefaultTypeInternal() {}
  union {
    DmPlayerConfigReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DmPlayerConfigReqDefaultTypeInternal _DmPlayerConfigReq_default_instance_;
PROTOBUF_CONSTEXPR Response::Response(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.code_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResponseDefaultTypeInternal() {}
  union {
    Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResponseDefaultTypeInternal _Response_default_instance_;
PROTOBUF_CONSTEXPR DanmakuFlag::DanmakuFlag(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.dmid_)*/int64_t{0}
  , /*decltype(_impl_.flag_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DanmakuFlagDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DanmakuFlagDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DanmakuFlagDefaultTypeInternal() {}
  union {
    DanmakuFlag _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DanmakuFlagDefaultTypeInternal _DanmakuFlag_default_instance_;
PROTOBUF_CONSTEXPR DanmakuFlagConfig::DanmakuFlagConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.rec_text_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.rec_flag_)*/0
  , /*decltype(_impl_.rec_switch_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DanmakuFlagConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DanmakuFlagConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DanmakuFlagConfigDefaultTypeInternal() {}
  union {
    DanmakuFlagConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DanmakuFlagConfigDefaultTypeInternal _DanmakuFlagConfig_default_instance_;
PROTOBUF_CONSTEXPR DanmakuAIFlag::DanmakuAIFlag(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.dm_flags_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DanmakuAIFlagDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DanmakuAIFlagDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DanmakuAIFlagDefaultTypeInternal() {}
  union {
    DanmakuAIFlag _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DanmakuAIFlagDefaultTypeInternal _DanmakuAIFlag_default_instance_;
PROTOBUF_CONSTEXPR DanmuPlayerViewConfig::DanmuPlayerViewConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.danmuku_player_dynamic_config_)*/{}
  , /*decltype(_impl_.danmuku_default_player_config_)*/nullptr
  , /*decltype(_impl_.danmuku_player_config_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DanmuPlayerViewConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DanmuPlayerViewConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DanmuPlayerViewConfigDefaultTypeInternal() {}
  union {
    DanmuPlayerViewConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DanmuPlayerViewConfigDefaultTypeInternal _DanmuPlayerViewConfig_default_instance_;
PROTOBUF_CONSTEXPR DanmuDefaultPlayerConfig::DanmuDefaultPlayerConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.player_danmaku_use_default_config_)*/false
  , /*decltype(_impl_.player_danmaku_ai_recommended_switch_)*/false
  , /*decltype(_impl_.player_danmaku_blocktop_)*/false
  , /*decltype(_impl_.player_danmaku_blockscroll_)*/false
  , /*decltype(_impl_.player_danmaku_ai_recommended_level_)*/0
  , /*decltype(_impl_.player_danmaku_blockbottom_)*/false
  , /*decltype(_impl_.player_danmaku_blockcolorful_)*/false
  , /*decltype(_impl_.player_danmaku_blockrepeat_)*/false
  , /*decltype(_impl_.player_danmaku_blockspecial_)*/false
  , /*decltype(_impl_.player_danmaku_opacity_)*/0
  , /*decltype(_impl_.player_danmaku_scalingfactor_)*/0
  , /*decltype(_impl_.player_danmaku_domain_)*/0
  , /*decltype(_impl_.player_danmaku_speed_)*/0
  , /*decltype(_impl_.inline_player_danmaku_switch_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DanmuDefaultPlayerConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DanmuDefaultPlayerConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DanmuDefaultPlayerConfigDefaultTypeInternal() {}
  union {
    DanmuDefaultPlayerConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DanmuDefaultPlayerConfigDefaultTypeInternal _DanmuDefaultPlayerConfig_default_instance_;
PROTOBUF_CONSTEXPR DanmuPlayerConfig::DanmuPlayerConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.player_danmaku_switch_)*/false
  , /*decltype(_impl_.player_danmaku_switch_save_)*/false
  , /*decltype(_impl_.player_danmaku_use_default_config_)*/false
  , /*decltype(_impl_.player_danmaku_ai_recommended_switch_)*/false
  , /*decltype(_impl_.player_danmaku_ai_recommended_level_)*/0
  , /*decltype(_impl_.player_danmaku_blocktop_)*/false
  , /*decltype(_impl_.player_danmaku_blockscroll_)*/false
  , /*decltype(_impl_.player_danmaku_blockbottom_)*/false
  , /*decltype(_impl_.player_danmaku_blockcolorful_)*/false
  , /*decltype(_impl_.player_danmaku_opacity_)*/0
  , /*decltype(_impl_.player_danmaku_scalingfactor_)*/0
  , /*decltype(_impl_.player_danmaku_blockrepeat_)*/false
  , /*decltype(_impl_.player_danmaku_blockspecial_)*/false
  , /*decltype(_impl_.player_danmaku_enableblocklist_)*/false
  , /*decltype(_impl_.inline_player_danmaku_switch_)*/false
  , /*decltype(_impl_.player_danmaku_domain_)*/0
  , /*decltype(_impl_.player_danmaku_speed_)*/0
  , /*decltype(_impl_.inline_player_danmaku_config_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DanmuPlayerConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DanmuPlayerConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DanmuPlayerConfigDefaultTypeInternal() {}
  union {
    DanmuPlayerConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DanmuPlayerConfigDefaultTypeInternal _DanmuPlayerConfig_default_instance_;
PROTOBUF_CONSTEXPR DanmuPlayerDynamicConfig::DanmuPlayerDynamicConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.progress_)*/0
  , /*decltype(_impl_.player_danmaku_domain_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DanmuPlayerDynamicConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DanmuPlayerDynamicConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DanmuPlayerDynamicConfigDefaultTypeInternal() {}
  union {
    DanmuPlayerDynamicConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DanmuPlayerDynamicConfigDefaultTypeInternal _DanmuPlayerDynamicConfig_default_instance_;
PROTOBUF_CONSTEXPR PlayerDanmakuSwitch::PlayerDanmakuSwitch(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.value_)*/false
  , /*decltype(_impl_.canignore_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PlayerDanmakuSwitchDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerDanmakuSwitchDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerDanmakuSwitchDefaultTypeInternal() {}
  union {
    PlayerDanmakuSwitch _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerDanmakuSwitchDefaultTypeInternal _PlayerDanmakuSwitch_default_instance_;
PROTOBUF_CONSTEXPR PlayerDanmakuSwitchSave::PlayerDanmakuSwitchSave(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.value_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PlayerDanmakuSwitchSaveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerDanmakuSwitchSaveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerDanmakuSwitchSaveDefaultTypeInternal() {}
  union {
    PlayerDanmakuSwitchSave _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerDanmakuSwitchSaveDefaultTypeInternal _PlayerDanmakuSwitchSave_default_instance_;
PROTOBUF_CONSTEXPR PlayerDanmakuUseDefaultConfig::PlayerDanmakuUseDefaultConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.value_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PlayerDanmakuUseDefaultConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerDanmakuUseDefaultConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerDanmakuUseDefaultConfigDefaultTypeInternal() {}
  union {
    PlayerDanmakuUseDefaultConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerDanmakuUseDefaultConfigDefaultTypeInternal _PlayerDanmakuUseDefaultConfig_default_instance_;
PROTOBUF_CONSTEXPR PlayerDanmakuAiRecommendedSwitch::PlayerDanmakuAiRecommendedSwitch(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.value_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PlayerDanmakuAiRecommendedSwitchDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerDanmakuAiRecommendedSwitchDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerDanmakuAiRecommendedSwitchDefaultTypeInternal() {}
  union {
    PlayerDanmakuAiRecommendedSwitch _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerDanmakuAiRecommendedSwitchDefaultTypeInternal _PlayerDanmakuAiRecommendedSwitch_default_instance_;
PROTOBUF_CONSTEXPR PlayerDanmakuAiRecommendedLevel::PlayerDanmakuAiRecommendedLevel(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.value_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PlayerDanmakuAiRecommendedLevelDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerDanmakuAiRecommendedLevelDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerDanmakuAiRecommendedLevelDefaultTypeInternal() {}
  union {
    PlayerDanmakuAiRecommendedLevel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerDanmakuAiRecommendedLevelDefaultTypeInternal _PlayerDanmakuAiRecommendedLevel_default_instance_;
PROTOBUF_CONSTEXPR PlayerDanmakuBlocktop::PlayerDanmakuBlocktop(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.value_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PlayerDanmakuBlocktopDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerDanmakuBlocktopDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerDanmakuBlocktopDefaultTypeInternal() {}
  union {
    PlayerDanmakuBlocktop _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerDanmakuBlocktopDefaultTypeInternal _PlayerDanmakuBlocktop_default_instance_;
PROTOBUF_CONSTEXPR PlayerDanmakuBlockscroll::PlayerDanmakuBlockscroll(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.value_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PlayerDanmakuBlockscrollDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerDanmakuBlockscrollDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerDanmakuBlockscrollDefaultTypeInternal() {}
  union {
    PlayerDanmakuBlockscroll _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerDanmakuBlockscrollDefaultTypeInternal _PlayerDanmakuBlockscroll_default_instance_;
PROTOBUF_CONSTEXPR PlayerDanmakuBlockbottom::PlayerDanmakuBlockbottom(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.value_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PlayerDanmakuBlockbottomDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerDanmakuBlockbottomDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerDanmakuBlockbottomDefaultTypeInternal() {}
  union {
    PlayerDanmakuBlockbottom _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerDanmakuBlockbottomDefaultTypeInternal _PlayerDanmakuBlockbottom_default_instance_;
PROTOBUF_CONSTEXPR PlayerDanmakuBlockcolorful::PlayerDanmakuBlockcolorful(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.value_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PlayerDanmakuBlockcolorfulDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerDanmakuBlockcolorfulDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerDanmakuBlockcolorfulDefaultTypeInternal() {}
  union {
    PlayerDanmakuBlockcolorful _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerDanmakuBlockcolorfulDefaultTypeInternal _PlayerDanmakuBlockcolorful_default_instance_;
PROTOBUF_CONSTEXPR PlayerDanmakuBlockrepeat::PlayerDanmakuBlockrepeat(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.value_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PlayerDanmakuBlockrepeatDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerDanmakuBlockrepeatDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerDanmakuBlockrepeatDefaultTypeInternal() {}
  union {
    PlayerDanmakuBlockrepeat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerDanmakuBlockrepeatDefaultTypeInternal _PlayerDanmakuBlockrepeat_default_instance_;
PROTOBUF_CONSTEXPR PlayerDanmakuBlockspecial::PlayerDanmakuBlockspecial(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.value_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PlayerDanmakuBlockspecialDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerDanmakuBlockspecialDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerDanmakuBlockspecialDefaultTypeInternal() {}
  union {
    PlayerDanmakuBlockspecial _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerDanmakuBlockspecialDefaultTypeInternal _PlayerDanmakuBlockspecial_default_instance_;
PROTOBUF_CONSTEXPR PlayerDanmakuOpacity::PlayerDanmakuOpacity(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.value_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PlayerDanmakuOpacityDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerDanmakuOpacityDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerDanmakuOpacityDefaultTypeInternal() {}
  union {
    PlayerDanmakuOpacity _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerDanmakuOpacityDefaultTypeInternal _PlayerDanmakuOpacity_default_instance_;
PROTOBUF_CONSTEXPR PlayerDanmakuScalingfactor::PlayerDanmakuScalingfactor(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.value_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PlayerDanmakuScalingfactorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerDanmakuScalingfactorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerDanmakuScalingfactorDefaultTypeInternal() {}
  union {
    PlayerDanmakuScalingfactor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerDanmakuScalingfactorDefaultTypeInternal _PlayerDanmakuScalingfactor_default_instance_;
PROTOBUF_CONSTEXPR PlayerDanmakuDomain::PlayerDanmakuDomain(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.value_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PlayerDanmakuDomainDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerDanmakuDomainDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerDanmakuDomainDefaultTypeInternal() {}
  union {
    PlayerDanmakuDomain _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerDanmakuDomainDefaultTypeInternal _PlayerDanmakuDomain_default_instance_;
PROTOBUF_CONSTEXPR PlayerDanmakuSpeed::PlayerDanmakuSpeed(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.value_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PlayerDanmakuSpeedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerDanmakuSpeedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerDanmakuSpeedDefaultTypeInternal() {}
  union {
    PlayerDanmakuSpeed _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerDanmakuSpeedDefaultTypeInternal _PlayerDanmakuSpeed_default_instance_;
PROTOBUF_CONSTEXPR PlayerDanmakuEnableblocklist::PlayerDanmakuEnableblocklist(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.value_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PlayerDanmakuEnableblocklistDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerDanmakuEnableblocklistDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerDanmakuEnableblocklistDefaultTypeInternal() {}
  union {
    PlayerDanmakuEnableblocklist _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerDanmakuEnableblocklistDefaultTypeInternal _PlayerDanmakuEnableblocklist_default_instance_;
PROTOBUF_CONSTEXPR InlinePlayerDanmakuSwitch::InlinePlayerDanmakuSwitch(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.value_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct InlinePlayerDanmakuSwitchDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InlinePlayerDanmakuSwitchDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InlinePlayerDanmakuSwitchDefaultTypeInternal() {}
  union {
    InlinePlayerDanmakuSwitch _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InlinePlayerDanmakuSwitchDefaultTypeInternal _InlinePlayerDanmakuSwitch_default_instance_;
}  // namespace v1
}  // namespace dm
}  // namespace service
}  // namespace community
}  // namespace bilibili
static ::_pb::Metadata file_level_metadata_reply_2eproto[43];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_reply_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_reply_2eproto = nullptr;

const uint32_t TableStruct_reply_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DmSegSDKReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DmSegSDKReq, _impl_.pid_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DmSegSDKReq, _impl_.oid_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DmSegSDKReq, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DmSegSDKReq, _impl_.segment_index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DmSegSDKReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DmSegSDKReply, _impl_.closed_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DmSegSDKReply, _impl_.elems_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DmSegOttReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DmSegOttReq, _impl_.pid_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DmSegOttReq, _impl_.oid_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DmSegOttReq, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DmSegOttReq, _impl_.segment_index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DmSegOttReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DmSegOttReply, _impl_.closed_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DmSegOttReply, _impl_.elems_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DmSegMobileReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DmSegMobileReq, _impl_.pid_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DmSegMobileReq, _impl_.oid_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DmSegMobileReq, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DmSegMobileReq, _impl_.segment_index_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DmSegMobileReq, _impl_.teenagers_mode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DmSegMobileReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DmSegMobileReply, _impl_.elems_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DmSegMobileReply, _impl_.state_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DmSegMobileReply, _impl_.ai_flag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DmViewReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DmViewReq, _impl_.pid_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DmViewReq, _impl_.oid_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DmViewReq, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DmViewReq, _impl_.spmid_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DmViewReq, _impl_.is_hard_boot_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DmViewReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DmViewReply, _impl_.closed_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DmViewReply, _impl_.mask_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DmViewReply, _impl_.subtitle_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DmViewReply, _impl_.special_dms_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DmViewReply, _impl_.ai_flag_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DmViewReply, _impl_.player_config_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DmViewReply, _impl_.send_box_style_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DmViewReply, _impl_.allow_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DmViewReply, _impl_.check_box_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DmViewReply, _impl_.check_box_show_msg_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DmViewReply, _impl_.text_placeholder_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DmViewReply, _impl_.input_placeholder_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DmViewReply, _impl_.report_filter_content_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DmWebViewReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DmWebViewReply, _impl_.state_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DmWebViewReply, _impl_.text_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DmWebViewReply, _impl_.text_side_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DmWebViewReply, _impl_.dm_sge_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DmWebViewReply, _impl_.flag_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DmWebViewReply, _impl_.special_dms_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DmWebViewReply, _impl_.check_box_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DmWebViewReply, _impl_.count_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DmWebViewReply, _impl_.commanddms_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DmWebViewReply, _impl_.player_config_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DmWebViewReply, _impl_.report_filter_content_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::CommandDm, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::CommandDm, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::CommandDm, _impl_.oid_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::CommandDm, _impl_.mid_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::CommandDm, _impl_.command_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::CommandDm, _impl_.content_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::CommandDm, _impl_.progress_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::CommandDm, _impl_.ctime_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::CommandDm, _impl_.mtime_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::CommandDm, _impl_.extra_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::CommandDm, _impl_.idstr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DmSegConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DmSegConfig, _impl_.page_size_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DmSegConfig, _impl_.total_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::VideoMask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::VideoMask, _impl_.cid_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::VideoMask, _impl_.plat_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::VideoMask, _impl_.fps_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::VideoMask, _impl_.time_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::VideoMask, _impl_.mask_url_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::VideoSubtitle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::VideoSubtitle, _impl_.lan_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::VideoSubtitle, _impl_.landoc_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::VideoSubtitle, _impl_.subtitles_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DanmuWebPlayerConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DanmuWebPlayerConfig, _impl_.dm_switch_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DanmuWebPlayerConfig, _impl_.ai_switch_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DanmuWebPlayerConfig, _impl_.ai_level_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DanmuWebPlayerConfig, _impl_.blocktop_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DanmuWebPlayerConfig, _impl_.blockscroll_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DanmuWebPlayerConfig, _impl_.blockbottom_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DanmuWebPlayerConfig, _impl_.blockcolor_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DanmuWebPlayerConfig, _impl_.blockspecial_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DanmuWebPlayerConfig, _impl_.preventshade_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DanmuWebPlayerConfig, _impl_.dmask_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DanmuWebPlayerConfig, _impl_.opacity_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DanmuWebPlayerConfig, _impl_.dmarea_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DanmuWebPlayerConfig, _impl_.speedplus_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DanmuWebPlayerConfig, _impl_.fontsize_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DanmuWebPlayerConfig, _impl_.screensync_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DanmuWebPlayerConfig, _impl_.speedsync_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DanmuWebPlayerConfig, _impl_.fontfamily_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DanmuWebPlayerConfig, _impl_.bold_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DanmuWebPlayerConfig, _impl_.fontborder_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DanmuWebPlayerConfig, _impl_.draw_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::SubtitleItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::SubtitleItem, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::SubtitleItem, _impl_.id_str_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::SubtitleItem, _impl_.lan_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::SubtitleItem, _impl_.lan_doc_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::SubtitleItem, _impl_.subtitle_url_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::SubtitleItem, _impl_.author_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::UserInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::UserInfo, _impl_.mid_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::UserInfo, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::UserInfo, _impl_.sex_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::UserInfo, _impl_.face_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::UserInfo, _impl_.sign_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::UserInfo, _impl_.rank_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DanmakuElem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DanmakuElem, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DanmakuElem, _impl_.progress_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DanmakuElem, _impl_.mode_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DanmakuElem, _impl_.fontsize_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DanmakuElem, _impl_.color_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DanmakuElem, _impl_.midhash_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DanmakuElem, _impl_.content_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DanmakuElem, _impl_.ctime_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DanmakuElem, _impl_.weight_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DanmakuElem, _impl_.action_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DanmakuElem, _impl_.pool_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DanmakuElem, _impl_.idstr_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DanmakuElem, _impl_.attr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DmPlayerConfigReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DmPlayerConfigReq, _impl_.ts_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DmPlayerConfigReq, _impl_.switch__),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DmPlayerConfigReq, _impl_.switch_save_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DmPlayerConfigReq, _impl_.use_default_config_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DmPlayerConfigReq, _impl_.ai_recommended_switch_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DmPlayerConfigReq, _impl_.ai_recommended_level_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DmPlayerConfigReq, _impl_.blocktop_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DmPlayerConfigReq, _impl_.blockscroll_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DmPlayerConfigReq, _impl_.blockbottom_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DmPlayerConfigReq, _impl_.blockcolorful_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DmPlayerConfigReq, _impl_.blockrepeat_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DmPlayerConfigReq, _impl_.blockspecial_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DmPlayerConfigReq, _impl_.opacity_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DmPlayerConfigReq, _impl_.scalingfactor_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DmPlayerConfigReq, _impl_.domain_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DmPlayerConfigReq, _impl_.speed_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DmPlayerConfigReq, _impl_.enableblocklist_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DmPlayerConfigReq, _impl_.inlineplayerdanmakuswitch_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::Response, _impl_.code_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::Response, _impl_.message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DanmakuFlag, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DanmakuFlag, _impl_.dmid_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DanmakuFlag, _impl_.flag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DanmakuFlagConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DanmakuFlagConfig, _impl_.rec_flag_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DanmakuFlagConfig, _impl_.rec_text_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DanmakuFlagConfig, _impl_.rec_switch_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DanmakuAIFlag, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DanmakuAIFlag, _impl_.dm_flags_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DanmuPlayerViewConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DanmuPlayerViewConfig, _impl_.danmuku_default_player_config_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DanmuPlayerViewConfig, _impl_.danmuku_player_config_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DanmuPlayerViewConfig, _impl_.danmuku_player_dynamic_config_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DanmuDefaultPlayerConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DanmuDefaultPlayerConfig, _impl_.player_danmaku_use_default_config_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DanmuDefaultPlayerConfig, _impl_.player_danmaku_ai_recommended_switch_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DanmuDefaultPlayerConfig, _impl_.player_danmaku_ai_recommended_level_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DanmuDefaultPlayerConfig, _impl_.player_danmaku_blocktop_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DanmuDefaultPlayerConfig, _impl_.player_danmaku_blockscroll_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DanmuDefaultPlayerConfig, _impl_.player_danmaku_blockbottom_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DanmuDefaultPlayerConfig, _impl_.player_danmaku_blockcolorful_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DanmuDefaultPlayerConfig, _impl_.player_danmaku_blockrepeat_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DanmuDefaultPlayerConfig, _impl_.player_danmaku_blockspecial_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DanmuDefaultPlayerConfig, _impl_.player_danmaku_opacity_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DanmuDefaultPlayerConfig, _impl_.player_danmaku_scalingfactor_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DanmuDefaultPlayerConfig, _impl_.player_danmaku_domain_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DanmuDefaultPlayerConfig, _impl_.player_danmaku_speed_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DanmuDefaultPlayerConfig, _impl_.inline_player_danmaku_switch_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DanmuPlayerConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DanmuPlayerConfig, _impl_.player_danmaku_switch_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DanmuPlayerConfig, _impl_.player_danmaku_switch_save_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DanmuPlayerConfig, _impl_.player_danmaku_use_default_config_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DanmuPlayerConfig, _impl_.player_danmaku_ai_recommended_switch_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DanmuPlayerConfig, _impl_.player_danmaku_ai_recommended_level_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DanmuPlayerConfig, _impl_.player_danmaku_blocktop_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DanmuPlayerConfig, _impl_.player_danmaku_blockscroll_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DanmuPlayerConfig, _impl_.player_danmaku_blockbottom_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DanmuPlayerConfig, _impl_.player_danmaku_blockcolorful_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DanmuPlayerConfig, _impl_.player_danmaku_blockrepeat_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DanmuPlayerConfig, _impl_.player_danmaku_blockspecial_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DanmuPlayerConfig, _impl_.player_danmaku_opacity_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DanmuPlayerConfig, _impl_.player_danmaku_scalingfactor_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DanmuPlayerConfig, _impl_.player_danmaku_domain_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DanmuPlayerConfig, _impl_.player_danmaku_speed_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DanmuPlayerConfig, _impl_.player_danmaku_enableblocklist_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DanmuPlayerConfig, _impl_.inline_player_danmaku_switch_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DanmuPlayerConfig, _impl_.inline_player_danmaku_config_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DanmuPlayerDynamicConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DanmuPlayerDynamicConfig, _impl_.progress_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::DanmuPlayerDynamicConfig, _impl_.player_danmaku_domain_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::PlayerDanmakuSwitch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::PlayerDanmakuSwitch, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::PlayerDanmakuSwitch, _impl_.canignore_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::PlayerDanmakuSwitchSave, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::PlayerDanmakuSwitchSave, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::PlayerDanmakuUseDefaultConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::PlayerDanmakuUseDefaultConfig, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::PlayerDanmakuAiRecommendedSwitch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::PlayerDanmakuAiRecommendedSwitch, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::PlayerDanmakuAiRecommendedLevel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::PlayerDanmakuAiRecommendedLevel, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::PlayerDanmakuBlocktop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::PlayerDanmakuBlocktop, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::PlayerDanmakuBlockscroll, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::PlayerDanmakuBlockscroll, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::PlayerDanmakuBlockbottom, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::PlayerDanmakuBlockbottom, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::PlayerDanmakuBlockcolorful, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::PlayerDanmakuBlockcolorful, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::PlayerDanmakuBlockrepeat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::PlayerDanmakuBlockrepeat, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::PlayerDanmakuBlockspecial, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::PlayerDanmakuBlockspecial, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::PlayerDanmakuOpacity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::PlayerDanmakuOpacity, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::PlayerDanmakuScalingfactor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::PlayerDanmakuScalingfactor, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::PlayerDanmakuDomain, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::PlayerDanmakuDomain, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::PlayerDanmakuSpeed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::PlayerDanmakuSpeed, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::PlayerDanmakuEnableblocklist, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::PlayerDanmakuEnableblocklist, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::InlinePlayerDanmakuSwitch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bilibili::community::service::dm::v1::InlinePlayerDanmakuSwitch, _impl_.value_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::bilibili::community::service::dm::v1::DmSegSDKReq)},
  { 10, -1, -1, sizeof(::bilibili::community::service::dm::v1::DmSegSDKReply)},
  { 18, -1, -1, sizeof(::bilibili::community::service::dm::v1::DmSegOttReq)},
  { 28, -1, -1, sizeof(::bilibili::community::service::dm::v1::DmSegOttReply)},
  { 36, -1, -1, sizeof(::bilibili::community::service::dm::v1::DmSegMobileReq)},
  { 47, -1, -1, sizeof(::bilibili::community::service::dm::v1::DmSegMobileReply)},
  { 56, -1, -1, sizeof(::bilibili::community::service::dm::v1::DmViewReq)},
  { 67, -1, -1, sizeof(::bilibili::community::service::dm::v1::DmViewReply)},
  { 86, -1, -1, sizeof(::bilibili::community::service::dm::v1::DmWebViewReply)},
  { 103, -1, -1, sizeof(::bilibili::community::service::dm::v1::CommandDm)},
  { 119, -1, -1, sizeof(::bilibili::community::service::dm::v1::DmSegConfig)},
  { 127, -1, -1, sizeof(::bilibili::community::service::dm::v1::VideoMask)},
  { 138, -1, -1, sizeof(::bilibili::community::service::dm::v1::VideoSubtitle)},
  { 147, -1, -1, sizeof(::bilibili::community::service::dm::v1::DanmuWebPlayerConfig)},
  { 173, -1, -1, sizeof(::bilibili::community::service::dm::v1::SubtitleItem)},
  { 185, -1, -1, sizeof(::bilibili::community::service::dm::v1::UserInfo)},
  { 197, -1, -1, sizeof(::bilibili::community::service::dm::v1::DanmakuElem)},
  { 216, -1, -1, sizeof(::bilibili::community::service::dm::v1::DmPlayerConfigReq)},
  { 240, -1, -1, sizeof(::bilibili::community::service::dm::v1::Response)},
  { 248, -1, -1, sizeof(::bilibili::community::service::dm::v1::DanmakuFlag)},
  { 256, -1, -1, sizeof(::bilibili::community::service::dm::v1::DanmakuFlagConfig)},
  { 265, -1, -1, sizeof(::bilibili::community::service::dm::v1::DanmakuAIFlag)},
  { 272, -1, -1, sizeof(::bilibili::community::service::dm::v1::DanmuPlayerViewConfig)},
  { 281, -1, -1, sizeof(::bilibili::community::service::dm::v1::DanmuDefaultPlayerConfig)},
  { 301, -1, -1, sizeof(::bilibili::community::service::dm::v1::DanmuPlayerConfig)},
  { 325, -1, -1, sizeof(::bilibili::community::service::dm::v1::DanmuPlayerDynamicConfig)},
  { 333, -1, -1, sizeof(::bilibili::community::service::dm::v1::PlayerDanmakuSwitch)},
  { 341, -1, -1, sizeof(::bilibili::community::service::dm::v1::PlayerDanmakuSwitchSave)},
  { 348, -1, -1, sizeof(::bilibili::community::service::dm::v1::PlayerDanmakuUseDefaultConfig)},
  { 355, -1, -1, sizeof(::bilibili::community::service::dm::v1::PlayerDanmakuAiRecommendedSwitch)},
  { 362, -1, -1, sizeof(::bilibili::community::service::dm::v1::PlayerDanmakuAiRecommendedLevel)},
  { 369, -1, -1, sizeof(::bilibili::community::service::dm::v1::PlayerDanmakuBlocktop)},
  { 376, -1, -1, sizeof(::bilibili::community::service::dm::v1::PlayerDanmakuBlockscroll)},
  { 383, -1, -1, sizeof(::bilibili::community::service::dm::v1::PlayerDanmakuBlockbottom)},
  { 390, -1, -1, sizeof(::bilibili::community::service::dm::v1::PlayerDanmakuBlockcolorful)},
  { 397, -1, -1, sizeof(::bilibili::community::service::dm::v1::PlayerDanmakuBlockrepeat)},
  { 404, -1, -1, sizeof(::bilibili::community::service::dm::v1::PlayerDanmakuBlockspecial)},
  { 411, -1, -1, sizeof(::bilibili::community::service::dm::v1::PlayerDanmakuOpacity)},
  { 418, -1, -1, sizeof(::bilibili::community::service::dm::v1::PlayerDanmakuScalingfactor)},
  { 425, -1, -1, sizeof(::bilibili::community::service::dm::v1::PlayerDanmakuDomain)},
  { 432, -1, -1, sizeof(::bilibili::community::service::dm::v1::PlayerDanmakuSpeed)},
  { 439, -1, -1, sizeof(::bilibili::community::service::dm::v1::PlayerDanmakuEnableblocklist)},
  { 446, -1, -1, sizeof(::bilibili::community::service::dm::v1::InlinePlayerDanmakuSwitch)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::bilibili::community::service::dm::v1::_DmSegSDKReq_default_instance_._instance,
  &::bilibili::community::service::dm::v1::_DmSegSDKReply_default_instance_._instance,
  &::bilibili::community::service::dm::v1::_DmSegOttReq_default_instance_._instance,
  &::bilibili::community::service::dm::v1::_DmSegOttReply_default_instance_._instance,
  &::bilibili::community::service::dm::v1::_DmSegMobileReq_default_instance_._instance,
  &::bilibili::community::service::dm::v1::_DmSegMobileReply_default_instance_._instance,
  &::bilibili::community::service::dm::v1::_DmViewReq_default_instance_._instance,
  &::bilibili::community::service::dm::v1::_DmViewReply_default_instance_._instance,
  &::bilibili::community::service::dm::v1::_DmWebViewReply_default_instance_._instance,
  &::bilibili::community::service::dm::v1::_CommandDm_default_instance_._instance,
  &::bilibili::community::service::dm::v1::_DmSegConfig_default_instance_._instance,
  &::bilibili::community::service::dm::v1::_VideoMask_default_instance_._instance,
  &::bilibili::community::service::dm::v1::_VideoSubtitle_default_instance_._instance,
  &::bilibili::community::service::dm::v1::_DanmuWebPlayerConfig_default_instance_._instance,
  &::bilibili::community::service::dm::v1::_SubtitleItem_default_instance_._instance,
  &::bilibili::community::service::dm::v1::_UserInfo_default_instance_._instance,
  &::bilibili::community::service::dm::v1::_DanmakuElem_default_instance_._instance,
  &::bilibili::community::service::dm::v1::_DmPlayerConfigReq_default_instance_._instance,
  &::bilibili::community::service::dm::v1::_Response_default_instance_._instance,
  &::bilibili::community::service::dm::v1::_DanmakuFlag_default_instance_._instance,
  &::bilibili::community::service::dm::v1::_DanmakuFlagConfig_default_instance_._instance,
  &::bilibili::community::service::dm::v1::_DanmakuAIFlag_default_instance_._instance,
  &::bilibili::community::service::dm::v1::_DanmuPlayerViewConfig_default_instance_._instance,
  &::bilibili::community::service::dm::v1::_DanmuDefaultPlayerConfig_default_instance_._instance,
  &::bilibili::community::service::dm::v1::_DanmuPlayerConfig_default_instance_._instance,
  &::bilibili::community::service::dm::v1::_DanmuPlayerDynamicConfig_default_instance_._instance,
  &::bilibili::community::service::dm::v1::_PlayerDanmakuSwitch_default_instance_._instance,
  &::bilibili::community::service::dm::v1::_PlayerDanmakuSwitchSave_default_instance_._instance,
  &::bilibili::community::service::dm::v1::_PlayerDanmakuUseDefaultConfig_default_instance_._instance,
  &::bilibili::community::service::dm::v1::_PlayerDanmakuAiRecommendedSwitch_default_instance_._instance,
  &::bilibili::community::service::dm::v1::_PlayerDanmakuAiRecommendedLevel_default_instance_._instance,
  &::bilibili::community::service::dm::v1::_PlayerDanmakuBlocktop_default_instance_._instance,
  &::bilibili::community::service::dm::v1::_PlayerDanmakuBlockscroll_default_instance_._instance,
  &::bilibili::community::service::dm::v1::_PlayerDanmakuBlockbottom_default_instance_._instance,
  &::bilibili::community::service::dm::v1::_PlayerDanmakuBlockcolorful_default_instance_._instance,
  &::bilibili::community::service::dm::v1::_PlayerDanmakuBlockrepeat_default_instance_._instance,
  &::bilibili::community::service::dm::v1::_PlayerDanmakuBlockspecial_default_instance_._instance,
  &::bilibili::community::service::dm::v1::_PlayerDanmakuOpacity_default_instance_._instance,
  &::bilibili::community::service::dm::v1::_PlayerDanmakuScalingfactor_default_instance_._instance,
  &::bilibili::community::service::dm::v1::_PlayerDanmakuDomain_default_instance_._instance,
  &::bilibili::community::service::dm::v1::_PlayerDanmakuSpeed_default_instance_._instance,
  &::bilibili::community::service::dm::v1::_PlayerDanmakuEnableblocklist_default_instance_._instance,
  &::bilibili::community::service::dm::v1::_InlinePlayerDanmakuSwitch_default_instance_._instance,
};

const char descriptor_table_protodef_reply_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013reply.proto\022 bilibili.community.servic"
  "e.dm.v1\"L\n\013DmSegSDKReq\022\013\n\003pid\030\001 \001(\003\022\013\n\003o"
  "id\030\002 \001(\003\022\014\n\004type\030\003 \001(\005\022\025\n\rsegment_index\030"
  "\004 \001(\003\"]\n\rDmSegSDKReply\022\016\n\006closed\030\001 \001(\010\022<"
  "\n\005elems\030\002 \003(\0132-.bilibili.community.servi"
  "ce.dm.v1.DanmakuElem\"L\n\013DmSegOttReq\022\013\n\003p"
  "id\030\001 \001(\003\022\013\n\003oid\030\002 \001(\003\022\014\n\004type\030\003 \001(\005\022\025\n\rs"
  "egment_index\030\004 \001(\003\"]\n\rDmSegOttReply\022\016\n\006c"
  "losed\030\001 \001(\010\022<\n\005elems\030\002 \003(\0132-.bilibili.co"
  "mmunity.service.dm.v1.DanmakuElem\"g\n\016DmS"
  "egMobileReq\022\013\n\003pid\030\001 \001(\003\022\013\n\003oid\030\002 \001(\003\022\014\n"
  "\004type\030\003 \001(\005\022\025\n\rsegment_index\030\004 \001(\003\022\026\n\016te"
  "enagers_mode\030\005 \001(\005\"\241\001\n\020DmSegMobileReply\022"
  "<\n\005elems\030\001 \003(\0132-.bilibili.community.serv"
  "ice.dm.v1.DanmakuElem\022\r\n\005state\030\002 \001(\005\022@\n\007"
  "ai_flag\030\003 \001(\0132/.bilibili.community.servi"
  "ce.dm.v1.DanmakuAIFlag\"X\n\tDmViewReq\022\013\n\003p"
  "id\030\001 \001(\003\022\013\n\003oid\030\002 \001(\003\022\014\n\004type\030\003 \001(\005\022\r\n\005s"
  "pmid\030\004 \001(\t\022\024\n\014is_hard_boot\030\005 \001(\005\"\360\003\n\013DmV"
  "iewReply\022\016\n\006closed\030\001 \001(\010\0229\n\004mask\030\002 \001(\0132+"
  ".bilibili.community.service.dm.v1.VideoM"
  "ask\022A\n\010subtitle\030\003 \001(\0132/.bilibili.communi"
  "ty.service.dm.v1.VideoSubtitle\022\023\n\013specia"
  "l_dms\030\004 \003(\t\022D\n\007ai_flag\030\005 \001(\01323.bilibili."
  "community.service.dm.v1.DanmakuFlagConfi"
  "g\022N\n\rplayer_config\030\006 \001(\01327.bilibili.comm"
  "unity.service.dm.v1.DanmuPlayerViewConfi"
  "g\022\026\n\016send_box_style\030\007 \001(\005\022\r\n\005allow\030\010 \001(\010"
  "\022\021\n\tcheck_box\030\t \001(\t\022\032\n\022check_box_show_ms"
  "g\030\n \001(\t\022\030\n\020text_placeholder\030\013 \001(\t\022\031\n\021inp"
  "ut_placeholder\030\014 \001(\t\022\035\n\025report_filter_co"
  "ntent\030\r \003(\t\"\250\003\n\016DmWebViewReply\022\r\n\005state\030"
  "\001 \001(\005\022\014\n\004text\030\002 \001(\t\022\021\n\ttext_side\030\003 \001(\t\022="
  "\n\006dm_sge\030\004 \001(\0132-.bilibili.community.serv"
  "ice.dm.v1.DmSegConfig\022A\n\004flag\030\005 \001(\01323.bi"
  "libili.community.service.dm.v1.DanmakuFl"
  "agConfig\022\023\n\013special_dms\030\006 \003(\t\022\021\n\tcheck_b"
  "ox\030\007 \001(\010\022\r\n\005count\030\010 \001(\003\022\?\n\ncommandDms\030\t "
  "\003(\0132+.bilibili.community.service.dm.v1.C"
  "ommandDm\022M\n\rplayer_config\030\n \001(\01326.bilibi"
  "li.community.service.dm.v1.DanmuWebPlaye"
  "rConfig\022\035\n\025report_filter_content\030\013 \003(\t\"\241"
  "\001\n\tCommandDm\022\n\n\002id\030\001 \001(\003\022\013\n\003oid\030\002 \001(\003\022\013\n"
  "\003mid\030\003 \001(\t\022\017\n\007command\030\004 \001(\t\022\017\n\007content\030\005"
  " \001(\t\022\020\n\010progress\030\006 \001(\005\022\r\n\005ctime\030\007 \001(\t\022\r\n"
  "\005mtime\030\010 \001(\t\022\r\n\005extra\030\t \001(\t\022\r\n\005idStr\030\n \001"
  "(\t\"/\n\013DmSegConfig\022\021\n\tpage_size\030\001 \001(\003\022\r\n\005"
  "total\030\002 \001(\003\"S\n\tVideoMask\022\013\n\003cid\030\001 \001(\003\022\014\n"
  "\004plat\030\002 \001(\005\022\013\n\003fps\030\003 \001(\005\022\014\n\004time\030\004 \001(\003\022\020"
  "\n\010mask_url\030\005 \001(\t\"o\n\rVideoSubtitle\022\013\n\003lan"
  "\030\001 \001(\t\022\016\n\006lanDoc\030\002 \001(\t\022A\n\tsubtitles\030\003 \003("
  "\0132..bilibili.community.service.dm.v1.Sub"
  "titleItem\"\217\003\n\024DanmuWebPlayerConfig\022\021\n\tdm"
  "_switch\030\001 \001(\010\022\021\n\tai_switch\030\002 \001(\010\022\020\n\010ai_l"
  "evel\030\003 \001(\005\022\020\n\010blocktop\030\004 \001(\010\022\023\n\013blockscr"
  "oll\030\005 \001(\010\022\023\n\013blockbottom\030\006 \001(\010\022\022\n\nblockc"
  "olor\030\007 \001(\010\022\024\n\014blockspecial\030\010 \001(\010\022\024\n\014prev"
  "entshade\030\t \001(\010\022\r\n\005dmask\030\n \001(\010\022\017\n\007opacity"
  "\030\013 \001(\002\022\016\n\006dmarea\030\014 \001(\005\022\021\n\tspeedplus\030\r \001("
  "\002\022\020\n\010fontsize\030\016 \001(\002\022\022\n\nscreensync\030\017 \001(\010\022"
  "\021\n\tspeedsync\030\020 \001(\010\022\022\n\nfontfamily\030\021 \001(\t\022\014"
  "\n\004bold\030\022 \001(\010\022\022\n\nfontborder\030\023 \001(\005\022\021\n\tdraw"
  "_type\030\024 \001(\t\"\232\001\n\014SubtitleItem\022\n\n\002id\030\001 \001(\003"
  "\022\016\n\006id_str\030\002 \001(\t\022\013\n\003lan\030\003 \001(\t\022\017\n\007lan_doc"
  "\030\004 \001(\t\022\024\n\014subtitle_url\030\005 \001(\t\022:\n\006author\030\006"
  " \001(\0132*.bilibili.community.service.dm.v1."
  "UserInfo\"\\\n\010UserInfo\022\013\n\003mid\030\001 \001(\003\022\014\n\004nam"
  "e\030\002 \001(\t\022\013\n\003sex\030\003 \001(\t\022\014\n\004face\030\004 \001(\t\022\014\n\004si"
  "gn\030\005 \001(\t\022\014\n\004rank\030\006 \001(\005\"\326\001\n\013DanmakuElem\022\n"
  "\n\002id\030\001 \001(\003\022\020\n\010progress\030\002 \001(\005\022\014\n\004mode\030\003 \001"
  "(\005\022\020\n\010fontsize\030\004 \001(\005\022\r\n\005color\030\005 \001(\r\022\017\n\007m"
  "idHash\030\006 \001(\t\022\017\n\007content\030\007 \001(\t\022\r\n\005ctime\030\010"
  " \001(\003\022\016\n\006weight\030\t \001(\005\022\016\n\006action\030\n \001(\t\022\014\n\004"
  "pool\030\013 \001(\005\022\r\n\005idStr\030\014 \001(\t\022\014\n\004attr\030\r \001(\005\""
  "\240\013\n\021DmPlayerConfigReq\022\n\n\002ts\030\001 \001(\003\022E\n\006swi"
  "tch\030\002 \001(\01325.bilibili.community.service.d"
  "m.v1.PlayerDanmakuSwitch\022N\n\013switch_save\030"
  "\003 \001(\01329.bilibili.community.service.dm.v1"
  ".PlayerDanmakuSwitchSave\022[\n\022use_default_"
  "config\030\004 \001(\0132\?.bilibili.community.servic"
  "e.dm.v1.PlayerDanmakuUseDefaultConfig\022a\n"
  "\025ai_recommended_switch\030\005 \001(\0132B.bilibili."
  "community.service.dm.v1.PlayerDanmakuAiR"
  "ecommendedSwitch\022_\n\024ai_recommended_level"
  "\030\006 \001(\0132A.bilibili.community.service.dm.v"
  "1.PlayerDanmakuAiRecommendedLevel\022I\n\010blo"
  "cktop\030\007 \001(\01327.bilibili.community.service"
  ".dm.v1.PlayerDanmakuBlocktop\022O\n\013blockscr"
  "oll\030\010 \001(\0132:.bilibili.community.service.d"
  "m.v1.PlayerDanmakuBlockscroll\022O\n\013blockbo"
  "ttom\030\t \001(\0132:.bilibili.community.service."
  "dm.v1.PlayerDanmakuBlockbottom\022S\n\rblockc"
  "olorful\030\n \001(\0132<.bilibili.community.servi"
  "ce.dm.v1.PlayerDanmakuBlockcolorful\022O\n\013b"
  "lockrepeat\030\013 \001(\0132:.bilibili.community.se"
  "rvice.dm.v1.PlayerDanmakuBlockrepeat\022Q\n\014"
  "blockspecial\030\014 \001(\0132;.bilibili.community."
  "service.dm.v1.PlayerDanmakuBlockspecial\022"
  "G\n\007opacity\030\r \001(\01326.bilibili.community.se"
  "rvice.dm.v1.PlayerDanmakuOpacity\022S\n\rscal"
  "ingfactor\030\016 \001(\0132<.bilibili.community.ser"
  "vice.dm.v1.PlayerDanmakuScalingfactor\022E\n"
  "\006domain\030\017 \001(\01325.bilibili.community.servi"
  "ce.dm.v1.PlayerDanmakuDomain\022C\n\005speed\030\020 "
  "\001(\01324.bilibili.community.service.dm.v1.P"
  "layerDanmakuSpeed\022W\n\017enableblocklist\030\021 \001"
  "(\0132>.bilibili.community.service.dm.v1.Pl"
  "ayerDanmakuEnableblocklist\022^\n\031inlinePlay"
  "erDanmakuSwitch\030\022 \001(\0132;.bilibili.communi"
  "ty.service.dm.v1.InlinePlayerDanmakuSwit"
  "ch\")\n\010Response\022\014\n\004code\030\001 \001(\005\022\017\n\007message\030"
  "\002 \001(\t\")\n\013DanmakuFlag\022\014\n\004dmid\030\001 \001(\003\022\014\n\004fl"
  "ag\030\002 \001(\r\"K\n\021DanmakuFlagConfig\022\020\n\010rec_fla"
  "g\030\001 \001(\005\022\020\n\010rec_text\030\002 \001(\t\022\022\n\nrec_switch\030"
  "\003 \001(\005\"P\n\rDanmakuAIFlag\022\?\n\010dm_flags\030\001 \003(\013"
  "2-.bilibili.community.service.dm.v1.Danm"
  "akuFlag\"\261\002\n\025DanmuPlayerViewConfig\022a\n\035dan"
  "muku_default_player_config\030\001 \001(\0132:.bilib"
  "ili.community.service.dm.v1.DanmuDefault"
  "PlayerConfig\022R\n\025danmuku_player_config\030\002 "
  "\001(\01323.bilibili.community.service.dm.v1.D"
  "anmuPlayerConfig\022a\n\035danmuku_player_dynam"
  "ic_config\030\003 \003(\0132:.bilibili.community.ser"
  "vice.dm.v1.DanmuPlayerDynamicConfig\"\241\004\n\030"
  "DanmuDefaultPlayerConfig\022)\n!player_danma"
  "ku_use_default_config\030\001 \001(\010\022,\n$player_da"
  "nmaku_ai_recommended_switch\030\004 \001(\010\022+\n#pla"
  "yer_danmaku_ai_recommended_level\030\005 \001(\005\022\037"
  "\n\027player_danmaku_blocktop\030\006 \001(\010\022\"\n\032playe"
  "r_danmaku_blockscroll\030\007 \001(\010\022\"\n\032player_da"
  "nmaku_blockbottom\030\010 \001(\010\022$\n\034player_danmak"
  "u_blockcolorful\030\t \001(\010\022\"\n\032player_danmaku_"
  "blockrepeat\030\n \001(\010\022#\n\033player_danmaku_bloc"
  "kspecial\030\013 \001(\010\022\036\n\026player_danmaku_opacity"
  "\030\014 \001(\002\022$\n\034player_danmaku_scalingfactor\030\r"
  " \001(\002\022\035\n\025player_danmaku_domain\030\016 \001(\002\022\034\n\024p"
  "layer_danmaku_speed\030\017 \001(\005\022$\n\034inline_play"
  "er_danmaku_switch\030\020 \001(\010\"\253\005\n\021DanmuPlayerC"
  "onfig\022\035\n\025player_danmaku_switch\030\001 \001(\010\022\"\n\032"
  "player_danmaku_switch_save\030\002 \001(\010\022)\n!play"
  "er_danmaku_use_default_config\030\003 \001(\010\022,\n$p"
  "layer_danmaku_ai_recommended_switch\030\004 \001("
  "\010\022+\n#player_danmaku_ai_recommended_level"
  "\030\005 \001(\005\022\037\n\027player_danmaku_blocktop\030\006 \001(\010\022"
  "\"\n\032player_danmaku_blockscroll\030\007 \001(\010\022\"\n\032p"
  "layer_danmaku_blockbottom\030\010 \001(\010\022$\n\034playe"
  "r_danmaku_blockcolorful\030\t \001(\010\022\"\n\032player_"
  "danmaku_blockrepeat\030\n \001(\010\022#\n\033player_danm"
  "aku_blockspecial\030\013 \001(\010\022\036\n\026player_danmaku"
  "_opacity\030\014 \001(\002\022$\n\034player_danmaku_scaling"
  "factor\030\r \001(\002\022\035\n\025player_danmaku_domain\030\016 "
  "\001(\002\022\034\n\024player_danmaku_speed\030\017 \001(\005\022&\n\036pla"
  "yer_danmaku_enableblocklist\030\020 \001(\010\022$\n\034inl"
  "ine_player_danmaku_switch\030\021 \001(\010\022$\n\034inlin"
  "e_player_danmaku_config\030\022 \001(\005\"K\n\030DanmuPl"
  "ayerDynamicConfig\022\020\n\010progress\030\001 \001(\005\022\035\n\025p"
  "layer_danmaku_domain\030\002 \001(\002\"7\n\023PlayerDanm"
  "akuSwitch\022\r\n\005value\030\001 \001(\010\022\021\n\tcanIgnore\030\002 "
  "\001(\010\"(\n\027PlayerDanmakuSwitchSave\022\r\n\005value\030"
  "\001 \001(\010\".\n\035PlayerDanmakuUseDefaultConfig\022\r"
  "\n\005value\030\001 \001(\010\"1\n PlayerDanmakuAiRecommen"
  "dedSwitch\022\r\n\005value\030\001 \001(\010\"0\n\037PlayerDanmak"
  "uAiRecommendedLevel\022\r\n\005value\030\001 \001(\010\"&\n\025Pl"
  "ayerDanmakuBlocktop\022\r\n\005value\030\001 \001(\010\")\n\030Pl"
  "ayerDanmakuBlockscroll\022\r\n\005value\030\001 \001(\010\")\n"
  "\030PlayerDanmakuBlockbottom\022\r\n\005value\030\001 \001(\010"
  "\"+\n\032PlayerDanmakuBlockcolorful\022\r\n\005value\030"
  "\001 \001(\010\")\n\030PlayerDanmakuBlockrepeat\022\r\n\005val"
  "ue\030\001 \001(\010\"*\n\031PlayerDanmakuBlockspecial\022\r\n"
  "\005value\030\001 \001(\010\"%\n\024PlayerDanmakuOpacity\022\r\n\005"
  "value\030\001 \001(\002\"+\n\032PlayerDanmakuScalingfacto"
  "r\022\r\n\005value\030\001 \001(\002\"$\n\023PlayerDanmakuDomain\022"
  "\r\n\005value\030\001 \001(\002\"#\n\022PlayerDanmakuSpeed\022\r\n\005"
  "value\030\001 \001(\005\"-\n\034PlayerDanmakuEnableblockl"
  "ist\022\r\n\005value\030\001 \001(\010\"*\n\031InlinePlayerDanmak"
  "uSwitch\022\r\n\005value\030\001 \001(\010*L\n\tDMAttrBit\022\024\n\020D"
  "MAttrBitProtect\020\000\022\025\n\021DMAttrBitFromLive\020\001"
  "\022\022\n\016DMAttrHighLike\020\0022\252\004\n\002DM\022s\n\013DmSegMobi"
  "le\0220.bilibili.community.service.dm.v1.Dm"
  "SegMobileReq\0322.bilibili.community.servic"
  "e.dm.v1.DmSegMobileReply\022d\n\006DmView\022+.bil"
  "ibili.community.service.dm.v1.DmViewReq\032"
  "-.bilibili.community.service.dm.v1.DmVie"
  "wReply\022q\n\016DmPlayerConfig\0223.bilibili.comm"
  "unity.service.dm.v1.DmPlayerConfigReq\032*."
  "bilibili.community.service.dm.v1.Respons"
  "e\022j\n\010DmSegOtt\022-.bilibili.community.servi"
  "ce.dm.v1.DmSegOttReq\032/.bilibili.communit"
  "y.service.dm.v1.DmSegOttReply\022j\n\010DmSegSD"
  "K\022-.bilibili.community.service.dm.v1.DmS"
  "egSDKReq\032/.bilibili.community.service.dm"
  ".v1.DmSegSDKReplyb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_reply_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_reply_2eproto = {
    false, false, 7665, descriptor_table_protodef_reply_2eproto,
    "reply.proto",
    &descriptor_table_reply_2eproto_once, nullptr, 0, 43,
    schemas, file_default_instances, TableStruct_reply_2eproto::offsets,
    file_level_metadata_reply_2eproto, file_level_enum_descriptors_reply_2eproto,
    file_level_service_descriptors_reply_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_reply_2eproto_getter() {
  return &descriptor_table_reply_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_reply_2eproto(&descriptor_table_reply_2eproto);
namespace bilibili {
namespace community {
namespace service {
namespace dm {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DMAttrBit_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_reply_2eproto);
  return file_level_enum_descriptors_reply_2eproto[0];
}
bool DMAttrBit_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class DmSegSDKReq::_Internal {
 public:
};

DmSegSDKReq::DmSegSDKReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bilibili.community.service.dm.v1.DmSegSDKReq)
}
DmSegSDKReq::DmSegSDKReq(const DmSegSDKReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DmSegSDKReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pid_){}
    , decltype(_impl_.oid_){}
    , decltype(_impl_.segment_index_){}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.pid_, &from._impl_.pid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.type_) -
    reinterpret_cast<char*>(&_impl_.pid_)) + sizeof(_impl_.type_));
  // @@protoc_insertion_point(copy_constructor:bilibili.community.service.dm.v1.DmSegSDKReq)
}

inline void DmSegSDKReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pid_){int64_t{0}}
    , decltype(_impl_.oid_){int64_t{0}}
    , decltype(_impl_.segment_index_){int64_t{0}}
    , decltype(_impl_.type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DmSegSDKReq::~DmSegSDKReq() {
  // @@protoc_insertion_point(destructor:bilibili.community.service.dm.v1.DmSegSDKReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DmSegSDKReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DmSegSDKReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DmSegSDKReq::Clear() {
// @@protoc_insertion_point(message_clear_start:bilibili.community.service.dm.v1.DmSegSDKReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.pid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.type_) -
      reinterpret_cast<char*>(&_impl_.pid_)) + sizeof(_impl_.type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DmSegSDKReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 oid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.oid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 segment_index = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.segment_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DmSegSDKReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bilibili.community.service.dm.v1.DmSegSDKReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 pid = 1;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_pid(), target);
  }

  // int64 oid = 2;
  if (this->_internal_oid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_oid(), target);
  }

  // int32 type = 3;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_type(), target);
  }

  // int64 segment_index = 4;
  if (this->_internal_segment_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_segment_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bilibili.community.service.dm.v1.DmSegSDKReq)
  return target;
}

size_t DmSegSDKReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bilibili.community.service.dm.v1.DmSegSDKReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 pid = 1;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_pid());
  }

  // int64 oid = 2;
  if (this->_internal_oid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_oid());
  }

  // int64 segment_index = 4;
  if (this->_internal_segment_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_segment_index());
  }

  // int32 type = 3;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DmSegSDKReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DmSegSDKReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DmSegSDKReq::GetClassData() const { return &_class_data_; }


void DmSegSDKReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DmSegSDKReq*>(&to_msg);
  auto& from = static_cast<const DmSegSDKReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bilibili.community.service.dm.v1.DmSegSDKReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_pid() != 0) {
    _this->_internal_set_pid(from._internal_pid());
  }
  if (from._internal_oid() != 0) {
    _this->_internal_set_oid(from._internal_oid());
  }
  if (from._internal_segment_index() != 0) {
    _this->_internal_set_segment_index(from._internal_segment_index());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DmSegSDKReq::CopyFrom(const DmSegSDKReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bilibili.community.service.dm.v1.DmSegSDKReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DmSegSDKReq::IsInitialized() const {
  return true;
}

void DmSegSDKReq::InternalSwap(DmSegSDKReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DmSegSDKReq, _impl_.type_)
      + sizeof(DmSegSDKReq::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(DmSegSDKReq, _impl_.pid_)>(
          reinterpret_cast<char*>(&_impl_.pid_),
          reinterpret_cast<char*>(&other->_impl_.pid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DmSegSDKReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_reply_2eproto_getter, &descriptor_table_reply_2eproto_once,
      file_level_metadata_reply_2eproto[0]);
}

// ===================================================================

class DmSegSDKReply::_Internal {
 public:
};

DmSegSDKReply::DmSegSDKReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bilibili.community.service.dm.v1.DmSegSDKReply)
}
DmSegSDKReply::DmSegSDKReply(const DmSegSDKReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DmSegSDKReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.elems_){from._impl_.elems_}
    , decltype(_impl_.closed_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.closed_ = from._impl_.closed_;
  // @@protoc_insertion_point(copy_constructor:bilibili.community.service.dm.v1.DmSegSDKReply)
}

inline void DmSegSDKReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.elems_){arena}
    , decltype(_impl_.closed_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DmSegSDKReply::~DmSegSDKReply() {
  // @@protoc_insertion_point(destructor:bilibili.community.service.dm.v1.DmSegSDKReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DmSegSDKReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.elems_.~RepeatedPtrField();
}

void DmSegSDKReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DmSegSDKReply::Clear() {
// @@protoc_insertion_point(message_clear_start:bilibili.community.service.dm.v1.DmSegSDKReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.elems_.Clear();
  _impl_.closed_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DmSegSDKReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool closed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.closed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .bilibili.community.service.dm.v1.DanmakuElem elems = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_elems(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DmSegSDKReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bilibili.community.service.dm.v1.DmSegSDKReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool closed = 1;
  if (this->_internal_closed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_closed(), target);
  }

  // repeated .bilibili.community.service.dm.v1.DanmakuElem elems = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_elems_size()); i < n; i++) {
    const auto& repfield = this->_internal_elems(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bilibili.community.service.dm.v1.DmSegSDKReply)
  return target;
}

size_t DmSegSDKReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bilibili.community.service.dm.v1.DmSegSDKReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bilibili.community.service.dm.v1.DanmakuElem elems = 2;
  total_size += 1UL * this->_internal_elems_size();
  for (const auto& msg : this->_impl_.elems_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bool closed = 1;
  if (this->_internal_closed() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DmSegSDKReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DmSegSDKReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DmSegSDKReply::GetClassData() const { return &_class_data_; }


void DmSegSDKReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DmSegSDKReply*>(&to_msg);
  auto& from = static_cast<const DmSegSDKReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bilibili.community.service.dm.v1.DmSegSDKReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.elems_.MergeFrom(from._impl_.elems_);
  if (from._internal_closed() != 0) {
    _this->_internal_set_closed(from._internal_closed());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DmSegSDKReply::CopyFrom(const DmSegSDKReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bilibili.community.service.dm.v1.DmSegSDKReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DmSegSDKReply::IsInitialized() const {
  return true;
}

void DmSegSDKReply::InternalSwap(DmSegSDKReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.elems_.InternalSwap(&other->_impl_.elems_);
  swap(_impl_.closed_, other->_impl_.closed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DmSegSDKReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_reply_2eproto_getter, &descriptor_table_reply_2eproto_once,
      file_level_metadata_reply_2eproto[1]);
}

// ===================================================================

class DmSegOttReq::_Internal {
 public:
};

DmSegOttReq::DmSegOttReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bilibili.community.service.dm.v1.DmSegOttReq)
}
DmSegOttReq::DmSegOttReq(const DmSegOttReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DmSegOttReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pid_){}
    , decltype(_impl_.oid_){}
    , decltype(_impl_.segment_index_){}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.pid_, &from._impl_.pid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.type_) -
    reinterpret_cast<char*>(&_impl_.pid_)) + sizeof(_impl_.type_));
  // @@protoc_insertion_point(copy_constructor:bilibili.community.service.dm.v1.DmSegOttReq)
}

inline void DmSegOttReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pid_){int64_t{0}}
    , decltype(_impl_.oid_){int64_t{0}}
    , decltype(_impl_.segment_index_){int64_t{0}}
    , decltype(_impl_.type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DmSegOttReq::~DmSegOttReq() {
  // @@protoc_insertion_point(destructor:bilibili.community.service.dm.v1.DmSegOttReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DmSegOttReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DmSegOttReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DmSegOttReq::Clear() {
// @@protoc_insertion_point(message_clear_start:bilibili.community.service.dm.v1.DmSegOttReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.pid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.type_) -
      reinterpret_cast<char*>(&_impl_.pid_)) + sizeof(_impl_.type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DmSegOttReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 oid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.oid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 segment_index = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.segment_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DmSegOttReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bilibili.community.service.dm.v1.DmSegOttReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 pid = 1;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_pid(), target);
  }

  // int64 oid = 2;
  if (this->_internal_oid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_oid(), target);
  }

  // int32 type = 3;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_type(), target);
  }

  // int64 segment_index = 4;
  if (this->_internal_segment_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_segment_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bilibili.community.service.dm.v1.DmSegOttReq)
  return target;
}

size_t DmSegOttReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bilibili.community.service.dm.v1.DmSegOttReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 pid = 1;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_pid());
  }

  // int64 oid = 2;
  if (this->_internal_oid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_oid());
  }

  // int64 segment_index = 4;
  if (this->_internal_segment_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_segment_index());
  }

  // int32 type = 3;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DmSegOttReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DmSegOttReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DmSegOttReq::GetClassData() const { return &_class_data_; }


void DmSegOttReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DmSegOttReq*>(&to_msg);
  auto& from = static_cast<const DmSegOttReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bilibili.community.service.dm.v1.DmSegOttReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_pid() != 0) {
    _this->_internal_set_pid(from._internal_pid());
  }
  if (from._internal_oid() != 0) {
    _this->_internal_set_oid(from._internal_oid());
  }
  if (from._internal_segment_index() != 0) {
    _this->_internal_set_segment_index(from._internal_segment_index());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DmSegOttReq::CopyFrom(const DmSegOttReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bilibili.community.service.dm.v1.DmSegOttReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DmSegOttReq::IsInitialized() const {
  return true;
}

void DmSegOttReq::InternalSwap(DmSegOttReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DmSegOttReq, _impl_.type_)
      + sizeof(DmSegOttReq::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(DmSegOttReq, _impl_.pid_)>(
          reinterpret_cast<char*>(&_impl_.pid_),
          reinterpret_cast<char*>(&other->_impl_.pid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DmSegOttReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_reply_2eproto_getter, &descriptor_table_reply_2eproto_once,
      file_level_metadata_reply_2eproto[2]);
}

// ===================================================================

class DmSegOttReply::_Internal {
 public:
};

DmSegOttReply::DmSegOttReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bilibili.community.service.dm.v1.DmSegOttReply)
}
DmSegOttReply::DmSegOttReply(const DmSegOttReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DmSegOttReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.elems_){from._impl_.elems_}
    , decltype(_impl_.closed_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.closed_ = from._impl_.closed_;
  // @@protoc_insertion_point(copy_constructor:bilibili.community.service.dm.v1.DmSegOttReply)
}

inline void DmSegOttReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.elems_){arena}
    , decltype(_impl_.closed_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DmSegOttReply::~DmSegOttReply() {
  // @@protoc_insertion_point(destructor:bilibili.community.service.dm.v1.DmSegOttReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DmSegOttReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.elems_.~RepeatedPtrField();
}

void DmSegOttReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DmSegOttReply::Clear() {
// @@protoc_insertion_point(message_clear_start:bilibili.community.service.dm.v1.DmSegOttReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.elems_.Clear();
  _impl_.closed_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DmSegOttReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool closed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.closed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .bilibili.community.service.dm.v1.DanmakuElem elems = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_elems(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DmSegOttReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bilibili.community.service.dm.v1.DmSegOttReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool closed = 1;
  if (this->_internal_closed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_closed(), target);
  }

  // repeated .bilibili.community.service.dm.v1.DanmakuElem elems = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_elems_size()); i < n; i++) {
    const auto& repfield = this->_internal_elems(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bilibili.community.service.dm.v1.DmSegOttReply)
  return target;
}

size_t DmSegOttReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bilibili.community.service.dm.v1.DmSegOttReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bilibili.community.service.dm.v1.DanmakuElem elems = 2;
  total_size += 1UL * this->_internal_elems_size();
  for (const auto& msg : this->_impl_.elems_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bool closed = 1;
  if (this->_internal_closed() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DmSegOttReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DmSegOttReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DmSegOttReply::GetClassData() const { return &_class_data_; }


void DmSegOttReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DmSegOttReply*>(&to_msg);
  auto& from = static_cast<const DmSegOttReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bilibili.community.service.dm.v1.DmSegOttReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.elems_.MergeFrom(from._impl_.elems_);
  if (from._internal_closed() != 0) {
    _this->_internal_set_closed(from._internal_closed());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DmSegOttReply::CopyFrom(const DmSegOttReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bilibili.community.service.dm.v1.DmSegOttReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DmSegOttReply::IsInitialized() const {
  return true;
}

void DmSegOttReply::InternalSwap(DmSegOttReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.elems_.InternalSwap(&other->_impl_.elems_);
  swap(_impl_.closed_, other->_impl_.closed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DmSegOttReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_reply_2eproto_getter, &descriptor_table_reply_2eproto_once,
      file_level_metadata_reply_2eproto[3]);
}

// ===================================================================

class DmSegMobileReq::_Internal {
 public:
};

DmSegMobileReq::DmSegMobileReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bilibili.community.service.dm.v1.DmSegMobileReq)
}
DmSegMobileReq::DmSegMobileReq(const DmSegMobileReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DmSegMobileReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pid_){}
    , decltype(_impl_.oid_){}
    , decltype(_impl_.segment_index_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.teenagers_mode_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.pid_, &from._impl_.pid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.teenagers_mode_) -
    reinterpret_cast<char*>(&_impl_.pid_)) + sizeof(_impl_.teenagers_mode_));
  // @@protoc_insertion_point(copy_constructor:bilibili.community.service.dm.v1.DmSegMobileReq)
}

inline void DmSegMobileReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pid_){int64_t{0}}
    , decltype(_impl_.oid_){int64_t{0}}
    , decltype(_impl_.segment_index_){int64_t{0}}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.teenagers_mode_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DmSegMobileReq::~DmSegMobileReq() {
  // @@protoc_insertion_point(destructor:bilibili.community.service.dm.v1.DmSegMobileReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DmSegMobileReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DmSegMobileReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DmSegMobileReq::Clear() {
// @@protoc_insertion_point(message_clear_start:bilibili.community.service.dm.v1.DmSegMobileReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.pid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.teenagers_mode_) -
      reinterpret_cast<char*>(&_impl_.pid_)) + sizeof(_impl_.teenagers_mode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DmSegMobileReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 oid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.oid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 segment_index = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.segment_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 teenagers_mode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.teenagers_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DmSegMobileReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bilibili.community.service.dm.v1.DmSegMobileReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 pid = 1;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_pid(), target);
  }

  // int64 oid = 2;
  if (this->_internal_oid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_oid(), target);
  }

  // int32 type = 3;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_type(), target);
  }

  // int64 segment_index = 4;
  if (this->_internal_segment_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_segment_index(), target);
  }

  // int32 teenagers_mode = 5;
  if (this->_internal_teenagers_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_teenagers_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bilibili.community.service.dm.v1.DmSegMobileReq)
  return target;
}

size_t DmSegMobileReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bilibili.community.service.dm.v1.DmSegMobileReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 pid = 1;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_pid());
  }

  // int64 oid = 2;
  if (this->_internal_oid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_oid());
  }

  // int64 segment_index = 4;
  if (this->_internal_segment_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_segment_index());
  }

  // int32 type = 3;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_type());
  }

  // int32 teenagers_mode = 5;
  if (this->_internal_teenagers_mode() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_teenagers_mode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DmSegMobileReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DmSegMobileReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DmSegMobileReq::GetClassData() const { return &_class_data_; }


void DmSegMobileReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DmSegMobileReq*>(&to_msg);
  auto& from = static_cast<const DmSegMobileReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bilibili.community.service.dm.v1.DmSegMobileReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_pid() != 0) {
    _this->_internal_set_pid(from._internal_pid());
  }
  if (from._internal_oid() != 0) {
    _this->_internal_set_oid(from._internal_oid());
  }
  if (from._internal_segment_index() != 0) {
    _this->_internal_set_segment_index(from._internal_segment_index());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_teenagers_mode() != 0) {
    _this->_internal_set_teenagers_mode(from._internal_teenagers_mode());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DmSegMobileReq::CopyFrom(const DmSegMobileReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bilibili.community.service.dm.v1.DmSegMobileReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DmSegMobileReq::IsInitialized() const {
  return true;
}

void DmSegMobileReq::InternalSwap(DmSegMobileReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DmSegMobileReq, _impl_.teenagers_mode_)
      + sizeof(DmSegMobileReq::_impl_.teenagers_mode_)
      - PROTOBUF_FIELD_OFFSET(DmSegMobileReq, _impl_.pid_)>(
          reinterpret_cast<char*>(&_impl_.pid_),
          reinterpret_cast<char*>(&other->_impl_.pid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DmSegMobileReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_reply_2eproto_getter, &descriptor_table_reply_2eproto_once,
      file_level_metadata_reply_2eproto[4]);
}

// ===================================================================

class DmSegMobileReply::_Internal {
 public:
  static const ::bilibili::community::service::dm::v1::DanmakuAIFlag& ai_flag(const DmSegMobileReply* msg);
};

const ::bilibili::community::service::dm::v1::DanmakuAIFlag&
DmSegMobileReply::_Internal::ai_flag(const DmSegMobileReply* msg) {
  return *msg->_impl_.ai_flag_;
}
DmSegMobileReply::DmSegMobileReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bilibili.community.service.dm.v1.DmSegMobileReply)
}
DmSegMobileReply::DmSegMobileReply(const DmSegMobileReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DmSegMobileReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.elems_){from._impl_.elems_}
    , decltype(_impl_.ai_flag_){nullptr}
    , decltype(_impl_.state_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ai_flag()) {
    _this->_impl_.ai_flag_ = new ::bilibili::community::service::dm::v1::DanmakuAIFlag(*from._impl_.ai_flag_);
  }
  _this->_impl_.state_ = from._impl_.state_;
  // @@protoc_insertion_point(copy_constructor:bilibili.community.service.dm.v1.DmSegMobileReply)
}

inline void DmSegMobileReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.elems_){arena}
    , decltype(_impl_.ai_flag_){nullptr}
    , decltype(_impl_.state_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DmSegMobileReply::~DmSegMobileReply() {
  // @@protoc_insertion_point(destructor:bilibili.community.service.dm.v1.DmSegMobileReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DmSegMobileReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.elems_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.ai_flag_;
}

void DmSegMobileReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DmSegMobileReply::Clear() {
// @@protoc_insertion_point(message_clear_start:bilibili.community.service.dm.v1.DmSegMobileReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.elems_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.ai_flag_ != nullptr) {
    delete _impl_.ai_flag_;
  }
  _impl_.ai_flag_ = nullptr;
  _impl_.state_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DmSegMobileReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .bilibili.community.service.dm.v1.DanmakuElem elems = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_elems(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .bilibili.community.service.dm.v1.DanmakuAIFlag ai_flag = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_ai_flag(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DmSegMobileReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bilibili.community.service.dm.v1.DmSegMobileReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .bilibili.community.service.dm.v1.DanmakuElem elems = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_elems_size()); i < n; i++) {
    const auto& repfield = this->_internal_elems(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int32 state = 2;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_state(), target);
  }

  // .bilibili.community.service.dm.v1.DanmakuAIFlag ai_flag = 3;
  if (this->_internal_has_ai_flag()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::ai_flag(this),
        _Internal::ai_flag(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bilibili.community.service.dm.v1.DmSegMobileReply)
  return target;
}

size_t DmSegMobileReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bilibili.community.service.dm.v1.DmSegMobileReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bilibili.community.service.dm.v1.DanmakuElem elems = 1;
  total_size += 1UL * this->_internal_elems_size();
  for (const auto& msg : this->_impl_.elems_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .bilibili.community.service.dm.v1.DanmakuAIFlag ai_flag = 3;
  if (this->_internal_has_ai_flag()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ai_flag_);
  }

  // int32 state = 2;
  if (this->_internal_state() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DmSegMobileReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DmSegMobileReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DmSegMobileReply::GetClassData() const { return &_class_data_; }


void DmSegMobileReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DmSegMobileReply*>(&to_msg);
  auto& from = static_cast<const DmSegMobileReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bilibili.community.service.dm.v1.DmSegMobileReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.elems_.MergeFrom(from._impl_.elems_);
  if (from._internal_has_ai_flag()) {
    _this->_internal_mutable_ai_flag()->::bilibili::community::service::dm::v1::DanmakuAIFlag::MergeFrom(
        from._internal_ai_flag());
  }
  if (from._internal_state() != 0) {
    _this->_internal_set_state(from._internal_state());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DmSegMobileReply::CopyFrom(const DmSegMobileReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bilibili.community.service.dm.v1.DmSegMobileReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DmSegMobileReply::IsInitialized() const {
  return true;
}

void DmSegMobileReply::InternalSwap(DmSegMobileReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.elems_.InternalSwap(&other->_impl_.elems_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DmSegMobileReply, _impl_.state_)
      + sizeof(DmSegMobileReply::_impl_.state_)
      - PROTOBUF_FIELD_OFFSET(DmSegMobileReply, _impl_.ai_flag_)>(
          reinterpret_cast<char*>(&_impl_.ai_flag_),
          reinterpret_cast<char*>(&other->_impl_.ai_flag_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DmSegMobileReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_reply_2eproto_getter, &descriptor_table_reply_2eproto_once,
      file_level_metadata_reply_2eproto[5]);
}

// ===================================================================

class DmViewReq::_Internal {
 public:
};

DmViewReq::DmViewReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bilibili.community.service.dm.v1.DmViewReq)
}
DmViewReq::DmViewReq(const DmViewReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DmViewReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.spmid_){}
    , decltype(_impl_.pid_){}
    , decltype(_impl_.oid_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.is_hard_boot_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.spmid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.spmid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_spmid().empty()) {
    _this->_impl_.spmid_.Set(from._internal_spmid(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.pid_, &from._impl_.pid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_hard_boot_) -
    reinterpret_cast<char*>(&_impl_.pid_)) + sizeof(_impl_.is_hard_boot_));
  // @@protoc_insertion_point(copy_constructor:bilibili.community.service.dm.v1.DmViewReq)
}

inline void DmViewReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.spmid_){}
    , decltype(_impl_.pid_){int64_t{0}}
    , decltype(_impl_.oid_){int64_t{0}}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.is_hard_boot_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.spmid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.spmid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DmViewReq::~DmViewReq() {
  // @@protoc_insertion_point(destructor:bilibili.community.service.dm.v1.DmViewReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DmViewReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.spmid_.Destroy();
}

void DmViewReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DmViewReq::Clear() {
// @@protoc_insertion_point(message_clear_start:bilibili.community.service.dm.v1.DmViewReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.spmid_.ClearToEmpty();
  ::memset(&_impl_.pid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.is_hard_boot_) -
      reinterpret_cast<char*>(&_impl_.pid_)) + sizeof(_impl_.is_hard_boot_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DmViewReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 oid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.oid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string spmid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_spmid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "bilibili.community.service.dm.v1.DmViewReq.spmid"));
        } else
          goto handle_unusual;
        continue;
      // int32 is_hard_boot = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.is_hard_boot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DmViewReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bilibili.community.service.dm.v1.DmViewReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 pid = 1;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_pid(), target);
  }

  // int64 oid = 2;
  if (this->_internal_oid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_oid(), target);
  }

  // int32 type = 3;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_type(), target);
  }

  // string spmid = 4;
  if (!this->_internal_spmid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_spmid().data(), static_cast<int>(this->_internal_spmid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bilibili.community.service.dm.v1.DmViewReq.spmid");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_spmid(), target);
  }

  // int32 is_hard_boot = 5;
  if (this->_internal_is_hard_boot() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_is_hard_boot(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bilibili.community.service.dm.v1.DmViewReq)
  return target;
}

size_t DmViewReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bilibili.community.service.dm.v1.DmViewReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string spmid = 4;
  if (!this->_internal_spmid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_spmid());
  }

  // int64 pid = 1;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_pid());
  }

  // int64 oid = 2;
  if (this->_internal_oid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_oid());
  }

  // int32 type = 3;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_type());
  }

  // int32 is_hard_boot = 5;
  if (this->_internal_is_hard_boot() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_is_hard_boot());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DmViewReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DmViewReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DmViewReq::GetClassData() const { return &_class_data_; }


void DmViewReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DmViewReq*>(&to_msg);
  auto& from = static_cast<const DmViewReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bilibili.community.service.dm.v1.DmViewReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_spmid().empty()) {
    _this->_internal_set_spmid(from._internal_spmid());
  }
  if (from._internal_pid() != 0) {
    _this->_internal_set_pid(from._internal_pid());
  }
  if (from._internal_oid() != 0) {
    _this->_internal_set_oid(from._internal_oid());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_is_hard_boot() != 0) {
    _this->_internal_set_is_hard_boot(from._internal_is_hard_boot());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DmViewReq::CopyFrom(const DmViewReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bilibili.community.service.dm.v1.DmViewReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DmViewReq::IsInitialized() const {
  return true;
}

void DmViewReq::InternalSwap(DmViewReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.spmid_, lhs_arena,
      &other->_impl_.spmid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DmViewReq, _impl_.is_hard_boot_)
      + sizeof(DmViewReq::_impl_.is_hard_boot_)
      - PROTOBUF_FIELD_OFFSET(DmViewReq, _impl_.pid_)>(
          reinterpret_cast<char*>(&_impl_.pid_),
          reinterpret_cast<char*>(&other->_impl_.pid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DmViewReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_reply_2eproto_getter, &descriptor_table_reply_2eproto_once,
      file_level_metadata_reply_2eproto[6]);
}

// ===================================================================

class DmViewReply::_Internal {
 public:
  static const ::bilibili::community::service::dm::v1::VideoMask& mask(const DmViewReply* msg);
  static const ::bilibili::community::service::dm::v1::VideoSubtitle& subtitle(const DmViewReply* msg);
  static const ::bilibili::community::service::dm::v1::DanmakuFlagConfig& ai_flag(const DmViewReply* msg);
  static const ::bilibili::community::service::dm::v1::DanmuPlayerViewConfig& player_config(const DmViewReply* msg);
};

const ::bilibili::community::service::dm::v1::VideoMask&
DmViewReply::_Internal::mask(const DmViewReply* msg) {
  return *msg->_impl_.mask_;
}
const ::bilibili::community::service::dm::v1::VideoSubtitle&
DmViewReply::_Internal::subtitle(const DmViewReply* msg) {
  return *msg->_impl_.subtitle_;
}
const ::bilibili::community::service::dm::v1::DanmakuFlagConfig&
DmViewReply::_Internal::ai_flag(const DmViewReply* msg) {
  return *msg->_impl_.ai_flag_;
}
const ::bilibili::community::service::dm::v1::DanmuPlayerViewConfig&
DmViewReply::_Internal::player_config(const DmViewReply* msg) {
  return *msg->_impl_.player_config_;
}
DmViewReply::DmViewReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bilibili.community.service.dm.v1.DmViewReply)
}
DmViewReply::DmViewReply(const DmViewReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DmViewReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.special_dms_){from._impl_.special_dms_}
    , decltype(_impl_.report_filter_content_){from._impl_.report_filter_content_}
    , decltype(_impl_.check_box_){}
    , decltype(_impl_.check_box_show_msg_){}
    , decltype(_impl_.text_placeholder_){}
    , decltype(_impl_.input_placeholder_){}
    , decltype(_impl_.mask_){nullptr}
    , decltype(_impl_.subtitle_){nullptr}
    , decltype(_impl_.ai_flag_){nullptr}
    , decltype(_impl_.player_config_){nullptr}
    , decltype(_impl_.closed_){}
    , decltype(_impl_.allow_){}
    , decltype(_impl_.send_box_style_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.check_box_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.check_box_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_check_box().empty()) {
    _this->_impl_.check_box_.Set(from._internal_check_box(), 
      _this->GetArenaForAllocation());
  }
  _impl_.check_box_show_msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.check_box_show_msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_check_box_show_msg().empty()) {
    _this->_impl_.check_box_show_msg_.Set(from._internal_check_box_show_msg(), 
      _this->GetArenaForAllocation());
  }
  _impl_.text_placeholder_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_placeholder_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_text_placeholder().empty()) {
    _this->_impl_.text_placeholder_.Set(from._internal_text_placeholder(), 
      _this->GetArenaForAllocation());
  }
  _impl_.input_placeholder_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.input_placeholder_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_input_placeholder().empty()) {
    _this->_impl_.input_placeholder_.Set(from._internal_input_placeholder(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_mask()) {
    _this->_impl_.mask_ = new ::bilibili::community::service::dm::v1::VideoMask(*from._impl_.mask_);
  }
  if (from._internal_has_subtitle()) {
    _this->_impl_.subtitle_ = new ::bilibili::community::service::dm::v1::VideoSubtitle(*from._impl_.subtitle_);
  }
  if (from._internal_has_ai_flag()) {
    _this->_impl_.ai_flag_ = new ::bilibili::community::service::dm::v1::DanmakuFlagConfig(*from._impl_.ai_flag_);
  }
  if (from._internal_has_player_config()) {
    _this->_impl_.player_config_ = new ::bilibili::community::service::dm::v1::DanmuPlayerViewConfig(*from._impl_.player_config_);
  }
  ::memcpy(&_impl_.closed_, &from._impl_.closed_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.send_box_style_) -
    reinterpret_cast<char*>(&_impl_.closed_)) + sizeof(_impl_.send_box_style_));
  // @@protoc_insertion_point(copy_constructor:bilibili.community.service.dm.v1.DmViewReply)
}

inline void DmViewReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.special_dms_){arena}
    , decltype(_impl_.report_filter_content_){arena}
    , decltype(_impl_.check_box_){}
    , decltype(_impl_.check_box_show_msg_){}
    , decltype(_impl_.text_placeholder_){}
    , decltype(_impl_.input_placeholder_){}
    , decltype(_impl_.mask_){nullptr}
    , decltype(_impl_.subtitle_){nullptr}
    , decltype(_impl_.ai_flag_){nullptr}
    , decltype(_impl_.player_config_){nullptr}
    , decltype(_impl_.closed_){false}
    , decltype(_impl_.allow_){false}
    , decltype(_impl_.send_box_style_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.check_box_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.check_box_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.check_box_show_msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.check_box_show_msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.text_placeholder_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_placeholder_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.input_placeholder_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.input_placeholder_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DmViewReply::~DmViewReply() {
  // @@protoc_insertion_point(destructor:bilibili.community.service.dm.v1.DmViewReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DmViewReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.special_dms_.~RepeatedPtrField();
  _impl_.report_filter_content_.~RepeatedPtrField();
  _impl_.check_box_.Destroy();
  _impl_.check_box_show_msg_.Destroy();
  _impl_.text_placeholder_.Destroy();
  _impl_.input_placeholder_.Destroy();
  if (this != internal_default_instance()) delete _impl_.mask_;
  if (this != internal_default_instance()) delete _impl_.subtitle_;
  if (this != internal_default_instance()) delete _impl_.ai_flag_;
  if (this != internal_default_instance()) delete _impl_.player_config_;
}

void DmViewReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DmViewReply::Clear() {
// @@protoc_insertion_point(message_clear_start:bilibili.community.service.dm.v1.DmViewReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.special_dms_.Clear();
  _impl_.report_filter_content_.Clear();
  _impl_.check_box_.ClearToEmpty();
  _impl_.check_box_show_msg_.ClearToEmpty();
  _impl_.text_placeholder_.ClearToEmpty();
  _impl_.input_placeholder_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.mask_ != nullptr) {
    delete _impl_.mask_;
  }
  _impl_.mask_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.subtitle_ != nullptr) {
    delete _impl_.subtitle_;
  }
  _impl_.subtitle_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.ai_flag_ != nullptr) {
    delete _impl_.ai_flag_;
  }
  _impl_.ai_flag_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.player_config_ != nullptr) {
    delete _impl_.player_config_;
  }
  _impl_.player_config_ = nullptr;
  ::memset(&_impl_.closed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.send_box_style_) -
      reinterpret_cast<char*>(&_impl_.closed_)) + sizeof(_impl_.send_box_style_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DmViewReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool closed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.closed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .bilibili.community.service.dm.v1.VideoMask mask = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_mask(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .bilibili.community.service.dm.v1.VideoSubtitle subtitle = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_subtitle(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string special_dms = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_special_dms();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "bilibili.community.service.dm.v1.DmViewReply.special_dms"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .bilibili.community.service.dm.v1.DanmakuFlagConfig ai_flag = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_ai_flag(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .bilibili.community.service.dm.v1.DanmuPlayerViewConfig player_config = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 send_box_style = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.send_box_style_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool allow = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.allow_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string check_box = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_check_box();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "bilibili.community.service.dm.v1.DmViewReply.check_box"));
        } else
          goto handle_unusual;
        continue;
      // string check_box_show_msg = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_check_box_show_msg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "bilibili.community.service.dm.v1.DmViewReply.check_box_show_msg"));
        } else
          goto handle_unusual;
        continue;
      // string text_placeholder = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_text_placeholder();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "bilibili.community.service.dm.v1.DmViewReply.text_placeholder"));
        } else
          goto handle_unusual;
        continue;
      // string input_placeholder = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_input_placeholder();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "bilibili.community.service.dm.v1.DmViewReply.input_placeholder"));
        } else
          goto handle_unusual;
        continue;
      // repeated string report_filter_content = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_report_filter_content();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "bilibili.community.service.dm.v1.DmViewReply.report_filter_content"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DmViewReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bilibili.community.service.dm.v1.DmViewReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool closed = 1;
  if (this->_internal_closed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_closed(), target);
  }

  // .bilibili.community.service.dm.v1.VideoMask mask = 2;
  if (this->_internal_has_mask()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::mask(this),
        _Internal::mask(this).GetCachedSize(), target, stream);
  }

  // .bilibili.community.service.dm.v1.VideoSubtitle subtitle = 3;
  if (this->_internal_has_subtitle()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::subtitle(this),
        _Internal::subtitle(this).GetCachedSize(), target, stream);
  }

  // repeated string special_dms = 4;
  for (int i = 0, n = this->_internal_special_dms_size(); i < n; i++) {
    const auto& s = this->_internal_special_dms(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bilibili.community.service.dm.v1.DmViewReply.special_dms");
    target = stream->WriteString(4, s, target);
  }

  // .bilibili.community.service.dm.v1.DanmakuFlagConfig ai_flag = 5;
  if (this->_internal_has_ai_flag()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::ai_flag(this),
        _Internal::ai_flag(this).GetCachedSize(), target, stream);
  }

  // .bilibili.community.service.dm.v1.DanmuPlayerViewConfig player_config = 6;
  if (this->_internal_has_player_config()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::player_config(this),
        _Internal::player_config(this).GetCachedSize(), target, stream);
  }

  // int32 send_box_style = 7;
  if (this->_internal_send_box_style() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_send_box_style(), target);
  }

  // bool allow = 8;
  if (this->_internal_allow() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_allow(), target);
  }

  // string check_box = 9;
  if (!this->_internal_check_box().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_check_box().data(), static_cast<int>(this->_internal_check_box().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bilibili.community.service.dm.v1.DmViewReply.check_box");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_check_box(), target);
  }

  // string check_box_show_msg = 10;
  if (!this->_internal_check_box_show_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_check_box_show_msg().data(), static_cast<int>(this->_internal_check_box_show_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bilibili.community.service.dm.v1.DmViewReply.check_box_show_msg");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_check_box_show_msg(), target);
  }

  // string text_placeholder = 11;
  if (!this->_internal_text_placeholder().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text_placeholder().data(), static_cast<int>(this->_internal_text_placeholder().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bilibili.community.service.dm.v1.DmViewReply.text_placeholder");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_text_placeholder(), target);
  }

  // string input_placeholder = 12;
  if (!this->_internal_input_placeholder().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_input_placeholder().data(), static_cast<int>(this->_internal_input_placeholder().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bilibili.community.service.dm.v1.DmViewReply.input_placeholder");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_input_placeholder(), target);
  }

  // repeated string report_filter_content = 13;
  for (int i = 0, n = this->_internal_report_filter_content_size(); i < n; i++) {
    const auto& s = this->_internal_report_filter_content(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bilibili.community.service.dm.v1.DmViewReply.report_filter_content");
    target = stream->WriteString(13, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bilibili.community.service.dm.v1.DmViewReply)
  return target;
}

size_t DmViewReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bilibili.community.service.dm.v1.DmViewReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string special_dms = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.special_dms_.size());
  for (int i = 0, n = _impl_.special_dms_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.special_dms_.Get(i));
  }

  // repeated string report_filter_content = 13;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.report_filter_content_.size());
  for (int i = 0, n = _impl_.report_filter_content_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.report_filter_content_.Get(i));
  }

  // string check_box = 9;
  if (!this->_internal_check_box().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_check_box());
  }

  // string check_box_show_msg = 10;
  if (!this->_internal_check_box_show_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_check_box_show_msg());
  }

  // string text_placeholder = 11;
  if (!this->_internal_text_placeholder().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text_placeholder());
  }

  // string input_placeholder = 12;
  if (!this->_internal_input_placeholder().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_input_placeholder());
  }

  // .bilibili.community.service.dm.v1.VideoMask mask = 2;
  if (this->_internal_has_mask()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mask_);
  }

  // .bilibili.community.service.dm.v1.VideoSubtitle subtitle = 3;
  if (this->_internal_has_subtitle()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.subtitle_);
  }

  // .bilibili.community.service.dm.v1.DanmakuFlagConfig ai_flag = 5;
  if (this->_internal_has_ai_flag()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ai_flag_);
  }

  // .bilibili.community.service.dm.v1.DanmuPlayerViewConfig player_config = 6;
  if (this->_internal_has_player_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.player_config_);
  }

  // bool closed = 1;
  if (this->_internal_closed() != 0) {
    total_size += 1 + 1;
  }

  // bool allow = 8;
  if (this->_internal_allow() != 0) {
    total_size += 1 + 1;
  }

  // int32 send_box_style = 7;
  if (this->_internal_send_box_style() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_send_box_style());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DmViewReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DmViewReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DmViewReply::GetClassData() const { return &_class_data_; }


void DmViewReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DmViewReply*>(&to_msg);
  auto& from = static_cast<const DmViewReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bilibili.community.service.dm.v1.DmViewReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.special_dms_.MergeFrom(from._impl_.special_dms_);
  _this->_impl_.report_filter_content_.MergeFrom(from._impl_.report_filter_content_);
  if (!from._internal_check_box().empty()) {
    _this->_internal_set_check_box(from._internal_check_box());
  }
  if (!from._internal_check_box_show_msg().empty()) {
    _this->_internal_set_check_box_show_msg(from._internal_check_box_show_msg());
  }
  if (!from._internal_text_placeholder().empty()) {
    _this->_internal_set_text_placeholder(from._internal_text_placeholder());
  }
  if (!from._internal_input_placeholder().empty()) {
    _this->_internal_set_input_placeholder(from._internal_input_placeholder());
  }
  if (from._internal_has_mask()) {
    _this->_internal_mutable_mask()->::bilibili::community::service::dm::v1::VideoMask::MergeFrom(
        from._internal_mask());
  }
  if (from._internal_has_subtitle()) {
    _this->_internal_mutable_subtitle()->::bilibili::community::service::dm::v1::VideoSubtitle::MergeFrom(
        from._internal_subtitle());
  }
  if (from._internal_has_ai_flag()) {
    _this->_internal_mutable_ai_flag()->::bilibili::community::service::dm::v1::DanmakuFlagConfig::MergeFrom(
        from._internal_ai_flag());
  }
  if (from._internal_has_player_config()) {
    _this->_internal_mutable_player_config()->::bilibili::community::service::dm::v1::DanmuPlayerViewConfig::MergeFrom(
        from._internal_player_config());
  }
  if (from._internal_closed() != 0) {
    _this->_internal_set_closed(from._internal_closed());
  }
  if (from._internal_allow() != 0) {
    _this->_internal_set_allow(from._internal_allow());
  }
  if (from._internal_send_box_style() != 0) {
    _this->_internal_set_send_box_style(from._internal_send_box_style());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DmViewReply::CopyFrom(const DmViewReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bilibili.community.service.dm.v1.DmViewReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DmViewReply::IsInitialized() const {
  return true;
}

void DmViewReply::InternalSwap(DmViewReply* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.special_dms_.InternalSwap(&other->_impl_.special_dms_);
  _impl_.report_filter_content_.InternalSwap(&other->_impl_.report_filter_content_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.check_box_, lhs_arena,
      &other->_impl_.check_box_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.check_box_show_msg_, lhs_arena,
      &other->_impl_.check_box_show_msg_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.text_placeholder_, lhs_arena,
      &other->_impl_.text_placeholder_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.input_placeholder_, lhs_arena,
      &other->_impl_.input_placeholder_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DmViewReply, _impl_.send_box_style_)
      + sizeof(DmViewReply::_impl_.send_box_style_)
      - PROTOBUF_FIELD_OFFSET(DmViewReply, _impl_.mask_)>(
          reinterpret_cast<char*>(&_impl_.mask_),
          reinterpret_cast<char*>(&other->_impl_.mask_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DmViewReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_reply_2eproto_getter, &descriptor_table_reply_2eproto_once,
      file_level_metadata_reply_2eproto[7]);
}

// ===================================================================

class DmWebViewReply::_Internal {
 public:
  static const ::bilibili::community::service::dm::v1::DmSegConfig& dm_sge(const DmWebViewReply* msg);
  static const ::bilibili::community::service::dm::v1::DanmakuFlagConfig& flag(const DmWebViewReply* msg);
  static const ::bilibili::community::service::dm::v1::DanmuWebPlayerConfig& player_config(const DmWebViewReply* msg);
};

const ::bilibili::community::service::dm::v1::DmSegConfig&
DmWebViewReply::_Internal::dm_sge(const DmWebViewReply* msg) {
  return *msg->_impl_.dm_sge_;
}
const ::bilibili::community::service::dm::v1::DanmakuFlagConfig&
DmWebViewReply::_Internal::flag(const DmWebViewReply* msg) {
  return *msg->_impl_.flag_;
}
const ::bilibili::community::service::dm::v1::DanmuWebPlayerConfig&
DmWebViewReply::_Internal::player_config(const DmWebViewReply* msg) {
  return *msg->_impl_.player_config_;
}
DmWebViewReply::DmWebViewReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bilibili.community.service.dm.v1.DmWebViewReply)
}
DmWebViewReply::DmWebViewReply(const DmWebViewReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DmWebViewReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.special_dms_){from._impl_.special_dms_}
    , decltype(_impl_.commanddms_){from._impl_.commanddms_}
    , decltype(_impl_.report_filter_content_){from._impl_.report_filter_content_}
    , decltype(_impl_.text_){}
    , decltype(_impl_.text_side_){}
    , decltype(_impl_.dm_sge_){nullptr}
    , decltype(_impl_.flag_){nullptr}
    , decltype(_impl_.player_config_){nullptr}
    , decltype(_impl_.state_){}
    , decltype(_impl_.check_box_){}
    , decltype(_impl_.count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_text().empty()) {
    _this->_impl_.text_.Set(from._internal_text(), 
      _this->GetArenaForAllocation());
  }
  _impl_.text_side_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_side_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_text_side().empty()) {
    _this->_impl_.text_side_.Set(from._internal_text_side(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_dm_sge()) {
    _this->_impl_.dm_sge_ = new ::bilibili::community::service::dm::v1::DmSegConfig(*from._impl_.dm_sge_);
  }
  if (from._internal_has_flag()) {
    _this->_impl_.flag_ = new ::bilibili::community::service::dm::v1::DanmakuFlagConfig(*from._impl_.flag_);
  }
  if (from._internal_has_player_config()) {
    _this->_impl_.player_config_ = new ::bilibili::community::service::dm::v1::DanmuWebPlayerConfig(*from._impl_.player_config_);
  }
  ::memcpy(&_impl_.state_, &from._impl_.state_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.count_) -
    reinterpret_cast<char*>(&_impl_.state_)) + sizeof(_impl_.count_));
  // @@protoc_insertion_point(copy_constructor:bilibili.community.service.dm.v1.DmWebViewReply)
}

inline void DmWebViewReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.special_dms_){arena}
    , decltype(_impl_.commanddms_){arena}
    , decltype(_impl_.report_filter_content_){arena}
    , decltype(_impl_.text_){}
    , decltype(_impl_.text_side_){}
    , decltype(_impl_.dm_sge_){nullptr}
    , decltype(_impl_.flag_){nullptr}
    , decltype(_impl_.player_config_){nullptr}
    , decltype(_impl_.state_){0}
    , decltype(_impl_.check_box_){false}
    , decltype(_impl_.count_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.text_side_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_side_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DmWebViewReply::~DmWebViewReply() {
  // @@protoc_insertion_point(destructor:bilibili.community.service.dm.v1.DmWebViewReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DmWebViewReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.special_dms_.~RepeatedPtrField();
  _impl_.commanddms_.~RepeatedPtrField();
  _impl_.report_filter_content_.~RepeatedPtrField();
  _impl_.text_.Destroy();
  _impl_.text_side_.Destroy();
  if (this != internal_default_instance()) delete _impl_.dm_sge_;
  if (this != internal_default_instance()) delete _impl_.flag_;
  if (this != internal_default_instance()) delete _impl_.player_config_;
}

void DmWebViewReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DmWebViewReply::Clear() {
// @@protoc_insertion_point(message_clear_start:bilibili.community.service.dm.v1.DmWebViewReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.special_dms_.Clear();
  _impl_.commanddms_.Clear();
  _impl_.report_filter_content_.Clear();
  _impl_.text_.ClearToEmpty();
  _impl_.text_side_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.dm_sge_ != nullptr) {
    delete _impl_.dm_sge_;
  }
  _impl_.dm_sge_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.flag_ != nullptr) {
    delete _impl_.flag_;
  }
  _impl_.flag_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.player_config_ != nullptr) {
    delete _impl_.player_config_;
  }
  _impl_.player_config_ = nullptr;
  ::memset(&_impl_.state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.count_) -
      reinterpret_cast<char*>(&_impl_.state_)) + sizeof(_impl_.count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DmWebViewReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string text = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "bilibili.community.service.dm.v1.DmWebViewReply.text"));
        } else
          goto handle_unusual;
        continue;
      // string text_side = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_text_side();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "bilibili.community.service.dm.v1.DmWebViewReply.text_side"));
        } else
          goto handle_unusual;
        continue;
      // .bilibili.community.service.dm.v1.DmSegConfig dm_sge = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_dm_sge(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .bilibili.community.service.dm.v1.DanmakuFlagConfig flag = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_flag(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string special_dms = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_special_dms();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "bilibili.community.service.dm.v1.DmWebViewReply.special_dms"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool check_box = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.check_box_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 count = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .bilibili.community.service.dm.v1.CommandDm commandDms = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_commanddms(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .bilibili.community.service.dm.v1.DanmuWebPlayerConfig player_config = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string report_filter_content = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_report_filter_content();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "bilibili.community.service.dm.v1.DmWebViewReply.report_filter_content"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DmWebViewReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bilibili.community.service.dm.v1.DmWebViewReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 state = 1;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_state(), target);
  }

  // string text = 2;
  if (!this->_internal_text().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bilibili.community.service.dm.v1.DmWebViewReply.text");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_text(), target);
  }

  // string text_side = 3;
  if (!this->_internal_text_side().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text_side().data(), static_cast<int>(this->_internal_text_side().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bilibili.community.service.dm.v1.DmWebViewReply.text_side");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_text_side(), target);
  }

  // .bilibili.community.service.dm.v1.DmSegConfig dm_sge = 4;
  if (this->_internal_has_dm_sge()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::dm_sge(this),
        _Internal::dm_sge(this).GetCachedSize(), target, stream);
  }

  // .bilibili.community.service.dm.v1.DanmakuFlagConfig flag = 5;
  if (this->_internal_has_flag()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::flag(this),
        _Internal::flag(this).GetCachedSize(), target, stream);
  }

  // repeated string special_dms = 6;
  for (int i = 0, n = this->_internal_special_dms_size(); i < n; i++) {
    const auto& s = this->_internal_special_dms(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bilibili.community.service.dm.v1.DmWebViewReply.special_dms");
    target = stream->WriteString(6, s, target);
  }

  // bool check_box = 7;
  if (this->_internal_check_box() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_check_box(), target);
  }

  // int64 count = 8;
  if (this->_internal_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_count(), target);
  }

  // repeated .bilibili.community.service.dm.v1.CommandDm commandDms = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_commanddms_size()); i < n; i++) {
    const auto& repfield = this->_internal_commanddms(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .bilibili.community.service.dm.v1.DanmuWebPlayerConfig player_config = 10;
  if (this->_internal_has_player_config()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::player_config(this),
        _Internal::player_config(this).GetCachedSize(), target, stream);
  }

  // repeated string report_filter_content = 11;
  for (int i = 0, n = this->_internal_report_filter_content_size(); i < n; i++) {
    const auto& s = this->_internal_report_filter_content(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bilibili.community.service.dm.v1.DmWebViewReply.report_filter_content");
    target = stream->WriteString(11, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bilibili.community.service.dm.v1.DmWebViewReply)
  return target;
}

size_t DmWebViewReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bilibili.community.service.dm.v1.DmWebViewReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string special_dms = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.special_dms_.size());
  for (int i = 0, n = _impl_.special_dms_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.special_dms_.Get(i));
  }

  // repeated .bilibili.community.service.dm.v1.CommandDm commandDms = 9;
  total_size += 1UL * this->_internal_commanddms_size();
  for (const auto& msg : this->_impl_.commanddms_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string report_filter_content = 11;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.report_filter_content_.size());
  for (int i = 0, n = _impl_.report_filter_content_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.report_filter_content_.Get(i));
  }

  // string text = 2;
  if (!this->_internal_text().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  // string text_side = 3;
  if (!this->_internal_text_side().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text_side());
  }

  // .bilibili.community.service.dm.v1.DmSegConfig dm_sge = 4;
  if (this->_internal_has_dm_sge()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.dm_sge_);
  }

  // .bilibili.community.service.dm.v1.DanmakuFlagConfig flag = 5;
  if (this->_internal_has_flag()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.flag_);
  }

  // .bilibili.community.service.dm.v1.DanmuWebPlayerConfig player_config = 10;
  if (this->_internal_has_player_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.player_config_);
  }

  // int32 state = 1;
  if (this->_internal_state() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_state());
  }

  // bool check_box = 7;
  if (this->_internal_check_box() != 0) {
    total_size += 1 + 1;
  }

  // int64 count = 8;
  if (this->_internal_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DmWebViewReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DmWebViewReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DmWebViewReply::GetClassData() const { return &_class_data_; }


void DmWebViewReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DmWebViewReply*>(&to_msg);
  auto& from = static_cast<const DmWebViewReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bilibili.community.service.dm.v1.DmWebViewReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.special_dms_.MergeFrom(from._impl_.special_dms_);
  _this->_impl_.commanddms_.MergeFrom(from._impl_.commanddms_);
  _this->_impl_.report_filter_content_.MergeFrom(from._impl_.report_filter_content_);
  if (!from._internal_text().empty()) {
    _this->_internal_set_text(from._internal_text());
  }
  if (!from._internal_text_side().empty()) {
    _this->_internal_set_text_side(from._internal_text_side());
  }
  if (from._internal_has_dm_sge()) {
    _this->_internal_mutable_dm_sge()->::bilibili::community::service::dm::v1::DmSegConfig::MergeFrom(
        from._internal_dm_sge());
  }
  if (from._internal_has_flag()) {
    _this->_internal_mutable_flag()->::bilibili::community::service::dm::v1::DanmakuFlagConfig::MergeFrom(
        from._internal_flag());
  }
  if (from._internal_has_player_config()) {
    _this->_internal_mutable_player_config()->::bilibili::community::service::dm::v1::DanmuWebPlayerConfig::MergeFrom(
        from._internal_player_config());
  }
  if (from._internal_state() != 0) {
    _this->_internal_set_state(from._internal_state());
  }
  if (from._internal_check_box() != 0) {
    _this->_internal_set_check_box(from._internal_check_box());
  }
  if (from._internal_count() != 0) {
    _this->_internal_set_count(from._internal_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DmWebViewReply::CopyFrom(const DmWebViewReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bilibili.community.service.dm.v1.DmWebViewReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DmWebViewReply::IsInitialized() const {
  return true;
}

void DmWebViewReply::InternalSwap(DmWebViewReply* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.special_dms_.InternalSwap(&other->_impl_.special_dms_);
  _impl_.commanddms_.InternalSwap(&other->_impl_.commanddms_);
  _impl_.report_filter_content_.InternalSwap(&other->_impl_.report_filter_content_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.text_, lhs_arena,
      &other->_impl_.text_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.text_side_, lhs_arena,
      &other->_impl_.text_side_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DmWebViewReply, _impl_.count_)
      + sizeof(DmWebViewReply::_impl_.count_)
      - PROTOBUF_FIELD_OFFSET(DmWebViewReply, _impl_.dm_sge_)>(
          reinterpret_cast<char*>(&_impl_.dm_sge_),
          reinterpret_cast<char*>(&other->_impl_.dm_sge_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DmWebViewReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_reply_2eproto_getter, &descriptor_table_reply_2eproto_once,
      file_level_metadata_reply_2eproto[8]);
}

// ===================================================================

class CommandDm::_Internal {
 public:
};

CommandDm::CommandDm(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bilibili.community.service.dm.v1.CommandDm)
}
CommandDm::CommandDm(const CommandDm& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandDm* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.mid_){}
    , decltype(_impl_.command_){}
    , decltype(_impl_.content_){}
    , decltype(_impl_.ctime_){}
    , decltype(_impl_.mtime_){}
    , decltype(_impl_.extra_){}
    , decltype(_impl_.idstr_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.oid_){}
    , decltype(_impl_.progress_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.mid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mid().empty()) {
    _this->_impl_.mid_.Set(from._internal_mid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.command_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.command_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_command().empty()) {
    _this->_impl_.command_.Set(from._internal_command(), 
      _this->GetArenaForAllocation());
  }
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content().empty()) {
    _this->_impl_.content_.Set(from._internal_content(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ctime_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ctime_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ctime().empty()) {
    _this->_impl_.ctime_.Set(from._internal_ctime(), 
      _this->GetArenaForAllocation());
  }
  _impl_.mtime_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mtime_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mtime().empty()) {
    _this->_impl_.mtime_.Set(from._internal_mtime(), 
      _this->GetArenaForAllocation());
  }
  _impl_.extra_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.extra_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_extra().empty()) {
    _this->_impl_.extra_.Set(from._internal_extra(), 
      _this->GetArenaForAllocation());
  }
  _impl_.idstr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.idstr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_idstr().empty()) {
    _this->_impl_.idstr_.Set(from._internal_idstr(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.progress_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.progress_));
  // @@protoc_insertion_point(copy_constructor:bilibili.community.service.dm.v1.CommandDm)
}

inline void CommandDm::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.mid_){}
    , decltype(_impl_.command_){}
    , decltype(_impl_.content_){}
    , decltype(_impl_.ctime_){}
    , decltype(_impl_.mtime_){}
    , decltype(_impl_.extra_){}
    , decltype(_impl_.idstr_){}
    , decltype(_impl_.id_){int64_t{0}}
    , decltype(_impl_.oid_){int64_t{0}}
    , decltype(_impl_.progress_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.mid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.command_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.command_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ctime_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ctime_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mtime_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mtime_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.extra_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.extra_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.idstr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.idstr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CommandDm::~CommandDm() {
  // @@protoc_insertion_point(destructor:bilibili.community.service.dm.v1.CommandDm)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandDm::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.mid_.Destroy();
  _impl_.command_.Destroy();
  _impl_.content_.Destroy();
  _impl_.ctime_.Destroy();
  _impl_.mtime_.Destroy();
  _impl_.extra_.Destroy();
  _impl_.idstr_.Destroy();
}

void CommandDm::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandDm::Clear() {
// @@protoc_insertion_point(message_clear_start:bilibili.community.service.dm.v1.CommandDm)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mid_.ClearToEmpty();
  _impl_.command_.ClearToEmpty();
  _impl_.content_.ClearToEmpty();
  _impl_.ctime_.ClearToEmpty();
  _impl_.mtime_.ClearToEmpty();
  _impl_.extra_.ClearToEmpty();
  _impl_.idstr_.ClearToEmpty();
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.progress_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.progress_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandDm::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 oid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.oid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string mid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_mid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "bilibili.community.service.dm.v1.CommandDm.mid"));
        } else
          goto handle_unusual;
        continue;
      // string command = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_command();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "bilibili.community.service.dm.v1.CommandDm.command"));
        } else
          goto handle_unusual;
        continue;
      // string content = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_content();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "bilibili.community.service.dm.v1.CommandDm.content"));
        } else
          goto handle_unusual;
        continue;
      // int32 progress = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.progress_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string ctime = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_ctime();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "bilibili.community.service.dm.v1.CommandDm.ctime"));
        } else
          goto handle_unusual;
        continue;
      // string mtime = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_mtime();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "bilibili.community.service.dm.v1.CommandDm.mtime"));
        } else
          goto handle_unusual;
        continue;
      // string extra = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_extra();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "bilibili.community.service.dm.v1.CommandDm.extra"));
        } else
          goto handle_unusual;
        continue;
      // string idStr = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_idstr();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "bilibili.community.service.dm.v1.CommandDm.idStr"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandDm::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bilibili.community.service.dm.v1.CommandDm)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  // int64 oid = 2;
  if (this->_internal_oid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_oid(), target);
  }

  // string mid = 3;
  if (!this->_internal_mid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mid().data(), static_cast<int>(this->_internal_mid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bilibili.community.service.dm.v1.CommandDm.mid");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_mid(), target);
  }

  // string command = 4;
  if (!this->_internal_command().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_command().data(), static_cast<int>(this->_internal_command().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bilibili.community.service.dm.v1.CommandDm.command");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_command(), target);
  }

  // string content = 5;
  if (!this->_internal_content().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bilibili.community.service.dm.v1.CommandDm.content");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_content(), target);
  }

  // int32 progress = 6;
  if (this->_internal_progress() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_progress(), target);
  }

  // string ctime = 7;
  if (!this->_internal_ctime().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ctime().data(), static_cast<int>(this->_internal_ctime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bilibili.community.service.dm.v1.CommandDm.ctime");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_ctime(), target);
  }

  // string mtime = 8;
  if (!this->_internal_mtime().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mtime().data(), static_cast<int>(this->_internal_mtime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bilibili.community.service.dm.v1.CommandDm.mtime");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_mtime(), target);
  }

  // string extra = 9;
  if (!this->_internal_extra().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_extra().data(), static_cast<int>(this->_internal_extra().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bilibili.community.service.dm.v1.CommandDm.extra");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_extra(), target);
  }

  // string idStr = 10;
  if (!this->_internal_idstr().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_idstr().data(), static_cast<int>(this->_internal_idstr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bilibili.community.service.dm.v1.CommandDm.idStr");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_idstr(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bilibili.community.service.dm.v1.CommandDm)
  return target;
}

size_t CommandDm::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bilibili.community.service.dm.v1.CommandDm)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string mid = 3;
  if (!this->_internal_mid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mid());
  }

  // string command = 4;
  if (!this->_internal_command().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_command());
  }

  // string content = 5;
  if (!this->_internal_content().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  // string ctime = 7;
  if (!this->_internal_ctime().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ctime());
  }

  // string mtime = 8;
  if (!this->_internal_mtime().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mtime());
  }

  // string extra = 9;
  if (!this->_internal_extra().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_extra());
  }

  // string idStr = 10;
  if (!this->_internal_idstr().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_idstr());
  }

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_id());
  }

  // int64 oid = 2;
  if (this->_internal_oid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_oid());
  }

  // int32 progress = 6;
  if (this->_internal_progress() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_progress());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandDm::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandDm::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandDm::GetClassData() const { return &_class_data_; }


void CommandDm::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandDm*>(&to_msg);
  auto& from = static_cast<const CommandDm&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bilibili.community.service.dm.v1.CommandDm)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_mid().empty()) {
    _this->_internal_set_mid(from._internal_mid());
  }
  if (!from._internal_command().empty()) {
    _this->_internal_set_command(from._internal_command());
  }
  if (!from._internal_content().empty()) {
    _this->_internal_set_content(from._internal_content());
  }
  if (!from._internal_ctime().empty()) {
    _this->_internal_set_ctime(from._internal_ctime());
  }
  if (!from._internal_mtime().empty()) {
    _this->_internal_set_mtime(from._internal_mtime());
  }
  if (!from._internal_extra().empty()) {
    _this->_internal_set_extra(from._internal_extra());
  }
  if (!from._internal_idstr().empty()) {
    _this->_internal_set_idstr(from._internal_idstr());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_oid() != 0) {
    _this->_internal_set_oid(from._internal_oid());
  }
  if (from._internal_progress() != 0) {
    _this->_internal_set_progress(from._internal_progress());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandDm::CopyFrom(const CommandDm& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bilibili.community.service.dm.v1.CommandDm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandDm::IsInitialized() const {
  return true;
}

void CommandDm::InternalSwap(CommandDm* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mid_, lhs_arena,
      &other->_impl_.mid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.command_, lhs_arena,
      &other->_impl_.command_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.content_, lhs_arena,
      &other->_impl_.content_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ctime_, lhs_arena,
      &other->_impl_.ctime_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mtime_, lhs_arena,
      &other->_impl_.mtime_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.extra_, lhs_arena,
      &other->_impl_.extra_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.idstr_, lhs_arena,
      &other->_impl_.idstr_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandDm, _impl_.progress_)
      + sizeof(CommandDm::_impl_.progress_)
      - PROTOBUF_FIELD_OFFSET(CommandDm, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandDm::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_reply_2eproto_getter, &descriptor_table_reply_2eproto_once,
      file_level_metadata_reply_2eproto[9]);
}

// ===================================================================

class DmSegConfig::_Internal {
 public:
};

DmSegConfig::DmSegConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bilibili.community.service.dm.v1.DmSegConfig)
}
DmSegConfig::DmSegConfig(const DmSegConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DmSegConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.page_size_){}
    , decltype(_impl_.total_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.page_size_, &from._impl_.page_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.total_) -
    reinterpret_cast<char*>(&_impl_.page_size_)) + sizeof(_impl_.total_));
  // @@protoc_insertion_point(copy_constructor:bilibili.community.service.dm.v1.DmSegConfig)
}

inline void DmSegConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.page_size_){int64_t{0}}
    , decltype(_impl_.total_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DmSegConfig::~DmSegConfig() {
  // @@protoc_insertion_point(destructor:bilibili.community.service.dm.v1.DmSegConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DmSegConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DmSegConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DmSegConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:bilibili.community.service.dm.v1.DmSegConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.page_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.total_) -
      reinterpret_cast<char*>(&_impl_.page_size_)) + sizeof(_impl_.total_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DmSegConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 page_size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.page_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 total = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DmSegConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bilibili.community.service.dm.v1.DmSegConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 page_size = 1;
  if (this->_internal_page_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_page_size(), target);
  }

  // int64 total = 2;
  if (this->_internal_total() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_total(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bilibili.community.service.dm.v1.DmSegConfig)
  return target;
}

size_t DmSegConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bilibili.community.service.dm.v1.DmSegConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 page_size = 1;
  if (this->_internal_page_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_page_size());
  }

  // int64 total = 2;
  if (this->_internal_total() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_total());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DmSegConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DmSegConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DmSegConfig::GetClassData() const { return &_class_data_; }


void DmSegConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DmSegConfig*>(&to_msg);
  auto& from = static_cast<const DmSegConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bilibili.community.service.dm.v1.DmSegConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_page_size() != 0) {
    _this->_internal_set_page_size(from._internal_page_size());
  }
  if (from._internal_total() != 0) {
    _this->_internal_set_total(from._internal_total());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DmSegConfig::CopyFrom(const DmSegConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bilibili.community.service.dm.v1.DmSegConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DmSegConfig::IsInitialized() const {
  return true;
}

void DmSegConfig::InternalSwap(DmSegConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DmSegConfig, _impl_.total_)
      + sizeof(DmSegConfig::_impl_.total_)
      - PROTOBUF_FIELD_OFFSET(DmSegConfig, _impl_.page_size_)>(
          reinterpret_cast<char*>(&_impl_.page_size_),
          reinterpret_cast<char*>(&other->_impl_.page_size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DmSegConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_reply_2eproto_getter, &descriptor_table_reply_2eproto_once,
      file_level_metadata_reply_2eproto[10]);
}

// ===================================================================

class VideoMask::_Internal {
 public:
};

VideoMask::VideoMask(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bilibili.community.service.dm.v1.VideoMask)
}
VideoMask::VideoMask(const VideoMask& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VideoMask* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.mask_url_){}
    , decltype(_impl_.cid_){}
    , decltype(_impl_.plat_){}
    , decltype(_impl_.fps_){}
    , decltype(_impl_.time_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.mask_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mask_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mask_url().empty()) {
    _this->_impl_.mask_url_.Set(from._internal_mask_url(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.cid_, &from._impl_.cid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.time_) -
    reinterpret_cast<char*>(&_impl_.cid_)) + sizeof(_impl_.time_));
  // @@protoc_insertion_point(copy_constructor:bilibili.community.service.dm.v1.VideoMask)
}

inline void VideoMask::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.mask_url_){}
    , decltype(_impl_.cid_){int64_t{0}}
    , decltype(_impl_.plat_){0}
    , decltype(_impl_.fps_){0}
    , decltype(_impl_.time_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.mask_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mask_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

VideoMask::~VideoMask() {
  // @@protoc_insertion_point(destructor:bilibili.community.service.dm.v1.VideoMask)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VideoMask::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.mask_url_.Destroy();
}

void VideoMask::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VideoMask::Clear() {
// @@protoc_insertion_point(message_clear_start:bilibili.community.service.dm.v1.VideoMask)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mask_url_.ClearToEmpty();
  ::memset(&_impl_.cid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.time_) -
      reinterpret_cast<char*>(&_impl_.cid_)) + sizeof(_impl_.time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VideoMask::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 cid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.cid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 plat = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.plat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 fps = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.fps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string mask_url = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_mask_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "bilibili.community.service.dm.v1.VideoMask.mask_url"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VideoMask::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bilibili.community.service.dm.v1.VideoMask)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 cid = 1;
  if (this->_internal_cid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_cid(), target);
  }

  // int32 plat = 2;
  if (this->_internal_plat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_plat(), target);
  }

  // int32 fps = 3;
  if (this->_internal_fps() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_fps(), target);
  }

  // int64 time = 4;
  if (this->_internal_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_time(), target);
  }

  // string mask_url = 5;
  if (!this->_internal_mask_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mask_url().data(), static_cast<int>(this->_internal_mask_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bilibili.community.service.dm.v1.VideoMask.mask_url");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_mask_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bilibili.community.service.dm.v1.VideoMask)
  return target;
}

size_t VideoMask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bilibili.community.service.dm.v1.VideoMask)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string mask_url = 5;
  if (!this->_internal_mask_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mask_url());
  }

  // int64 cid = 1;
  if (this->_internal_cid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_cid());
  }

  // int32 plat = 2;
  if (this->_internal_plat() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_plat());
  }

  // int32 fps = 3;
  if (this->_internal_fps() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_fps());
  }

  // int64 time = 4;
  if (this->_internal_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_time());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VideoMask::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VideoMask::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VideoMask::GetClassData() const { return &_class_data_; }


void VideoMask::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VideoMask*>(&to_msg);
  auto& from = static_cast<const VideoMask&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bilibili.community.service.dm.v1.VideoMask)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_mask_url().empty()) {
    _this->_internal_set_mask_url(from._internal_mask_url());
  }
  if (from._internal_cid() != 0) {
    _this->_internal_set_cid(from._internal_cid());
  }
  if (from._internal_plat() != 0) {
    _this->_internal_set_plat(from._internal_plat());
  }
  if (from._internal_fps() != 0) {
    _this->_internal_set_fps(from._internal_fps());
  }
  if (from._internal_time() != 0) {
    _this->_internal_set_time(from._internal_time());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VideoMask::CopyFrom(const VideoMask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bilibili.community.service.dm.v1.VideoMask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoMask::IsInitialized() const {
  return true;
}

void VideoMask::InternalSwap(VideoMask* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mask_url_, lhs_arena,
      &other->_impl_.mask_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VideoMask, _impl_.time_)
      + sizeof(VideoMask::_impl_.time_)
      - PROTOBUF_FIELD_OFFSET(VideoMask, _impl_.cid_)>(
          reinterpret_cast<char*>(&_impl_.cid_),
          reinterpret_cast<char*>(&other->_impl_.cid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VideoMask::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_reply_2eproto_getter, &descriptor_table_reply_2eproto_once,
      file_level_metadata_reply_2eproto[11]);
}

// ===================================================================

class VideoSubtitle::_Internal {
 public:
};

VideoSubtitle::VideoSubtitle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bilibili.community.service.dm.v1.VideoSubtitle)
}
VideoSubtitle::VideoSubtitle(const VideoSubtitle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VideoSubtitle* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.subtitles_){from._impl_.subtitles_}
    , decltype(_impl_.lan_){}
    , decltype(_impl_.landoc_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.lan_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lan_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_lan().empty()) {
    _this->_impl_.lan_.Set(from._internal_lan(), 
      _this->GetArenaForAllocation());
  }
  _impl_.landoc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.landoc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_landoc().empty()) {
    _this->_impl_.landoc_.Set(from._internal_landoc(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:bilibili.community.service.dm.v1.VideoSubtitle)
}

inline void VideoSubtitle::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.subtitles_){arena}
    , decltype(_impl_.lan_){}
    , decltype(_impl_.landoc_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.lan_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lan_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.landoc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.landoc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

VideoSubtitle::~VideoSubtitle() {
  // @@protoc_insertion_point(destructor:bilibili.community.service.dm.v1.VideoSubtitle)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VideoSubtitle::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.subtitles_.~RepeatedPtrField();
  _impl_.lan_.Destroy();
  _impl_.landoc_.Destroy();
}

void VideoSubtitle::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VideoSubtitle::Clear() {
// @@protoc_insertion_point(message_clear_start:bilibili.community.service.dm.v1.VideoSubtitle)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.subtitles_.Clear();
  _impl_.lan_.ClearToEmpty();
  _impl_.landoc_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VideoSubtitle::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string lan = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_lan();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "bilibili.community.service.dm.v1.VideoSubtitle.lan"));
        } else
          goto handle_unusual;
        continue;
      // string lanDoc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_landoc();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "bilibili.community.service.dm.v1.VideoSubtitle.lanDoc"));
        } else
          goto handle_unusual;
        continue;
      // repeated .bilibili.community.service.dm.v1.SubtitleItem subtitles = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_subtitles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VideoSubtitle::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bilibili.community.service.dm.v1.VideoSubtitle)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string lan = 1;
  if (!this->_internal_lan().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lan().data(), static_cast<int>(this->_internal_lan().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bilibili.community.service.dm.v1.VideoSubtitle.lan");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_lan(), target);
  }

  // string lanDoc = 2;
  if (!this->_internal_landoc().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_landoc().data(), static_cast<int>(this->_internal_landoc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bilibili.community.service.dm.v1.VideoSubtitle.lanDoc");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_landoc(), target);
  }

  // repeated .bilibili.community.service.dm.v1.SubtitleItem subtitles = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_subtitles_size()); i < n; i++) {
    const auto& repfield = this->_internal_subtitles(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bilibili.community.service.dm.v1.VideoSubtitle)
  return target;
}

size_t VideoSubtitle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bilibili.community.service.dm.v1.VideoSubtitle)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bilibili.community.service.dm.v1.SubtitleItem subtitles = 3;
  total_size += 1UL * this->_internal_subtitles_size();
  for (const auto& msg : this->_impl_.subtitles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string lan = 1;
  if (!this->_internal_lan().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lan());
  }

  // string lanDoc = 2;
  if (!this->_internal_landoc().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_landoc());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VideoSubtitle::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VideoSubtitle::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VideoSubtitle::GetClassData() const { return &_class_data_; }


void VideoSubtitle::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VideoSubtitle*>(&to_msg);
  auto& from = static_cast<const VideoSubtitle&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bilibili.community.service.dm.v1.VideoSubtitle)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.subtitles_.MergeFrom(from._impl_.subtitles_);
  if (!from._internal_lan().empty()) {
    _this->_internal_set_lan(from._internal_lan());
  }
  if (!from._internal_landoc().empty()) {
    _this->_internal_set_landoc(from._internal_landoc());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VideoSubtitle::CopyFrom(const VideoSubtitle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bilibili.community.service.dm.v1.VideoSubtitle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoSubtitle::IsInitialized() const {
  return true;
}

void VideoSubtitle::InternalSwap(VideoSubtitle* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.subtitles_.InternalSwap(&other->_impl_.subtitles_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.lan_, lhs_arena,
      &other->_impl_.lan_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.landoc_, lhs_arena,
      &other->_impl_.landoc_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata VideoSubtitle::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_reply_2eproto_getter, &descriptor_table_reply_2eproto_once,
      file_level_metadata_reply_2eproto[12]);
}

// ===================================================================

class DanmuWebPlayerConfig::_Internal {
 public:
};

DanmuWebPlayerConfig::DanmuWebPlayerConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bilibili.community.service.dm.v1.DanmuWebPlayerConfig)
}
DanmuWebPlayerConfig::DanmuWebPlayerConfig(const DanmuWebPlayerConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DanmuWebPlayerConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.fontfamily_){}
    , decltype(_impl_.draw_type_){}
    , decltype(_impl_.ai_level_){}
    , decltype(_impl_.dm_switch_){}
    , decltype(_impl_.ai_switch_){}
    , decltype(_impl_.blocktop_){}
    , decltype(_impl_.blockscroll_){}
    , decltype(_impl_.blockbottom_){}
    , decltype(_impl_.blockcolor_){}
    , decltype(_impl_.blockspecial_){}
    , decltype(_impl_.preventshade_){}
    , decltype(_impl_.opacity_){}
    , decltype(_impl_.dmarea_){}
    , decltype(_impl_.speedplus_){}
    , decltype(_impl_.fontsize_){}
    , decltype(_impl_.dmask_){}
    , decltype(_impl_.screensync_){}
    , decltype(_impl_.speedsync_){}
    , decltype(_impl_.bold_){}
    , decltype(_impl_.fontborder_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.fontfamily_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fontfamily_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_fontfamily().empty()) {
    _this->_impl_.fontfamily_.Set(from._internal_fontfamily(), 
      _this->GetArenaForAllocation());
  }
  _impl_.draw_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.draw_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_draw_type().empty()) {
    _this->_impl_.draw_type_.Set(from._internal_draw_type(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.ai_level_, &from._impl_.ai_level_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.fontborder_) -
    reinterpret_cast<char*>(&_impl_.ai_level_)) + sizeof(_impl_.fontborder_));
  // @@protoc_insertion_point(copy_constructor:bilibili.community.service.dm.v1.DanmuWebPlayerConfig)
}

inline void DanmuWebPlayerConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.fontfamily_){}
    , decltype(_impl_.draw_type_){}
    , decltype(_impl_.ai_level_){0}
    , decltype(_impl_.dm_switch_){false}
    , decltype(_impl_.ai_switch_){false}
    , decltype(_impl_.blocktop_){false}
    , decltype(_impl_.blockscroll_){false}
    , decltype(_impl_.blockbottom_){false}
    , decltype(_impl_.blockcolor_){false}
    , decltype(_impl_.blockspecial_){false}
    , decltype(_impl_.preventshade_){false}
    , decltype(_impl_.opacity_){0}
    , decltype(_impl_.dmarea_){0}
    , decltype(_impl_.speedplus_){0}
    , decltype(_impl_.fontsize_){0}
    , decltype(_impl_.dmask_){false}
    , decltype(_impl_.screensync_){false}
    , decltype(_impl_.speedsync_){false}
    , decltype(_impl_.bold_){false}
    , decltype(_impl_.fontborder_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.fontfamily_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fontfamily_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.draw_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.draw_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DanmuWebPlayerConfig::~DanmuWebPlayerConfig() {
  // @@protoc_insertion_point(destructor:bilibili.community.service.dm.v1.DanmuWebPlayerConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DanmuWebPlayerConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.fontfamily_.Destroy();
  _impl_.draw_type_.Destroy();
}

void DanmuWebPlayerConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DanmuWebPlayerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:bilibili.community.service.dm.v1.DanmuWebPlayerConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.fontfamily_.ClearToEmpty();
  _impl_.draw_type_.ClearToEmpty();
  ::memset(&_impl_.ai_level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.fontborder_) -
      reinterpret_cast<char*>(&_impl_.ai_level_)) + sizeof(_impl_.fontborder_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DanmuWebPlayerConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool dm_switch = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.dm_switch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool ai_switch = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.ai_switch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ai_level = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.ai_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool blocktop = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.blocktop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool blockscroll = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.blockscroll_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool blockbottom = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.blockbottom_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool blockcolor = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.blockcolor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool blockspecial = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.blockspecial_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool preventshade = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.preventshade_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool dmask = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.dmask_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float opacity = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 93)) {
          _impl_.opacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // int32 dmarea = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.dmarea_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float speedplus = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 109)) {
          _impl_.speedplus_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float fontsize = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 117)) {
          _impl_.fontsize_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // bool screensync = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.screensync_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool speedsync = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.speedsync_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string fontfamily = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          auto str = _internal_mutable_fontfamily();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "bilibili.community.service.dm.v1.DanmuWebPlayerConfig.fontfamily"));
        } else
          goto handle_unusual;
        continue;
      // bool bold = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _impl_.bold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 fontborder = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _impl_.fontborder_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string draw_type = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_draw_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "bilibili.community.service.dm.v1.DanmuWebPlayerConfig.draw_type"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DanmuWebPlayerConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bilibili.community.service.dm.v1.DanmuWebPlayerConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool dm_switch = 1;
  if (this->_internal_dm_switch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_dm_switch(), target);
  }

  // bool ai_switch = 2;
  if (this->_internal_ai_switch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_ai_switch(), target);
  }

  // int32 ai_level = 3;
  if (this->_internal_ai_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_ai_level(), target);
  }

  // bool blocktop = 4;
  if (this->_internal_blocktop() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_blocktop(), target);
  }

  // bool blockscroll = 5;
  if (this->_internal_blockscroll() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_blockscroll(), target);
  }

  // bool blockbottom = 6;
  if (this->_internal_blockbottom() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_blockbottom(), target);
  }

  // bool blockcolor = 7;
  if (this->_internal_blockcolor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_blockcolor(), target);
  }

  // bool blockspecial = 8;
  if (this->_internal_blockspecial() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_blockspecial(), target);
  }

  // bool preventshade = 9;
  if (this->_internal_preventshade() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_preventshade(), target);
  }

  // bool dmask = 10;
  if (this->_internal_dmask() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_dmask(), target);
  }

  // float opacity = 11;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_opacity = this->_internal_opacity();
  uint32_t raw_opacity;
  memcpy(&raw_opacity, &tmp_opacity, sizeof(tmp_opacity));
  if (raw_opacity != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(11, this->_internal_opacity(), target);
  }

  // int32 dmarea = 12;
  if (this->_internal_dmarea() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(12, this->_internal_dmarea(), target);
  }

  // float speedplus = 13;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_speedplus = this->_internal_speedplus();
  uint32_t raw_speedplus;
  memcpy(&raw_speedplus, &tmp_speedplus, sizeof(tmp_speedplus));
  if (raw_speedplus != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(13, this->_internal_speedplus(), target);
  }

  // float fontsize = 14;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_fontsize = this->_internal_fontsize();
  uint32_t raw_fontsize;
  memcpy(&raw_fontsize, &tmp_fontsize, sizeof(tmp_fontsize));
  if (raw_fontsize != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(14, this->_internal_fontsize(), target);
  }

  // bool screensync = 15;
  if (this->_internal_screensync() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(15, this->_internal_screensync(), target);
  }

  // bool speedsync = 16;
  if (this->_internal_speedsync() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(16, this->_internal_speedsync(), target);
  }

  // string fontfamily = 17;
  if (!this->_internal_fontfamily().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fontfamily().data(), static_cast<int>(this->_internal_fontfamily().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bilibili.community.service.dm.v1.DanmuWebPlayerConfig.fontfamily");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_fontfamily(), target);
  }

  // bool bold = 18;
  if (this->_internal_bold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(18, this->_internal_bold(), target);
  }

  // int32 fontborder = 19;
  if (this->_internal_fontborder() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(19, this->_internal_fontborder(), target);
  }

  // string draw_type = 20;
  if (!this->_internal_draw_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_draw_type().data(), static_cast<int>(this->_internal_draw_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bilibili.community.service.dm.v1.DanmuWebPlayerConfig.draw_type");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_draw_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bilibili.community.service.dm.v1.DanmuWebPlayerConfig)
  return target;
}

size_t DanmuWebPlayerConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bilibili.community.service.dm.v1.DanmuWebPlayerConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string fontfamily = 17;
  if (!this->_internal_fontfamily().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fontfamily());
  }

  // string draw_type = 20;
  if (!this->_internal_draw_type().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_draw_type());
  }

  // int32 ai_level = 3;
  if (this->_internal_ai_level() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ai_level());
  }

  // bool dm_switch = 1;
  if (this->_internal_dm_switch() != 0) {
    total_size += 1 + 1;
  }

  // bool ai_switch = 2;
  if (this->_internal_ai_switch() != 0) {
    total_size += 1 + 1;
  }

  // bool blocktop = 4;
  if (this->_internal_blocktop() != 0) {
    total_size += 1 + 1;
  }

  // bool blockscroll = 5;
  if (this->_internal_blockscroll() != 0) {
    total_size += 1 + 1;
  }

  // bool blockbottom = 6;
  if (this->_internal_blockbottom() != 0) {
    total_size += 1 + 1;
  }

  // bool blockcolor = 7;
  if (this->_internal_blockcolor() != 0) {
    total_size += 1 + 1;
  }

  // bool blockspecial = 8;
  if (this->_internal_blockspecial() != 0) {
    total_size += 1 + 1;
  }

  // bool preventshade = 9;
  if (this->_internal_preventshade() != 0) {
    total_size += 1 + 1;
  }

  // float opacity = 11;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_opacity = this->_internal_opacity();
  uint32_t raw_opacity;
  memcpy(&raw_opacity, &tmp_opacity, sizeof(tmp_opacity));
  if (raw_opacity != 0) {
    total_size += 1 + 4;
  }

  // int32 dmarea = 12;
  if (this->_internal_dmarea() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_dmarea());
  }

  // float speedplus = 13;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_speedplus = this->_internal_speedplus();
  uint32_t raw_speedplus;
  memcpy(&raw_speedplus, &tmp_speedplus, sizeof(tmp_speedplus));
  if (raw_speedplus != 0) {
    total_size += 1 + 4;
  }

  // float fontsize = 14;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_fontsize = this->_internal_fontsize();
  uint32_t raw_fontsize;
  memcpy(&raw_fontsize, &tmp_fontsize, sizeof(tmp_fontsize));
  if (raw_fontsize != 0) {
    total_size += 1 + 4;
  }

  // bool dmask = 10;
  if (this->_internal_dmask() != 0) {
    total_size += 1 + 1;
  }

  // bool screensync = 15;
  if (this->_internal_screensync() != 0) {
    total_size += 1 + 1;
  }

  // bool speedsync = 16;
  if (this->_internal_speedsync() != 0) {
    total_size += 2 + 1;
  }

  // bool bold = 18;
  if (this->_internal_bold() != 0) {
    total_size += 2 + 1;
  }

  // int32 fontborder = 19;
  if (this->_internal_fontborder() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_fontborder());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DanmuWebPlayerConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DanmuWebPlayerConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DanmuWebPlayerConfig::GetClassData() const { return &_class_data_; }


void DanmuWebPlayerConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DanmuWebPlayerConfig*>(&to_msg);
  auto& from = static_cast<const DanmuWebPlayerConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bilibili.community.service.dm.v1.DanmuWebPlayerConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_fontfamily().empty()) {
    _this->_internal_set_fontfamily(from._internal_fontfamily());
  }
  if (!from._internal_draw_type().empty()) {
    _this->_internal_set_draw_type(from._internal_draw_type());
  }
  if (from._internal_ai_level() != 0) {
    _this->_internal_set_ai_level(from._internal_ai_level());
  }
  if (from._internal_dm_switch() != 0) {
    _this->_internal_set_dm_switch(from._internal_dm_switch());
  }
  if (from._internal_ai_switch() != 0) {
    _this->_internal_set_ai_switch(from._internal_ai_switch());
  }
  if (from._internal_blocktop() != 0) {
    _this->_internal_set_blocktop(from._internal_blocktop());
  }
  if (from._internal_blockscroll() != 0) {
    _this->_internal_set_blockscroll(from._internal_blockscroll());
  }
  if (from._internal_blockbottom() != 0) {
    _this->_internal_set_blockbottom(from._internal_blockbottom());
  }
  if (from._internal_blockcolor() != 0) {
    _this->_internal_set_blockcolor(from._internal_blockcolor());
  }
  if (from._internal_blockspecial() != 0) {
    _this->_internal_set_blockspecial(from._internal_blockspecial());
  }
  if (from._internal_preventshade() != 0) {
    _this->_internal_set_preventshade(from._internal_preventshade());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_opacity = from._internal_opacity();
  uint32_t raw_opacity;
  memcpy(&raw_opacity, &tmp_opacity, sizeof(tmp_opacity));
  if (raw_opacity != 0) {
    _this->_internal_set_opacity(from._internal_opacity());
  }
  if (from._internal_dmarea() != 0) {
    _this->_internal_set_dmarea(from._internal_dmarea());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_speedplus = from._internal_speedplus();
  uint32_t raw_speedplus;
  memcpy(&raw_speedplus, &tmp_speedplus, sizeof(tmp_speedplus));
  if (raw_speedplus != 0) {
    _this->_internal_set_speedplus(from._internal_speedplus());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_fontsize = from._internal_fontsize();
  uint32_t raw_fontsize;
  memcpy(&raw_fontsize, &tmp_fontsize, sizeof(tmp_fontsize));
  if (raw_fontsize != 0) {
    _this->_internal_set_fontsize(from._internal_fontsize());
  }
  if (from._internal_dmask() != 0) {
    _this->_internal_set_dmask(from._internal_dmask());
  }
  if (from._internal_screensync() != 0) {
    _this->_internal_set_screensync(from._internal_screensync());
  }
  if (from._internal_speedsync() != 0) {
    _this->_internal_set_speedsync(from._internal_speedsync());
  }
  if (from._internal_bold() != 0) {
    _this->_internal_set_bold(from._internal_bold());
  }
  if (from._internal_fontborder() != 0) {
    _this->_internal_set_fontborder(from._internal_fontborder());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DanmuWebPlayerConfig::CopyFrom(const DanmuWebPlayerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bilibili.community.service.dm.v1.DanmuWebPlayerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DanmuWebPlayerConfig::IsInitialized() const {
  return true;
}

void DanmuWebPlayerConfig::InternalSwap(DanmuWebPlayerConfig* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.fontfamily_, lhs_arena,
      &other->_impl_.fontfamily_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.draw_type_, lhs_arena,
      &other->_impl_.draw_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DanmuWebPlayerConfig, _impl_.fontborder_)
      + sizeof(DanmuWebPlayerConfig::_impl_.fontborder_)
      - PROTOBUF_FIELD_OFFSET(DanmuWebPlayerConfig, _impl_.ai_level_)>(
          reinterpret_cast<char*>(&_impl_.ai_level_),
          reinterpret_cast<char*>(&other->_impl_.ai_level_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DanmuWebPlayerConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_reply_2eproto_getter, &descriptor_table_reply_2eproto_once,
      file_level_metadata_reply_2eproto[13]);
}

// ===================================================================

class SubtitleItem::_Internal {
 public:
  static const ::bilibili::community::service::dm::v1::UserInfo& author(const SubtitleItem* msg);
};

const ::bilibili::community::service::dm::v1::UserInfo&
SubtitleItem::_Internal::author(const SubtitleItem* msg) {
  return *msg->_impl_.author_;
}
SubtitleItem::SubtitleItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bilibili.community.service.dm.v1.SubtitleItem)
}
SubtitleItem::SubtitleItem(const SubtitleItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SubtitleItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_str_){}
    , decltype(_impl_.lan_){}
    , decltype(_impl_.lan_doc_){}
    , decltype(_impl_.subtitle_url_){}
    , decltype(_impl_.author_){nullptr}
    , decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_str_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_str_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id_str().empty()) {
    _this->_impl_.id_str_.Set(from._internal_id_str(), 
      _this->GetArenaForAllocation());
  }
  _impl_.lan_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lan_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_lan().empty()) {
    _this->_impl_.lan_.Set(from._internal_lan(), 
      _this->GetArenaForAllocation());
  }
  _impl_.lan_doc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lan_doc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_lan_doc().empty()) {
    _this->_impl_.lan_doc_.Set(from._internal_lan_doc(), 
      _this->GetArenaForAllocation());
  }
  _impl_.subtitle_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subtitle_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_subtitle_url().empty()) {
    _this->_impl_.subtitle_url_.Set(from._internal_subtitle_url(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_author()) {
    _this->_impl_.author_ = new ::bilibili::community::service::dm::v1::UserInfo(*from._impl_.author_);
  }
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:bilibili.community.service.dm.v1.SubtitleItem)
}

inline void SubtitleItem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_str_){}
    , decltype(_impl_.lan_){}
    , decltype(_impl_.lan_doc_){}
    , decltype(_impl_.subtitle_url_){}
    , decltype(_impl_.author_){nullptr}
    , decltype(_impl_.id_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_str_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_str_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.lan_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lan_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.lan_doc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lan_doc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.subtitle_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subtitle_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SubtitleItem::~SubtitleItem() {
  // @@protoc_insertion_point(destructor:bilibili.community.service.dm.v1.SubtitleItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SubtitleItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_str_.Destroy();
  _impl_.lan_.Destroy();
  _impl_.lan_doc_.Destroy();
  _impl_.subtitle_url_.Destroy();
  if (this != internal_default_instance()) delete _impl_.author_;
}

void SubtitleItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SubtitleItem::Clear() {
// @@protoc_insertion_point(message_clear_start:bilibili.community.service.dm.v1.SubtitleItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_str_.ClearToEmpty();
  _impl_.lan_.ClearToEmpty();
  _impl_.lan_doc_.ClearToEmpty();
  _impl_.subtitle_url_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.author_ != nullptr) {
    delete _impl_.author_;
  }
  _impl_.author_ = nullptr;
  _impl_.id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubtitleItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string id_str = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_id_str();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "bilibili.community.service.dm.v1.SubtitleItem.id_str"));
        } else
          goto handle_unusual;
        continue;
      // string lan = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_lan();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "bilibili.community.service.dm.v1.SubtitleItem.lan"));
        } else
          goto handle_unusual;
        continue;
      // string lan_doc = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_lan_doc();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "bilibili.community.service.dm.v1.SubtitleItem.lan_doc"));
        } else
          goto handle_unusual;
        continue;
      // string subtitle_url = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_subtitle_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "bilibili.community.service.dm.v1.SubtitleItem.subtitle_url"));
        } else
          goto handle_unusual;
        continue;
      // .bilibili.community.service.dm.v1.UserInfo author = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_author(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SubtitleItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bilibili.community.service.dm.v1.SubtitleItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  // string id_str = 2;
  if (!this->_internal_id_str().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id_str().data(), static_cast<int>(this->_internal_id_str().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bilibili.community.service.dm.v1.SubtitleItem.id_str");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_id_str(), target);
  }

  // string lan = 3;
  if (!this->_internal_lan().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lan().data(), static_cast<int>(this->_internal_lan().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bilibili.community.service.dm.v1.SubtitleItem.lan");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_lan(), target);
  }

  // string lan_doc = 4;
  if (!this->_internal_lan_doc().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lan_doc().data(), static_cast<int>(this->_internal_lan_doc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bilibili.community.service.dm.v1.SubtitleItem.lan_doc");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_lan_doc(), target);
  }

  // string subtitle_url = 5;
  if (!this->_internal_subtitle_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_subtitle_url().data(), static_cast<int>(this->_internal_subtitle_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bilibili.community.service.dm.v1.SubtitleItem.subtitle_url");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_subtitle_url(), target);
  }

  // .bilibili.community.service.dm.v1.UserInfo author = 6;
  if (this->_internal_has_author()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::author(this),
        _Internal::author(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bilibili.community.service.dm.v1.SubtitleItem)
  return target;
}

size_t SubtitleItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bilibili.community.service.dm.v1.SubtitleItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id_str = 2;
  if (!this->_internal_id_str().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id_str());
  }

  // string lan = 3;
  if (!this->_internal_lan().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lan());
  }

  // string lan_doc = 4;
  if (!this->_internal_lan_doc().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lan_doc());
  }

  // string subtitle_url = 5;
  if (!this->_internal_subtitle_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_subtitle_url());
  }

  // .bilibili.community.service.dm.v1.UserInfo author = 6;
  if (this->_internal_has_author()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.author_);
  }

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubtitleItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SubtitleItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubtitleItem::GetClassData() const { return &_class_data_; }


void SubtitleItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SubtitleItem*>(&to_msg);
  auto& from = static_cast<const SubtitleItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bilibili.community.service.dm.v1.SubtitleItem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id_str().empty()) {
    _this->_internal_set_id_str(from._internal_id_str());
  }
  if (!from._internal_lan().empty()) {
    _this->_internal_set_lan(from._internal_lan());
  }
  if (!from._internal_lan_doc().empty()) {
    _this->_internal_set_lan_doc(from._internal_lan_doc());
  }
  if (!from._internal_subtitle_url().empty()) {
    _this->_internal_set_subtitle_url(from._internal_subtitle_url());
  }
  if (from._internal_has_author()) {
    _this->_internal_mutable_author()->::bilibili::community::service::dm::v1::UserInfo::MergeFrom(
        from._internal_author());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SubtitleItem::CopyFrom(const SubtitleItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bilibili.community.service.dm.v1.SubtitleItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubtitleItem::IsInitialized() const {
  return true;
}

void SubtitleItem::InternalSwap(SubtitleItem* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_str_, lhs_arena,
      &other->_impl_.id_str_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.lan_, lhs_arena,
      &other->_impl_.lan_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.lan_doc_, lhs_arena,
      &other->_impl_.lan_doc_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.subtitle_url_, lhs_arena,
      &other->_impl_.subtitle_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SubtitleItem, _impl_.id_)
      + sizeof(SubtitleItem::_impl_.id_)
      - PROTOBUF_FIELD_OFFSET(SubtitleItem, _impl_.author_)>(
          reinterpret_cast<char*>(&_impl_.author_),
          reinterpret_cast<char*>(&other->_impl_.author_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SubtitleItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_reply_2eproto_getter, &descriptor_table_reply_2eproto_once,
      file_level_metadata_reply_2eproto[14]);
}

// ===================================================================

class UserInfo::_Internal {
 public:
};

UserInfo::UserInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bilibili.community.service.dm.v1.UserInfo)
}
UserInfo::UserInfo(const UserInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UserInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.sex_){}
    , decltype(_impl_.face_){}
    , decltype(_impl_.sign_){}
    , decltype(_impl_.mid_){}
    , decltype(_impl_.rank_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sex_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sex_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sex().empty()) {
    _this->_impl_.sex_.Set(from._internal_sex(), 
      _this->GetArenaForAllocation());
  }
  _impl_.face_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.face_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_face().empty()) {
    _this->_impl_.face_.Set(from._internal_face(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sign_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sign_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sign().empty()) {
    _this->_impl_.sign_.Set(from._internal_sign(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.mid_, &from._impl_.mid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.rank_) -
    reinterpret_cast<char*>(&_impl_.mid_)) + sizeof(_impl_.rank_));
  // @@protoc_insertion_point(copy_constructor:bilibili.community.service.dm.v1.UserInfo)
}

inline void UserInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.sex_){}
    , decltype(_impl_.face_){}
    , decltype(_impl_.sign_){}
    , decltype(_impl_.mid_){int64_t{0}}
    , decltype(_impl_.rank_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sex_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sex_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.face_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.face_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sign_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sign_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UserInfo::~UserInfo() {
  // @@protoc_insertion_point(destructor:bilibili.community.service.dm.v1.UserInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.sex_.Destroy();
  _impl_.face_.Destroy();
  _impl_.sign_.Destroy();
}

void UserInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:bilibili.community.service.dm.v1.UserInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.sex_.ClearToEmpty();
  _impl_.face_.ClearToEmpty();
  _impl_.sign_.ClearToEmpty();
  ::memset(&_impl_.mid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.rank_) -
      reinterpret_cast<char*>(&_impl_.mid_)) + sizeof(_impl_.rank_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 mid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.mid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "bilibili.community.service.dm.v1.UserInfo.name"));
        } else
          goto handle_unusual;
        continue;
      // string sex = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_sex();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "bilibili.community.service.dm.v1.UserInfo.sex"));
        } else
          goto handle_unusual;
        continue;
      // string face = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_face();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "bilibili.community.service.dm.v1.UserInfo.face"));
        } else
          goto handle_unusual;
        continue;
      // string sign = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_sign();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "bilibili.community.service.dm.v1.UserInfo.sign"));
        } else
          goto handle_unusual;
        continue;
      // int32 rank = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bilibili.community.service.dm.v1.UserInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 mid = 1;
  if (this->_internal_mid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_mid(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bilibili.community.service.dm.v1.UserInfo.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string sex = 3;
  if (!this->_internal_sex().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sex().data(), static_cast<int>(this->_internal_sex().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bilibili.community.service.dm.v1.UserInfo.sex");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_sex(), target);
  }

  // string face = 4;
  if (!this->_internal_face().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_face().data(), static_cast<int>(this->_internal_face().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bilibili.community.service.dm.v1.UserInfo.face");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_face(), target);
  }

  // string sign = 5;
  if (!this->_internal_sign().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sign().data(), static_cast<int>(this->_internal_sign().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bilibili.community.service.dm.v1.UserInfo.sign");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_sign(), target);
  }

  // int32 rank = 6;
  if (this->_internal_rank() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_rank(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bilibili.community.service.dm.v1.UserInfo)
  return target;
}

size_t UserInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bilibili.community.service.dm.v1.UserInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string sex = 3;
  if (!this->_internal_sex().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sex());
  }

  // string face = 4;
  if (!this->_internal_face().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_face());
  }

  // string sign = 5;
  if (!this->_internal_sign().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sign());
  }

  // int64 mid = 1;
  if (this->_internal_mid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_mid());
  }

  // int32 rank = 6;
  if (this->_internal_rank() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_rank());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserInfo::GetClassData() const { return &_class_data_; }


void UserInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserInfo*>(&to_msg);
  auto& from = static_cast<const UserInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bilibili.community.service.dm.v1.UserInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_sex().empty()) {
    _this->_internal_set_sex(from._internal_sex());
  }
  if (!from._internal_face().empty()) {
    _this->_internal_set_face(from._internal_face());
  }
  if (!from._internal_sign().empty()) {
    _this->_internal_set_sign(from._internal_sign());
  }
  if (from._internal_mid() != 0) {
    _this->_internal_set_mid(from._internal_mid());
  }
  if (from._internal_rank() != 0) {
    _this->_internal_set_rank(from._internal_rank());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserInfo::CopyFrom(const UserInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bilibili.community.service.dm.v1.UserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInfo::IsInitialized() const {
  return true;
}

void UserInfo::InternalSwap(UserInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sex_, lhs_arena,
      &other->_impl_.sex_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.face_, lhs_arena,
      &other->_impl_.face_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sign_, lhs_arena,
      &other->_impl_.sign_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UserInfo, _impl_.rank_)
      + sizeof(UserInfo::_impl_.rank_)
      - PROTOBUF_FIELD_OFFSET(UserInfo, _impl_.mid_)>(
          reinterpret_cast<char*>(&_impl_.mid_),
          reinterpret_cast<char*>(&other->_impl_.mid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UserInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_reply_2eproto_getter, &descriptor_table_reply_2eproto_once,
      file_level_metadata_reply_2eproto[15]);
}

// ===================================================================

class DanmakuElem::_Internal {
 public:
};

DanmakuElem::DanmakuElem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bilibili.community.service.dm.v1.DanmakuElem)
}
DanmakuElem::DanmakuElem(const DanmakuElem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DanmakuElem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.midhash_){}
    , decltype(_impl_.content_){}
    , decltype(_impl_.action_){}
    , decltype(_impl_.idstr_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.progress_){}
    , decltype(_impl_.mode_){}
    , decltype(_impl_.fontsize_){}
    , decltype(_impl_.color_){}
    , decltype(_impl_.ctime_){}
    , decltype(_impl_.weight_){}
    , decltype(_impl_.pool_){}
    , decltype(_impl_.attr_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.midhash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.midhash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_midhash().empty()) {
    _this->_impl_.midhash_.Set(from._internal_midhash(), 
      _this->GetArenaForAllocation());
  }
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content().empty()) {
    _this->_impl_.content_.Set(from._internal_content(), 
      _this->GetArenaForAllocation());
  }
  _impl_.action_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.action_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_action().empty()) {
    _this->_impl_.action_.Set(from._internal_action(), 
      _this->GetArenaForAllocation());
  }
  _impl_.idstr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.idstr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_idstr().empty()) {
    _this->_impl_.idstr_.Set(from._internal_idstr(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.attr_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.attr_));
  // @@protoc_insertion_point(copy_constructor:bilibili.community.service.dm.v1.DanmakuElem)
}

inline void DanmakuElem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.midhash_){}
    , decltype(_impl_.content_){}
    , decltype(_impl_.action_){}
    , decltype(_impl_.idstr_){}
    , decltype(_impl_.id_){int64_t{0}}
    , decltype(_impl_.progress_){0}
    , decltype(_impl_.mode_){0}
    , decltype(_impl_.fontsize_){0}
    , decltype(_impl_.color_){0u}
    , decltype(_impl_.ctime_){int64_t{0}}
    , decltype(_impl_.weight_){0}
    , decltype(_impl_.pool_){0}
    , decltype(_impl_.attr_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.midhash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.midhash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.action_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.action_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.idstr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.idstr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DanmakuElem::~DanmakuElem() {
  // @@protoc_insertion_point(destructor:bilibili.community.service.dm.v1.DanmakuElem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DanmakuElem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.midhash_.Destroy();
  _impl_.content_.Destroy();
  _impl_.action_.Destroy();
  _impl_.idstr_.Destroy();
}

void DanmakuElem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DanmakuElem::Clear() {
// @@protoc_insertion_point(message_clear_start:bilibili.community.service.dm.v1.DanmakuElem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.midhash_.ClearToEmpty();
  _impl_.content_.ClearToEmpty();
  _impl_.action_.ClearToEmpty();
  _impl_.idstr_.ClearToEmpty();
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.attr_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.attr_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DanmakuElem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 progress = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.progress_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 mode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 fontsize = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.fontsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 color = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string midHash = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_midhash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "bilibili.community.service.dm.v1.DanmakuElem.midHash"));
        } else
          goto handle_unusual;
        continue;
      // string content = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_content();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "bilibili.community.service.dm.v1.DanmakuElem.content"));
        } else
          goto handle_unusual;
        continue;
      // int64 ctime = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.ctime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 weight = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.weight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string action = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_action();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "bilibili.community.service.dm.v1.DanmakuElem.action"));
        } else
          goto handle_unusual;
        continue;
      // int32 pool = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.pool_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string idStr = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_idstr();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "bilibili.community.service.dm.v1.DanmakuElem.idStr"));
        } else
          goto handle_unusual;
        continue;
      // int32 attr = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.attr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DanmakuElem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bilibili.community.service.dm.v1.DanmakuElem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  // int32 progress = 2;
  if (this->_internal_progress() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_progress(), target);
  }

  // int32 mode = 3;
  if (this->_internal_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_mode(), target);
  }

  // int32 fontsize = 4;
  if (this->_internal_fontsize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_fontsize(), target);
  }

  // uint32 color = 5;
  if (this->_internal_color() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_color(), target);
  }

  // string midHash = 6;
  if (!this->_internal_midhash().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_midhash().data(), static_cast<int>(this->_internal_midhash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bilibili.community.service.dm.v1.DanmakuElem.midHash");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_midhash(), target);
  }

  // string content = 7;
  if (!this->_internal_content().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bilibili.community.service.dm.v1.DanmakuElem.content");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_content(), target);
  }

  // int64 ctime = 8;
  if (this->_internal_ctime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_ctime(), target);
  }

  // int32 weight = 9;
  if (this->_internal_weight() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_weight(), target);
  }

  // string action = 10;
  if (!this->_internal_action().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bilibili.community.service.dm.v1.DanmakuElem.action");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_action(), target);
  }

  // int32 pool = 11;
  if (this->_internal_pool() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_pool(), target);
  }

  // string idStr = 12;
  if (!this->_internal_idstr().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_idstr().data(), static_cast<int>(this->_internal_idstr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bilibili.community.service.dm.v1.DanmakuElem.idStr");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_idstr(), target);
  }

  // int32 attr = 13;
  if (this->_internal_attr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(13, this->_internal_attr(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bilibili.community.service.dm.v1.DanmakuElem)
  return target;
}

size_t DanmakuElem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bilibili.community.service.dm.v1.DanmakuElem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string midHash = 6;
  if (!this->_internal_midhash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_midhash());
  }

  // string content = 7;
  if (!this->_internal_content().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  // string action = 10;
  if (!this->_internal_action().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action());
  }

  // string idStr = 12;
  if (!this->_internal_idstr().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_idstr());
  }

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_id());
  }

  // int32 progress = 2;
  if (this->_internal_progress() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_progress());
  }

  // int32 mode = 3;
  if (this->_internal_mode() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mode());
  }

  // int32 fontsize = 4;
  if (this->_internal_fontsize() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_fontsize());
  }

  // uint32 color = 5;
  if (this->_internal_color() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_color());
  }

  // int64 ctime = 8;
  if (this->_internal_ctime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_ctime());
  }

  // int32 weight = 9;
  if (this->_internal_weight() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_weight());
  }

  // int32 pool = 11;
  if (this->_internal_pool() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_pool());
  }

  // int32 attr = 13;
  if (this->_internal_attr() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_attr());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DanmakuElem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DanmakuElem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DanmakuElem::GetClassData() const { return &_class_data_; }


void DanmakuElem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DanmakuElem*>(&to_msg);
  auto& from = static_cast<const DanmakuElem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bilibili.community.service.dm.v1.DanmakuElem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_midhash().empty()) {
    _this->_internal_set_midhash(from._internal_midhash());
  }
  if (!from._internal_content().empty()) {
    _this->_internal_set_content(from._internal_content());
  }
  if (!from._internal_action().empty()) {
    _this->_internal_set_action(from._internal_action());
  }
  if (!from._internal_idstr().empty()) {
    _this->_internal_set_idstr(from._internal_idstr());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_progress() != 0) {
    _this->_internal_set_progress(from._internal_progress());
  }
  if (from._internal_mode() != 0) {
    _this->_internal_set_mode(from._internal_mode());
  }
  if (from._internal_fontsize() != 0) {
    _this->_internal_set_fontsize(from._internal_fontsize());
  }
  if (from._internal_color() != 0) {
    _this->_internal_set_color(from._internal_color());
  }
  if (from._internal_ctime() != 0) {
    _this->_internal_set_ctime(from._internal_ctime());
  }
  if (from._internal_weight() != 0) {
    _this->_internal_set_weight(from._internal_weight());
  }
  if (from._internal_pool() != 0) {
    _this->_internal_set_pool(from._internal_pool());
  }
  if (from._internal_attr() != 0) {
    _this->_internal_set_attr(from._internal_attr());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DanmakuElem::CopyFrom(const DanmakuElem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bilibili.community.service.dm.v1.DanmakuElem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DanmakuElem::IsInitialized() const {
  return true;
}

void DanmakuElem::InternalSwap(DanmakuElem* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.midhash_, lhs_arena,
      &other->_impl_.midhash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.content_, lhs_arena,
      &other->_impl_.content_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.action_, lhs_arena,
      &other->_impl_.action_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.idstr_, lhs_arena,
      &other->_impl_.idstr_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DanmakuElem, _impl_.attr_)
      + sizeof(DanmakuElem::_impl_.attr_)
      - PROTOBUF_FIELD_OFFSET(DanmakuElem, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DanmakuElem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_reply_2eproto_getter, &descriptor_table_reply_2eproto_once,
      file_level_metadata_reply_2eproto[16]);
}

// ===================================================================

class DmPlayerConfigReq::_Internal {
 public:
  static const ::bilibili::community::service::dm::v1::PlayerDanmakuSwitch& switch_(const DmPlayerConfigReq* msg);
  static const ::bilibili::community::service::dm::v1::PlayerDanmakuSwitchSave& switch_save(const DmPlayerConfigReq* msg);
  static const ::bilibili::community::service::dm::v1::PlayerDanmakuUseDefaultConfig& use_default_config(const DmPlayerConfigReq* msg);
  static const ::bilibili::community::service::dm::v1::PlayerDanmakuAiRecommendedSwitch& ai_recommended_switch(const DmPlayerConfigReq* msg);
  static const ::bilibili::community::service::dm::v1::PlayerDanmakuAiRecommendedLevel& ai_recommended_level(const DmPlayerConfigReq* msg);
  static const ::bilibili::community::service::dm::v1::PlayerDanmakuBlocktop& blocktop(const DmPlayerConfigReq* msg);
  static const ::bilibili::community::service::dm::v1::PlayerDanmakuBlockscroll& blockscroll(const DmPlayerConfigReq* msg);
  static const ::bilibili::community::service::dm::v1::PlayerDanmakuBlockbottom& blockbottom(const DmPlayerConfigReq* msg);
  static const ::bilibili::community::service::dm::v1::PlayerDanmakuBlockcolorful& blockcolorful(const DmPlayerConfigReq* msg);
  static const ::bilibili::community::service::dm::v1::PlayerDanmakuBlockrepeat& blockrepeat(const DmPlayerConfigReq* msg);
  static const ::bilibili::community::service::dm::v1::PlayerDanmakuBlockspecial& blockspecial(const DmPlayerConfigReq* msg);
  static const ::bilibili::community::service::dm::v1::PlayerDanmakuOpacity& opacity(const DmPlayerConfigReq* msg);
  static const ::bilibili::community::service::dm::v1::PlayerDanmakuScalingfactor& scalingfactor(const DmPlayerConfigReq* msg);
  static const ::bilibili::community::service::dm::v1::PlayerDanmakuDomain& domain(const DmPlayerConfigReq* msg);
  static const ::bilibili::community::service::dm::v1::PlayerDanmakuSpeed& speed(const DmPlayerConfigReq* msg);
  static const ::bilibili::community::service::dm::v1::PlayerDanmakuEnableblocklist& enableblocklist(const DmPlayerConfigReq* msg);
  static const ::bilibili::community::service::dm::v1::InlinePlayerDanmakuSwitch& inlineplayerdanmakuswitch(const DmPlayerConfigReq* msg);
};

const ::bilibili::community::service::dm::v1::PlayerDanmakuSwitch&
DmPlayerConfigReq::_Internal::switch_(const DmPlayerConfigReq* msg) {
  return *msg->_impl_.switch__;
}
const ::bilibili::community::service::dm::v1::PlayerDanmakuSwitchSave&
DmPlayerConfigReq::_Internal::switch_save(const DmPlayerConfigReq* msg) {
  return *msg->_impl_.switch_save_;
}
const ::bilibili::community::service::dm::v1::PlayerDanmakuUseDefaultConfig&
DmPlayerConfigReq::_Internal::use_default_config(const DmPlayerConfigReq* msg) {
  return *msg->_impl_.use_default_config_;
}
const ::bilibili::community::service::dm::v1::PlayerDanmakuAiRecommendedSwitch&
DmPlayerConfigReq::_Internal::ai_recommended_switch(const DmPlayerConfigReq* msg) {
  return *msg->_impl_.ai_recommended_switch_;
}
const ::bilibili::community::service::dm::v1::PlayerDanmakuAiRecommendedLevel&
DmPlayerConfigReq::_Internal::ai_recommended_level(const DmPlayerConfigReq* msg) {
  return *msg->_impl_.ai_recommended_level_;
}
const ::bilibili::community::service::dm::v1::PlayerDanmakuBlocktop&
DmPlayerConfigReq::_Internal::blocktop(const DmPlayerConfigReq* msg) {
  return *msg->_impl_.blocktop_;
}
const ::bilibili::community::service::dm::v1::PlayerDanmakuBlockscroll&
DmPlayerConfigReq::_Internal::blockscroll(const DmPlayerConfigReq* msg) {
  return *msg->_impl_.blockscroll_;
}
const ::bilibili::community::service::dm::v1::PlayerDanmakuBlockbottom&
DmPlayerConfigReq::_Internal::blockbottom(const DmPlayerConfigReq* msg) {
  return *msg->_impl_.blockbottom_;
}
const ::bilibili::community::service::dm::v1::PlayerDanmakuBlockcolorful&
DmPlayerConfigReq::_Internal::blockcolorful(const DmPlayerConfigReq* msg) {
  return *msg->_impl_.blockcolorful_;
}
const ::bilibili::community::service::dm::v1::PlayerDanmakuBlockrepeat&
DmPlayerConfigReq::_Internal::blockrepeat(const DmPlayerConfigReq* msg) {
  return *msg->_impl_.blockrepeat_;
}
const ::bilibili::community::service::dm::v1::PlayerDanmakuBlockspecial&
DmPlayerConfigReq::_Internal::blockspecial(const DmPlayerConfigReq* msg) {
  return *msg->_impl_.blockspecial_;
}
const ::bilibili::community::service::dm::v1::PlayerDanmakuOpacity&
DmPlayerConfigReq::_Internal::opacity(const DmPlayerConfigReq* msg) {
  return *msg->_impl_.opacity_;
}
const ::bilibili::community::service::dm::v1::PlayerDanmakuScalingfactor&
DmPlayerConfigReq::_Internal::scalingfactor(const DmPlayerConfigReq* msg) {
  return *msg->_impl_.scalingfactor_;
}
const ::bilibili::community::service::dm::v1::PlayerDanmakuDomain&
DmPlayerConfigReq::_Internal::domain(const DmPlayerConfigReq* msg) {
  return *msg->_impl_.domain_;
}
const ::bilibili::community::service::dm::v1::PlayerDanmakuSpeed&
DmPlayerConfigReq::_Internal::speed(const DmPlayerConfigReq* msg) {
  return *msg->_impl_.speed_;
}
const ::bilibili::community::service::dm::v1::PlayerDanmakuEnableblocklist&
DmPlayerConfigReq::_Internal::enableblocklist(const DmPlayerConfigReq* msg) {
  return *msg->_impl_.enableblocklist_;
}
const ::bilibili::community::service::dm::v1::InlinePlayerDanmakuSwitch&
DmPlayerConfigReq::_Internal::inlineplayerdanmakuswitch(const DmPlayerConfigReq* msg) {
  return *msg->_impl_.inlineplayerdanmakuswitch_;
}
DmPlayerConfigReq::DmPlayerConfigReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bilibili.community.service.dm.v1.DmPlayerConfigReq)
}
DmPlayerConfigReq::DmPlayerConfigReq(const DmPlayerConfigReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DmPlayerConfigReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.switch__){nullptr}
    , decltype(_impl_.switch_save_){nullptr}
    , decltype(_impl_.use_default_config_){nullptr}
    , decltype(_impl_.ai_recommended_switch_){nullptr}
    , decltype(_impl_.ai_recommended_level_){nullptr}
    , decltype(_impl_.blocktop_){nullptr}
    , decltype(_impl_.blockscroll_){nullptr}
    , decltype(_impl_.blockbottom_){nullptr}
    , decltype(_impl_.blockcolorful_){nullptr}
    , decltype(_impl_.blockrepeat_){nullptr}
    , decltype(_impl_.blockspecial_){nullptr}
    , decltype(_impl_.opacity_){nullptr}
    , decltype(_impl_.scalingfactor_){nullptr}
    , decltype(_impl_.domain_){nullptr}
    , decltype(_impl_.speed_){nullptr}
    , decltype(_impl_.enableblocklist_){nullptr}
    , decltype(_impl_.inlineplayerdanmakuswitch_){nullptr}
    , decltype(_impl_.ts_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_switch_()) {
    _this->_impl_.switch__ = new ::bilibili::community::service::dm::v1::PlayerDanmakuSwitch(*from._impl_.switch__);
  }
  if (from._internal_has_switch_save()) {
    _this->_impl_.switch_save_ = new ::bilibili::community::service::dm::v1::PlayerDanmakuSwitchSave(*from._impl_.switch_save_);
  }
  if (from._internal_has_use_default_config()) {
    _this->_impl_.use_default_config_ = new ::bilibili::community::service::dm::v1::PlayerDanmakuUseDefaultConfig(*from._impl_.use_default_config_);
  }
  if (from._internal_has_ai_recommended_switch()) {
    _this->_impl_.ai_recommended_switch_ = new ::bilibili::community::service::dm::v1::PlayerDanmakuAiRecommendedSwitch(*from._impl_.ai_recommended_switch_);
  }
  if (from._internal_has_ai_recommended_level()) {
    _this->_impl_.ai_recommended_level_ = new ::bilibili::community::service::dm::v1::PlayerDanmakuAiRecommendedLevel(*from._impl_.ai_recommended_level_);
  }
  if (from._internal_has_blocktop()) {
    _this->_impl_.blocktop_ = new ::bilibili::community::service::dm::v1::PlayerDanmakuBlocktop(*from._impl_.blocktop_);
  }
  if (from._internal_has_blockscroll()) {
    _this->_impl_.blockscroll_ = new ::bilibili::community::service::dm::v1::PlayerDanmakuBlockscroll(*from._impl_.blockscroll_);
  }
  if (from._internal_has_blockbottom()) {
    _this->_impl_.blockbottom_ = new ::bilibili::community::service::dm::v1::PlayerDanmakuBlockbottom(*from._impl_.blockbottom_);
  }
  if (from._internal_has_blockcolorful()) {
    _this->_impl_.blockcolorful_ = new ::bilibili::community::service::dm::v1::PlayerDanmakuBlockcolorful(*from._impl_.blockcolorful_);
  }
  if (from._internal_has_blockrepeat()) {
    _this->_impl_.blockrepeat_ = new ::bilibili::community::service::dm::v1::PlayerDanmakuBlockrepeat(*from._impl_.blockrepeat_);
  }
  if (from._internal_has_blockspecial()) {
    _this->_impl_.blockspecial_ = new ::bilibili::community::service::dm::v1::PlayerDanmakuBlockspecial(*from._impl_.blockspecial_);
  }
  if (from._internal_has_opacity()) {
    _this->_impl_.opacity_ = new ::bilibili::community::service::dm::v1::PlayerDanmakuOpacity(*from._impl_.opacity_);
  }
  if (from._internal_has_scalingfactor()) {
    _this->_impl_.scalingfactor_ = new ::bilibili::community::service::dm::v1::PlayerDanmakuScalingfactor(*from._impl_.scalingfactor_);
  }
  if (from._internal_has_domain()) {
    _this->_impl_.domain_ = new ::bilibili::community::service::dm::v1::PlayerDanmakuDomain(*from._impl_.domain_);
  }
  if (from._internal_has_speed()) {
    _this->_impl_.speed_ = new ::bilibili::community::service::dm::v1::PlayerDanmakuSpeed(*from._impl_.speed_);
  }
  if (from._internal_has_enableblocklist()) {
    _this->_impl_.enableblocklist_ = new ::bilibili::community::service::dm::v1::PlayerDanmakuEnableblocklist(*from._impl_.enableblocklist_);
  }
  if (from._internal_has_inlineplayerdanmakuswitch()) {
    _this->_impl_.inlineplayerdanmakuswitch_ = new ::bilibili::community::service::dm::v1::InlinePlayerDanmakuSwitch(*from._impl_.inlineplayerdanmakuswitch_);
  }
  _this->_impl_.ts_ = from._impl_.ts_;
  // @@protoc_insertion_point(copy_constructor:bilibili.community.service.dm.v1.DmPlayerConfigReq)
}

inline void DmPlayerConfigReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.switch__){nullptr}
    , decltype(_impl_.switch_save_){nullptr}
    , decltype(_impl_.use_default_config_){nullptr}
    , decltype(_impl_.ai_recommended_switch_){nullptr}
    , decltype(_impl_.ai_recommended_level_){nullptr}
    , decltype(_impl_.blocktop_){nullptr}
    , decltype(_impl_.blockscroll_){nullptr}
    , decltype(_impl_.blockbottom_){nullptr}
    , decltype(_impl_.blockcolorful_){nullptr}
    , decltype(_impl_.blockrepeat_){nullptr}
    , decltype(_impl_.blockspecial_){nullptr}
    , decltype(_impl_.opacity_){nullptr}
    , decltype(_impl_.scalingfactor_){nullptr}
    , decltype(_impl_.domain_){nullptr}
    , decltype(_impl_.speed_){nullptr}
    , decltype(_impl_.enableblocklist_){nullptr}
    , decltype(_impl_.inlineplayerdanmakuswitch_){nullptr}
    , decltype(_impl_.ts_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DmPlayerConfigReq::~DmPlayerConfigReq() {
  // @@protoc_insertion_point(destructor:bilibili.community.service.dm.v1.DmPlayerConfigReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DmPlayerConfigReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.switch__;
  if (this != internal_default_instance()) delete _impl_.switch_save_;
  if (this != internal_default_instance()) delete _impl_.use_default_config_;
  if (this != internal_default_instance()) delete _impl_.ai_recommended_switch_;
  if (this != internal_default_instance()) delete _impl_.ai_recommended_level_;
  if (this != internal_default_instance()) delete _impl_.blocktop_;
  if (this != internal_default_instance()) delete _impl_.blockscroll_;
  if (this != internal_default_instance()) delete _impl_.blockbottom_;
  if (this != internal_default_instance()) delete _impl_.blockcolorful_;
  if (this != internal_default_instance()) delete _impl_.blockrepeat_;
  if (this != internal_default_instance()) delete _impl_.blockspecial_;
  if (this != internal_default_instance()) delete _impl_.opacity_;
  if (this != internal_default_instance()) delete _impl_.scalingfactor_;
  if (this != internal_default_instance()) delete _impl_.domain_;
  if (this != internal_default_instance()) delete _impl_.speed_;
  if (this != internal_default_instance()) delete _impl_.enableblocklist_;
  if (this != internal_default_instance()) delete _impl_.inlineplayerdanmakuswitch_;
}

void DmPlayerConfigReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DmPlayerConfigReq::Clear() {
// @@protoc_insertion_point(message_clear_start:bilibili.community.service.dm.v1.DmPlayerConfigReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.switch__ != nullptr) {
    delete _impl_.switch__;
  }
  _impl_.switch__ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.switch_save_ != nullptr) {
    delete _impl_.switch_save_;
  }
  _impl_.switch_save_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.use_default_config_ != nullptr) {
    delete _impl_.use_default_config_;
  }
  _impl_.use_default_config_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.ai_recommended_switch_ != nullptr) {
    delete _impl_.ai_recommended_switch_;
  }
  _impl_.ai_recommended_switch_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.ai_recommended_level_ != nullptr) {
    delete _impl_.ai_recommended_level_;
  }
  _impl_.ai_recommended_level_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.blocktop_ != nullptr) {
    delete _impl_.blocktop_;
  }
  _impl_.blocktop_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.blockscroll_ != nullptr) {
    delete _impl_.blockscroll_;
  }
  _impl_.blockscroll_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.blockbottom_ != nullptr) {
    delete _impl_.blockbottom_;
  }
  _impl_.blockbottom_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.blockcolorful_ != nullptr) {
    delete _impl_.blockcolorful_;
  }
  _impl_.blockcolorful_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.blockrepeat_ != nullptr) {
    delete _impl_.blockrepeat_;
  }
  _impl_.blockrepeat_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.blockspecial_ != nullptr) {
    delete _impl_.blockspecial_;
  }
  _impl_.blockspecial_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.opacity_ != nullptr) {
    delete _impl_.opacity_;
  }
  _impl_.opacity_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.scalingfactor_ != nullptr) {
    delete _impl_.scalingfactor_;
  }
  _impl_.scalingfactor_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.domain_ != nullptr) {
    delete _impl_.domain_;
  }
  _impl_.domain_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.speed_ != nullptr) {
    delete _impl_.speed_;
  }
  _impl_.speed_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.enableblocklist_ != nullptr) {
    delete _impl_.enableblocklist_;
  }
  _impl_.enableblocklist_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.inlineplayerdanmakuswitch_ != nullptr) {
    delete _impl_.inlineplayerdanmakuswitch_;
  }
  _impl_.inlineplayerdanmakuswitch_ = nullptr;
  _impl_.ts_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DmPlayerConfigReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 ts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.ts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .bilibili.community.service.dm.v1.PlayerDanmakuSwitch switch = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_switch_(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .bilibili.community.service.dm.v1.PlayerDanmakuSwitchSave switch_save = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_switch_save(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .bilibili.community.service.dm.v1.PlayerDanmakuUseDefaultConfig use_default_config = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_use_default_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedSwitch ai_recommended_switch = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_ai_recommended_switch(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedLevel ai_recommended_level = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_ai_recommended_level(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .bilibili.community.service.dm.v1.PlayerDanmakuBlocktop blocktop = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_blocktop(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .bilibili.community.service.dm.v1.PlayerDanmakuBlockscroll blockscroll = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_blockscroll(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .bilibili.community.service.dm.v1.PlayerDanmakuBlockbottom blockbottom = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_blockbottom(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .bilibili.community.service.dm.v1.PlayerDanmakuBlockcolorful blockcolorful = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_blockcolorful(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .bilibili.community.service.dm.v1.PlayerDanmakuBlockrepeat blockrepeat = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_blockrepeat(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .bilibili.community.service.dm.v1.PlayerDanmakuBlockspecial blockspecial = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_blockspecial(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .bilibili.community.service.dm.v1.PlayerDanmakuOpacity opacity = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_opacity(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .bilibili.community.service.dm.v1.PlayerDanmakuScalingfactor scalingfactor = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_scalingfactor(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .bilibili.community.service.dm.v1.PlayerDanmakuDomain domain = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_domain(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .bilibili.community.service.dm.v1.PlayerDanmakuSpeed speed = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_speed(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .bilibili.community.service.dm.v1.PlayerDanmakuEnableblocklist enableblocklist = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_enableblocklist(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .bilibili.community.service.dm.v1.InlinePlayerDanmakuSwitch inlinePlayerDanmakuSwitch = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_inlineplayerdanmakuswitch(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DmPlayerConfigReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bilibili.community.service.dm.v1.DmPlayerConfigReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 ts = 1;
  if (this->_internal_ts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_ts(), target);
  }

  // .bilibili.community.service.dm.v1.PlayerDanmakuSwitch switch = 2;
  if (this->_internal_has_switch_()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::switch_(this),
        _Internal::switch_(this).GetCachedSize(), target, stream);
  }

  // .bilibili.community.service.dm.v1.PlayerDanmakuSwitchSave switch_save = 3;
  if (this->_internal_has_switch_save()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::switch_save(this),
        _Internal::switch_save(this).GetCachedSize(), target, stream);
  }

  // .bilibili.community.service.dm.v1.PlayerDanmakuUseDefaultConfig use_default_config = 4;
  if (this->_internal_has_use_default_config()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::use_default_config(this),
        _Internal::use_default_config(this).GetCachedSize(), target, stream);
  }

  // .bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedSwitch ai_recommended_switch = 5;
  if (this->_internal_has_ai_recommended_switch()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::ai_recommended_switch(this),
        _Internal::ai_recommended_switch(this).GetCachedSize(), target, stream);
  }

  // .bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedLevel ai_recommended_level = 6;
  if (this->_internal_has_ai_recommended_level()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::ai_recommended_level(this),
        _Internal::ai_recommended_level(this).GetCachedSize(), target, stream);
  }

  // .bilibili.community.service.dm.v1.PlayerDanmakuBlocktop blocktop = 7;
  if (this->_internal_has_blocktop()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::blocktop(this),
        _Internal::blocktop(this).GetCachedSize(), target, stream);
  }

  // .bilibili.community.service.dm.v1.PlayerDanmakuBlockscroll blockscroll = 8;
  if (this->_internal_has_blockscroll()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::blockscroll(this),
        _Internal::blockscroll(this).GetCachedSize(), target, stream);
  }

  // .bilibili.community.service.dm.v1.PlayerDanmakuBlockbottom blockbottom = 9;
  if (this->_internal_has_blockbottom()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::blockbottom(this),
        _Internal::blockbottom(this).GetCachedSize(), target, stream);
  }

  // .bilibili.community.service.dm.v1.PlayerDanmakuBlockcolorful blockcolorful = 10;
  if (this->_internal_has_blockcolorful()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::blockcolorful(this),
        _Internal::blockcolorful(this).GetCachedSize(), target, stream);
  }

  // .bilibili.community.service.dm.v1.PlayerDanmakuBlockrepeat blockrepeat = 11;
  if (this->_internal_has_blockrepeat()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::blockrepeat(this),
        _Internal::blockrepeat(this).GetCachedSize(), target, stream);
  }

  // .bilibili.community.service.dm.v1.PlayerDanmakuBlockspecial blockspecial = 12;
  if (this->_internal_has_blockspecial()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::blockspecial(this),
        _Internal::blockspecial(this).GetCachedSize(), target, stream);
  }

  // .bilibili.community.service.dm.v1.PlayerDanmakuOpacity opacity = 13;
  if (this->_internal_has_opacity()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::opacity(this),
        _Internal::opacity(this).GetCachedSize(), target, stream);
  }

  // .bilibili.community.service.dm.v1.PlayerDanmakuScalingfactor scalingfactor = 14;
  if (this->_internal_has_scalingfactor()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::scalingfactor(this),
        _Internal::scalingfactor(this).GetCachedSize(), target, stream);
  }

  // .bilibili.community.service.dm.v1.PlayerDanmakuDomain domain = 15;
  if (this->_internal_has_domain()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::domain(this),
        _Internal::domain(this).GetCachedSize(), target, stream);
  }

  // .bilibili.community.service.dm.v1.PlayerDanmakuSpeed speed = 16;
  if (this->_internal_has_speed()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::speed(this),
        _Internal::speed(this).GetCachedSize(), target, stream);
  }

  // .bilibili.community.service.dm.v1.PlayerDanmakuEnableblocklist enableblocklist = 17;
  if (this->_internal_has_enableblocklist()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::enableblocklist(this),
        _Internal::enableblocklist(this).GetCachedSize(), target, stream);
  }

  // .bilibili.community.service.dm.v1.InlinePlayerDanmakuSwitch inlinePlayerDanmakuSwitch = 18;
  if (this->_internal_has_inlineplayerdanmakuswitch()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, _Internal::inlineplayerdanmakuswitch(this),
        _Internal::inlineplayerdanmakuswitch(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bilibili.community.service.dm.v1.DmPlayerConfigReq)
  return target;
}

size_t DmPlayerConfigReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bilibili.community.service.dm.v1.DmPlayerConfigReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bilibili.community.service.dm.v1.PlayerDanmakuSwitch switch = 2;
  if (this->_internal_has_switch_()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.switch__);
  }

  // .bilibili.community.service.dm.v1.PlayerDanmakuSwitchSave switch_save = 3;
  if (this->_internal_has_switch_save()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.switch_save_);
  }

  // .bilibili.community.service.dm.v1.PlayerDanmakuUseDefaultConfig use_default_config = 4;
  if (this->_internal_has_use_default_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.use_default_config_);
  }

  // .bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedSwitch ai_recommended_switch = 5;
  if (this->_internal_has_ai_recommended_switch()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ai_recommended_switch_);
  }

  // .bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedLevel ai_recommended_level = 6;
  if (this->_internal_has_ai_recommended_level()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ai_recommended_level_);
  }

  // .bilibili.community.service.dm.v1.PlayerDanmakuBlocktop blocktop = 7;
  if (this->_internal_has_blocktop()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.blocktop_);
  }

  // .bilibili.community.service.dm.v1.PlayerDanmakuBlockscroll blockscroll = 8;
  if (this->_internal_has_blockscroll()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.blockscroll_);
  }

  // .bilibili.community.service.dm.v1.PlayerDanmakuBlockbottom blockbottom = 9;
  if (this->_internal_has_blockbottom()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.blockbottom_);
  }

  // .bilibili.community.service.dm.v1.PlayerDanmakuBlockcolorful blockcolorful = 10;
  if (this->_internal_has_blockcolorful()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.blockcolorful_);
  }

  // .bilibili.community.service.dm.v1.PlayerDanmakuBlockrepeat blockrepeat = 11;
  if (this->_internal_has_blockrepeat()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.blockrepeat_);
  }

  // .bilibili.community.service.dm.v1.PlayerDanmakuBlockspecial blockspecial = 12;
  if (this->_internal_has_blockspecial()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.blockspecial_);
  }

  // .bilibili.community.service.dm.v1.PlayerDanmakuOpacity opacity = 13;
  if (this->_internal_has_opacity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.opacity_);
  }

  // .bilibili.community.service.dm.v1.PlayerDanmakuScalingfactor scalingfactor = 14;
  if (this->_internal_has_scalingfactor()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.scalingfactor_);
  }

  // .bilibili.community.service.dm.v1.PlayerDanmakuDomain domain = 15;
  if (this->_internal_has_domain()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.domain_);
  }

  // .bilibili.community.service.dm.v1.PlayerDanmakuSpeed speed = 16;
  if (this->_internal_has_speed()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.speed_);
  }

  // .bilibili.community.service.dm.v1.PlayerDanmakuEnableblocklist enableblocklist = 17;
  if (this->_internal_has_enableblocklist()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.enableblocklist_);
  }

  // .bilibili.community.service.dm.v1.InlinePlayerDanmakuSwitch inlinePlayerDanmakuSwitch = 18;
  if (this->_internal_has_inlineplayerdanmakuswitch()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.inlineplayerdanmakuswitch_);
  }

  // int64 ts = 1;
  if (this->_internal_ts() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_ts());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DmPlayerConfigReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DmPlayerConfigReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DmPlayerConfigReq::GetClassData() const { return &_class_data_; }


void DmPlayerConfigReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DmPlayerConfigReq*>(&to_msg);
  auto& from = static_cast<const DmPlayerConfigReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bilibili.community.service.dm.v1.DmPlayerConfigReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_switch_()) {
    _this->_internal_mutable_switch_()->::bilibili::community::service::dm::v1::PlayerDanmakuSwitch::MergeFrom(
        from._internal_switch_());
  }
  if (from._internal_has_switch_save()) {
    _this->_internal_mutable_switch_save()->::bilibili::community::service::dm::v1::PlayerDanmakuSwitchSave::MergeFrom(
        from._internal_switch_save());
  }
  if (from._internal_has_use_default_config()) {
    _this->_internal_mutable_use_default_config()->::bilibili::community::service::dm::v1::PlayerDanmakuUseDefaultConfig::MergeFrom(
        from._internal_use_default_config());
  }
  if (from._internal_has_ai_recommended_switch()) {
    _this->_internal_mutable_ai_recommended_switch()->::bilibili::community::service::dm::v1::PlayerDanmakuAiRecommendedSwitch::MergeFrom(
        from._internal_ai_recommended_switch());
  }
  if (from._internal_has_ai_recommended_level()) {
    _this->_internal_mutable_ai_recommended_level()->::bilibili::community::service::dm::v1::PlayerDanmakuAiRecommendedLevel::MergeFrom(
        from._internal_ai_recommended_level());
  }
  if (from._internal_has_blocktop()) {
    _this->_internal_mutable_blocktop()->::bilibili::community::service::dm::v1::PlayerDanmakuBlocktop::MergeFrom(
        from._internal_blocktop());
  }
  if (from._internal_has_blockscroll()) {
    _this->_internal_mutable_blockscroll()->::bilibili::community::service::dm::v1::PlayerDanmakuBlockscroll::MergeFrom(
        from._internal_blockscroll());
  }
  if (from._internal_has_blockbottom()) {
    _this->_internal_mutable_blockbottom()->::bilibili::community::service::dm::v1::PlayerDanmakuBlockbottom::MergeFrom(
        from._internal_blockbottom());
  }
  if (from._internal_has_blockcolorful()) {
    _this->_internal_mutable_blockcolorful()->::bilibili::community::service::dm::v1::PlayerDanmakuBlockcolorful::MergeFrom(
        from._internal_blockcolorful());
  }
  if (from._internal_has_blockrepeat()) {
    _this->_internal_mutable_blockrepeat()->::bilibili::community::service::dm::v1::PlayerDanmakuBlockrepeat::MergeFrom(
        from._internal_blockrepeat());
  }
  if (from._internal_has_blockspecial()) {
    _this->_internal_mutable_blockspecial()->::bilibili::community::service::dm::v1::PlayerDanmakuBlockspecial::MergeFrom(
        from._internal_blockspecial());
  }
  if (from._internal_has_opacity()) {
    _this->_internal_mutable_opacity()->::bilibili::community::service::dm::v1::PlayerDanmakuOpacity::MergeFrom(
        from._internal_opacity());
  }
  if (from._internal_has_scalingfactor()) {
    _this->_internal_mutable_scalingfactor()->::bilibili::community::service::dm::v1::PlayerDanmakuScalingfactor::MergeFrom(
        from._internal_scalingfactor());
  }
  if (from._internal_has_domain()) {
    _this->_internal_mutable_domain()->::bilibili::community::service::dm::v1::PlayerDanmakuDomain::MergeFrom(
        from._internal_domain());
  }
  if (from._internal_has_speed()) {
    _this->_internal_mutable_speed()->::bilibili::community::service::dm::v1::PlayerDanmakuSpeed::MergeFrom(
        from._internal_speed());
  }
  if (from._internal_has_enableblocklist()) {
    _this->_internal_mutable_enableblocklist()->::bilibili::community::service::dm::v1::PlayerDanmakuEnableblocklist::MergeFrom(
        from._internal_enableblocklist());
  }
  if (from._internal_has_inlineplayerdanmakuswitch()) {
    _this->_internal_mutable_inlineplayerdanmakuswitch()->::bilibili::community::service::dm::v1::InlinePlayerDanmakuSwitch::MergeFrom(
        from._internal_inlineplayerdanmakuswitch());
  }
  if (from._internal_ts() != 0) {
    _this->_internal_set_ts(from._internal_ts());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DmPlayerConfigReq::CopyFrom(const DmPlayerConfigReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bilibili.community.service.dm.v1.DmPlayerConfigReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DmPlayerConfigReq::IsInitialized() const {
  return true;
}

void DmPlayerConfigReq::InternalSwap(DmPlayerConfigReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DmPlayerConfigReq, _impl_.ts_)
      + sizeof(DmPlayerConfigReq::_impl_.ts_)
      - PROTOBUF_FIELD_OFFSET(DmPlayerConfigReq, _impl_.switch__)>(
          reinterpret_cast<char*>(&_impl_.switch__),
          reinterpret_cast<char*>(&other->_impl_.switch__));
}

::PROTOBUF_NAMESPACE_ID::Metadata DmPlayerConfigReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_reply_2eproto_getter, &descriptor_table_reply_2eproto_once,
      file_level_metadata_reply_2eproto[17]);
}

// ===================================================================

class Response::_Internal {
 public:
};

Response::Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bilibili.community.service.dm.v1.Response)
}
Response::Response(const Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Response* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.code_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.code_ = from._impl_.code_;
  // @@protoc_insertion_point(copy_constructor:bilibili.community.service.dm.v1.Response)
}

inline void Response::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.code_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Response::~Response() {
  // @@protoc_insertion_point(destructor:bilibili.community.service.dm.v1.Response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
}

void Response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Response::Clear() {
// @@protoc_insertion_point(message_clear_start:bilibili.community.service.dm.v1.Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  _impl_.code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "bilibili.community.service.dm.v1.Response.message"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bilibili.community.service.dm.v1.Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->_internal_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_code(), target);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bilibili.community.service.dm.v1.Response.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bilibili.community.service.dm.v1.Response)
  return target;
}

size_t Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bilibili.community.service.dm.v1.Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // int32 code = 1;
  if (this->_internal_code() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Response::GetClassData() const { return &_class_data_; }


void Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Response*>(&to_msg);
  auto& from = static_cast<const Response&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bilibili.community.service.dm.v1.Response)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_code() != 0) {
    _this->_internal_set_code(from._internal_code());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Response::CopyFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bilibili.community.service.dm.v1.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response::IsInitialized() const {
  return true;
}

void Response::InternalSwap(Response* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  swap(_impl_.code_, other->_impl_.code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_reply_2eproto_getter, &descriptor_table_reply_2eproto_once,
      file_level_metadata_reply_2eproto[18]);
}

// ===================================================================

class DanmakuFlag::_Internal {
 public:
};

DanmakuFlag::DanmakuFlag(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bilibili.community.service.dm.v1.DanmakuFlag)
}
DanmakuFlag::DanmakuFlag(const DanmakuFlag& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DanmakuFlag* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.dmid_){}
    , decltype(_impl_.flag_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.dmid_, &from._impl_.dmid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.flag_) -
    reinterpret_cast<char*>(&_impl_.dmid_)) + sizeof(_impl_.flag_));
  // @@protoc_insertion_point(copy_constructor:bilibili.community.service.dm.v1.DanmakuFlag)
}

inline void DanmakuFlag::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.dmid_){int64_t{0}}
    , decltype(_impl_.flag_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DanmakuFlag::~DanmakuFlag() {
  // @@protoc_insertion_point(destructor:bilibili.community.service.dm.v1.DanmakuFlag)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DanmakuFlag::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DanmakuFlag::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DanmakuFlag::Clear() {
// @@protoc_insertion_point(message_clear_start:bilibili.community.service.dm.v1.DanmakuFlag)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.dmid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.flag_) -
      reinterpret_cast<char*>(&_impl_.dmid_)) + sizeof(_impl_.flag_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DanmakuFlag::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 dmid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.dmid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 flag = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DanmakuFlag::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bilibili.community.service.dm.v1.DanmakuFlag)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 dmid = 1;
  if (this->_internal_dmid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_dmid(), target);
  }

  // uint32 flag = 2;
  if (this->_internal_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_flag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bilibili.community.service.dm.v1.DanmakuFlag)
  return target;
}

size_t DanmakuFlag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bilibili.community.service.dm.v1.DanmakuFlag)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 dmid = 1;
  if (this->_internal_dmid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_dmid());
  }

  // uint32 flag = 2;
  if (this->_internal_flag() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_flag());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DanmakuFlag::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DanmakuFlag::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DanmakuFlag::GetClassData() const { return &_class_data_; }


void DanmakuFlag::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DanmakuFlag*>(&to_msg);
  auto& from = static_cast<const DanmakuFlag&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bilibili.community.service.dm.v1.DanmakuFlag)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_dmid() != 0) {
    _this->_internal_set_dmid(from._internal_dmid());
  }
  if (from._internal_flag() != 0) {
    _this->_internal_set_flag(from._internal_flag());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DanmakuFlag::CopyFrom(const DanmakuFlag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bilibili.community.service.dm.v1.DanmakuFlag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DanmakuFlag::IsInitialized() const {
  return true;
}

void DanmakuFlag::InternalSwap(DanmakuFlag* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DanmakuFlag, _impl_.flag_)
      + sizeof(DanmakuFlag::_impl_.flag_)
      - PROTOBUF_FIELD_OFFSET(DanmakuFlag, _impl_.dmid_)>(
          reinterpret_cast<char*>(&_impl_.dmid_),
          reinterpret_cast<char*>(&other->_impl_.dmid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DanmakuFlag::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_reply_2eproto_getter, &descriptor_table_reply_2eproto_once,
      file_level_metadata_reply_2eproto[19]);
}

// ===================================================================

class DanmakuFlagConfig::_Internal {
 public:
};

DanmakuFlagConfig::DanmakuFlagConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bilibili.community.service.dm.v1.DanmakuFlagConfig)
}
DanmakuFlagConfig::DanmakuFlagConfig(const DanmakuFlagConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DanmakuFlagConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.rec_text_){}
    , decltype(_impl_.rec_flag_){}
    , decltype(_impl_.rec_switch_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.rec_text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rec_text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_rec_text().empty()) {
    _this->_impl_.rec_text_.Set(from._internal_rec_text(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.rec_flag_, &from._impl_.rec_flag_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.rec_switch_) -
    reinterpret_cast<char*>(&_impl_.rec_flag_)) + sizeof(_impl_.rec_switch_));
  // @@protoc_insertion_point(copy_constructor:bilibili.community.service.dm.v1.DanmakuFlagConfig)
}

inline void DanmakuFlagConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.rec_text_){}
    , decltype(_impl_.rec_flag_){0}
    , decltype(_impl_.rec_switch_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.rec_text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rec_text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DanmakuFlagConfig::~DanmakuFlagConfig() {
  // @@protoc_insertion_point(destructor:bilibili.community.service.dm.v1.DanmakuFlagConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DanmakuFlagConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.rec_text_.Destroy();
}

void DanmakuFlagConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DanmakuFlagConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:bilibili.community.service.dm.v1.DanmakuFlagConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rec_text_.ClearToEmpty();
  ::memset(&_impl_.rec_flag_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.rec_switch_) -
      reinterpret_cast<char*>(&_impl_.rec_flag_)) + sizeof(_impl_.rec_switch_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DanmakuFlagConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 rec_flag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.rec_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string rec_text = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_rec_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "bilibili.community.service.dm.v1.DanmakuFlagConfig.rec_text"));
        } else
          goto handle_unusual;
        continue;
      // int32 rec_switch = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.rec_switch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DanmakuFlagConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bilibili.community.service.dm.v1.DanmakuFlagConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 rec_flag = 1;
  if (this->_internal_rec_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_rec_flag(), target);
  }

  // string rec_text = 2;
  if (!this->_internal_rec_text().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_rec_text().data(), static_cast<int>(this->_internal_rec_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bilibili.community.service.dm.v1.DanmakuFlagConfig.rec_text");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_rec_text(), target);
  }

  // int32 rec_switch = 3;
  if (this->_internal_rec_switch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_rec_switch(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bilibili.community.service.dm.v1.DanmakuFlagConfig)
  return target;
}

size_t DanmakuFlagConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bilibili.community.service.dm.v1.DanmakuFlagConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string rec_text = 2;
  if (!this->_internal_rec_text().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rec_text());
  }

  // int32 rec_flag = 1;
  if (this->_internal_rec_flag() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_rec_flag());
  }

  // int32 rec_switch = 3;
  if (this->_internal_rec_switch() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_rec_switch());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DanmakuFlagConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DanmakuFlagConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DanmakuFlagConfig::GetClassData() const { return &_class_data_; }


void DanmakuFlagConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DanmakuFlagConfig*>(&to_msg);
  auto& from = static_cast<const DanmakuFlagConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bilibili.community.service.dm.v1.DanmakuFlagConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_rec_text().empty()) {
    _this->_internal_set_rec_text(from._internal_rec_text());
  }
  if (from._internal_rec_flag() != 0) {
    _this->_internal_set_rec_flag(from._internal_rec_flag());
  }
  if (from._internal_rec_switch() != 0) {
    _this->_internal_set_rec_switch(from._internal_rec_switch());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DanmakuFlagConfig::CopyFrom(const DanmakuFlagConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bilibili.community.service.dm.v1.DanmakuFlagConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DanmakuFlagConfig::IsInitialized() const {
  return true;
}

void DanmakuFlagConfig::InternalSwap(DanmakuFlagConfig* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.rec_text_, lhs_arena,
      &other->_impl_.rec_text_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DanmakuFlagConfig, _impl_.rec_switch_)
      + sizeof(DanmakuFlagConfig::_impl_.rec_switch_)
      - PROTOBUF_FIELD_OFFSET(DanmakuFlagConfig, _impl_.rec_flag_)>(
          reinterpret_cast<char*>(&_impl_.rec_flag_),
          reinterpret_cast<char*>(&other->_impl_.rec_flag_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DanmakuFlagConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_reply_2eproto_getter, &descriptor_table_reply_2eproto_once,
      file_level_metadata_reply_2eproto[20]);
}

// ===================================================================

class DanmakuAIFlag::_Internal {
 public:
};

DanmakuAIFlag::DanmakuAIFlag(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bilibili.community.service.dm.v1.DanmakuAIFlag)
}
DanmakuAIFlag::DanmakuAIFlag(const DanmakuAIFlag& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DanmakuAIFlag* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.dm_flags_){from._impl_.dm_flags_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:bilibili.community.service.dm.v1.DanmakuAIFlag)
}

inline void DanmakuAIFlag::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.dm_flags_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DanmakuAIFlag::~DanmakuAIFlag() {
  // @@protoc_insertion_point(destructor:bilibili.community.service.dm.v1.DanmakuAIFlag)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DanmakuAIFlag::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.dm_flags_.~RepeatedPtrField();
}

void DanmakuAIFlag::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DanmakuAIFlag::Clear() {
// @@protoc_insertion_point(message_clear_start:bilibili.community.service.dm.v1.DanmakuAIFlag)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.dm_flags_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DanmakuAIFlag::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .bilibili.community.service.dm.v1.DanmakuFlag dm_flags = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_dm_flags(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DanmakuAIFlag::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bilibili.community.service.dm.v1.DanmakuAIFlag)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .bilibili.community.service.dm.v1.DanmakuFlag dm_flags = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_dm_flags_size()); i < n; i++) {
    const auto& repfield = this->_internal_dm_flags(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bilibili.community.service.dm.v1.DanmakuAIFlag)
  return target;
}

size_t DanmakuAIFlag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bilibili.community.service.dm.v1.DanmakuAIFlag)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bilibili.community.service.dm.v1.DanmakuFlag dm_flags = 1;
  total_size += 1UL * this->_internal_dm_flags_size();
  for (const auto& msg : this->_impl_.dm_flags_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DanmakuAIFlag::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DanmakuAIFlag::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DanmakuAIFlag::GetClassData() const { return &_class_data_; }


void DanmakuAIFlag::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DanmakuAIFlag*>(&to_msg);
  auto& from = static_cast<const DanmakuAIFlag&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bilibili.community.service.dm.v1.DanmakuAIFlag)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.dm_flags_.MergeFrom(from._impl_.dm_flags_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DanmakuAIFlag::CopyFrom(const DanmakuAIFlag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bilibili.community.service.dm.v1.DanmakuAIFlag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DanmakuAIFlag::IsInitialized() const {
  return true;
}

void DanmakuAIFlag::InternalSwap(DanmakuAIFlag* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.dm_flags_.InternalSwap(&other->_impl_.dm_flags_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DanmakuAIFlag::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_reply_2eproto_getter, &descriptor_table_reply_2eproto_once,
      file_level_metadata_reply_2eproto[21]);
}

// ===================================================================

class DanmuPlayerViewConfig::_Internal {
 public:
  static const ::bilibili::community::service::dm::v1::DanmuDefaultPlayerConfig& danmuku_default_player_config(const DanmuPlayerViewConfig* msg);
  static const ::bilibili::community::service::dm::v1::DanmuPlayerConfig& danmuku_player_config(const DanmuPlayerViewConfig* msg);
};

const ::bilibili::community::service::dm::v1::DanmuDefaultPlayerConfig&
DanmuPlayerViewConfig::_Internal::danmuku_default_player_config(const DanmuPlayerViewConfig* msg) {
  return *msg->_impl_.danmuku_default_player_config_;
}
const ::bilibili::community::service::dm::v1::DanmuPlayerConfig&
DanmuPlayerViewConfig::_Internal::danmuku_player_config(const DanmuPlayerViewConfig* msg) {
  return *msg->_impl_.danmuku_player_config_;
}
DanmuPlayerViewConfig::DanmuPlayerViewConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bilibili.community.service.dm.v1.DanmuPlayerViewConfig)
}
DanmuPlayerViewConfig::DanmuPlayerViewConfig(const DanmuPlayerViewConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DanmuPlayerViewConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.danmuku_player_dynamic_config_){from._impl_.danmuku_player_dynamic_config_}
    , decltype(_impl_.danmuku_default_player_config_){nullptr}
    , decltype(_impl_.danmuku_player_config_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_danmuku_default_player_config()) {
    _this->_impl_.danmuku_default_player_config_ = new ::bilibili::community::service::dm::v1::DanmuDefaultPlayerConfig(*from._impl_.danmuku_default_player_config_);
  }
  if (from._internal_has_danmuku_player_config()) {
    _this->_impl_.danmuku_player_config_ = new ::bilibili::community::service::dm::v1::DanmuPlayerConfig(*from._impl_.danmuku_player_config_);
  }
  // @@protoc_insertion_point(copy_constructor:bilibili.community.service.dm.v1.DanmuPlayerViewConfig)
}

inline void DanmuPlayerViewConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.danmuku_player_dynamic_config_){arena}
    , decltype(_impl_.danmuku_default_player_config_){nullptr}
    , decltype(_impl_.danmuku_player_config_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DanmuPlayerViewConfig::~DanmuPlayerViewConfig() {
  // @@protoc_insertion_point(destructor:bilibili.community.service.dm.v1.DanmuPlayerViewConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DanmuPlayerViewConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.danmuku_player_dynamic_config_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.danmuku_default_player_config_;
  if (this != internal_default_instance()) delete _impl_.danmuku_player_config_;
}

void DanmuPlayerViewConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DanmuPlayerViewConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:bilibili.community.service.dm.v1.DanmuPlayerViewConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.danmuku_player_dynamic_config_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.danmuku_default_player_config_ != nullptr) {
    delete _impl_.danmuku_default_player_config_;
  }
  _impl_.danmuku_default_player_config_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.danmuku_player_config_ != nullptr) {
    delete _impl_.danmuku_player_config_;
  }
  _impl_.danmuku_player_config_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DanmuPlayerViewConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .bilibili.community.service.dm.v1.DanmuDefaultPlayerConfig danmuku_default_player_config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_danmuku_default_player_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .bilibili.community.service.dm.v1.DanmuPlayerConfig danmuku_player_config = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_danmuku_player_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .bilibili.community.service.dm.v1.DanmuPlayerDynamicConfig danmuku_player_dynamic_config = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_danmuku_player_dynamic_config(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DanmuPlayerViewConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bilibili.community.service.dm.v1.DanmuPlayerViewConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .bilibili.community.service.dm.v1.DanmuDefaultPlayerConfig danmuku_default_player_config = 1;
  if (this->_internal_has_danmuku_default_player_config()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::danmuku_default_player_config(this),
        _Internal::danmuku_default_player_config(this).GetCachedSize(), target, stream);
  }

  // .bilibili.community.service.dm.v1.DanmuPlayerConfig danmuku_player_config = 2;
  if (this->_internal_has_danmuku_player_config()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::danmuku_player_config(this),
        _Internal::danmuku_player_config(this).GetCachedSize(), target, stream);
  }

  // repeated .bilibili.community.service.dm.v1.DanmuPlayerDynamicConfig danmuku_player_dynamic_config = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_danmuku_player_dynamic_config_size()); i < n; i++) {
    const auto& repfield = this->_internal_danmuku_player_dynamic_config(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bilibili.community.service.dm.v1.DanmuPlayerViewConfig)
  return target;
}

size_t DanmuPlayerViewConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bilibili.community.service.dm.v1.DanmuPlayerViewConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bilibili.community.service.dm.v1.DanmuPlayerDynamicConfig danmuku_player_dynamic_config = 3;
  total_size += 1UL * this->_internal_danmuku_player_dynamic_config_size();
  for (const auto& msg : this->_impl_.danmuku_player_dynamic_config_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .bilibili.community.service.dm.v1.DanmuDefaultPlayerConfig danmuku_default_player_config = 1;
  if (this->_internal_has_danmuku_default_player_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.danmuku_default_player_config_);
  }

  // .bilibili.community.service.dm.v1.DanmuPlayerConfig danmuku_player_config = 2;
  if (this->_internal_has_danmuku_player_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.danmuku_player_config_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DanmuPlayerViewConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DanmuPlayerViewConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DanmuPlayerViewConfig::GetClassData() const { return &_class_data_; }


void DanmuPlayerViewConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DanmuPlayerViewConfig*>(&to_msg);
  auto& from = static_cast<const DanmuPlayerViewConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bilibili.community.service.dm.v1.DanmuPlayerViewConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.danmuku_player_dynamic_config_.MergeFrom(from._impl_.danmuku_player_dynamic_config_);
  if (from._internal_has_danmuku_default_player_config()) {
    _this->_internal_mutable_danmuku_default_player_config()->::bilibili::community::service::dm::v1::DanmuDefaultPlayerConfig::MergeFrom(
        from._internal_danmuku_default_player_config());
  }
  if (from._internal_has_danmuku_player_config()) {
    _this->_internal_mutable_danmuku_player_config()->::bilibili::community::service::dm::v1::DanmuPlayerConfig::MergeFrom(
        from._internal_danmuku_player_config());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DanmuPlayerViewConfig::CopyFrom(const DanmuPlayerViewConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bilibili.community.service.dm.v1.DanmuPlayerViewConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DanmuPlayerViewConfig::IsInitialized() const {
  return true;
}

void DanmuPlayerViewConfig::InternalSwap(DanmuPlayerViewConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.danmuku_player_dynamic_config_.InternalSwap(&other->_impl_.danmuku_player_dynamic_config_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DanmuPlayerViewConfig, _impl_.danmuku_player_config_)
      + sizeof(DanmuPlayerViewConfig::_impl_.danmuku_player_config_)
      - PROTOBUF_FIELD_OFFSET(DanmuPlayerViewConfig, _impl_.danmuku_default_player_config_)>(
          reinterpret_cast<char*>(&_impl_.danmuku_default_player_config_),
          reinterpret_cast<char*>(&other->_impl_.danmuku_default_player_config_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DanmuPlayerViewConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_reply_2eproto_getter, &descriptor_table_reply_2eproto_once,
      file_level_metadata_reply_2eproto[22]);
}

// ===================================================================

class DanmuDefaultPlayerConfig::_Internal {
 public:
};

DanmuDefaultPlayerConfig::DanmuDefaultPlayerConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bilibili.community.service.dm.v1.DanmuDefaultPlayerConfig)
}
DanmuDefaultPlayerConfig::DanmuDefaultPlayerConfig(const DanmuDefaultPlayerConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DanmuDefaultPlayerConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.player_danmaku_use_default_config_){}
    , decltype(_impl_.player_danmaku_ai_recommended_switch_){}
    , decltype(_impl_.player_danmaku_blocktop_){}
    , decltype(_impl_.player_danmaku_blockscroll_){}
    , decltype(_impl_.player_danmaku_ai_recommended_level_){}
    , decltype(_impl_.player_danmaku_blockbottom_){}
    , decltype(_impl_.player_danmaku_blockcolorful_){}
    , decltype(_impl_.player_danmaku_blockrepeat_){}
    , decltype(_impl_.player_danmaku_blockspecial_){}
    , decltype(_impl_.player_danmaku_opacity_){}
    , decltype(_impl_.player_danmaku_scalingfactor_){}
    , decltype(_impl_.player_danmaku_domain_){}
    , decltype(_impl_.player_danmaku_speed_){}
    , decltype(_impl_.inline_player_danmaku_switch_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.player_danmaku_use_default_config_, &from._impl_.player_danmaku_use_default_config_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.inline_player_danmaku_switch_) -
    reinterpret_cast<char*>(&_impl_.player_danmaku_use_default_config_)) + sizeof(_impl_.inline_player_danmaku_switch_));
  // @@protoc_insertion_point(copy_constructor:bilibili.community.service.dm.v1.DanmuDefaultPlayerConfig)
}

inline void DanmuDefaultPlayerConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.player_danmaku_use_default_config_){false}
    , decltype(_impl_.player_danmaku_ai_recommended_switch_){false}
    , decltype(_impl_.player_danmaku_blocktop_){false}
    , decltype(_impl_.player_danmaku_blockscroll_){false}
    , decltype(_impl_.player_danmaku_ai_recommended_level_){0}
    , decltype(_impl_.player_danmaku_blockbottom_){false}
    , decltype(_impl_.player_danmaku_blockcolorful_){false}
    , decltype(_impl_.player_danmaku_blockrepeat_){false}
    , decltype(_impl_.player_danmaku_blockspecial_){false}
    , decltype(_impl_.player_danmaku_opacity_){0}
    , decltype(_impl_.player_danmaku_scalingfactor_){0}
    , decltype(_impl_.player_danmaku_domain_){0}
    , decltype(_impl_.player_danmaku_speed_){0}
    , decltype(_impl_.inline_player_danmaku_switch_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DanmuDefaultPlayerConfig::~DanmuDefaultPlayerConfig() {
  // @@protoc_insertion_point(destructor:bilibili.community.service.dm.v1.DanmuDefaultPlayerConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DanmuDefaultPlayerConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DanmuDefaultPlayerConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DanmuDefaultPlayerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:bilibili.community.service.dm.v1.DanmuDefaultPlayerConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.player_danmaku_use_default_config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.inline_player_danmaku_switch_) -
      reinterpret_cast<char*>(&_impl_.player_danmaku_use_default_config_)) + sizeof(_impl_.inline_player_danmaku_switch_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DanmuDefaultPlayerConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool player_danmaku_use_default_config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.player_danmaku_use_default_config_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool player_danmaku_ai_recommended_switch = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.player_danmaku_ai_recommended_switch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 player_danmaku_ai_recommended_level = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.player_danmaku_ai_recommended_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool player_danmaku_blocktop = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.player_danmaku_blocktop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool player_danmaku_blockscroll = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.player_danmaku_blockscroll_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool player_danmaku_blockbottom = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.player_danmaku_blockbottom_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool player_danmaku_blockcolorful = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.player_danmaku_blockcolorful_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool player_danmaku_blockrepeat = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.player_danmaku_blockrepeat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool player_danmaku_blockspecial = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.player_danmaku_blockspecial_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float player_danmaku_opacity = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 101)) {
          _impl_.player_danmaku_opacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float player_danmaku_scalingfactor = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 109)) {
          _impl_.player_danmaku_scalingfactor_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float player_danmaku_domain = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 117)) {
          _impl_.player_danmaku_domain_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // int32 player_danmaku_speed = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.player_danmaku_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool inline_player_danmaku_switch = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.inline_player_danmaku_switch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DanmuDefaultPlayerConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bilibili.community.service.dm.v1.DanmuDefaultPlayerConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool player_danmaku_use_default_config = 1;
  if (this->_internal_player_danmaku_use_default_config() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_player_danmaku_use_default_config(), target);
  }

  // bool player_danmaku_ai_recommended_switch = 4;
  if (this->_internal_player_danmaku_ai_recommended_switch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_player_danmaku_ai_recommended_switch(), target);
  }

  // int32 player_danmaku_ai_recommended_level = 5;
  if (this->_internal_player_danmaku_ai_recommended_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_player_danmaku_ai_recommended_level(), target);
  }

  // bool player_danmaku_blocktop = 6;
  if (this->_internal_player_danmaku_blocktop() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_player_danmaku_blocktop(), target);
  }

  // bool player_danmaku_blockscroll = 7;
  if (this->_internal_player_danmaku_blockscroll() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_player_danmaku_blockscroll(), target);
  }

  // bool player_danmaku_blockbottom = 8;
  if (this->_internal_player_danmaku_blockbottom() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_player_danmaku_blockbottom(), target);
  }

  // bool player_danmaku_blockcolorful = 9;
  if (this->_internal_player_danmaku_blockcolorful() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_player_danmaku_blockcolorful(), target);
  }

  // bool player_danmaku_blockrepeat = 10;
  if (this->_internal_player_danmaku_blockrepeat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_player_danmaku_blockrepeat(), target);
  }

  // bool player_danmaku_blockspecial = 11;
  if (this->_internal_player_danmaku_blockspecial() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_player_danmaku_blockspecial(), target);
  }

  // float player_danmaku_opacity = 12;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_player_danmaku_opacity = this->_internal_player_danmaku_opacity();
  uint32_t raw_player_danmaku_opacity;
  memcpy(&raw_player_danmaku_opacity, &tmp_player_danmaku_opacity, sizeof(tmp_player_danmaku_opacity));
  if (raw_player_danmaku_opacity != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(12, this->_internal_player_danmaku_opacity(), target);
  }

  // float player_danmaku_scalingfactor = 13;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_player_danmaku_scalingfactor = this->_internal_player_danmaku_scalingfactor();
  uint32_t raw_player_danmaku_scalingfactor;
  memcpy(&raw_player_danmaku_scalingfactor, &tmp_player_danmaku_scalingfactor, sizeof(tmp_player_danmaku_scalingfactor));
  if (raw_player_danmaku_scalingfactor != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(13, this->_internal_player_danmaku_scalingfactor(), target);
  }

  // float player_danmaku_domain = 14;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_player_danmaku_domain = this->_internal_player_danmaku_domain();
  uint32_t raw_player_danmaku_domain;
  memcpy(&raw_player_danmaku_domain, &tmp_player_danmaku_domain, sizeof(tmp_player_danmaku_domain));
  if (raw_player_danmaku_domain != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(14, this->_internal_player_danmaku_domain(), target);
  }

  // int32 player_danmaku_speed = 15;
  if (this->_internal_player_danmaku_speed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(15, this->_internal_player_danmaku_speed(), target);
  }

  // bool inline_player_danmaku_switch = 16;
  if (this->_internal_inline_player_danmaku_switch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(16, this->_internal_inline_player_danmaku_switch(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bilibili.community.service.dm.v1.DanmuDefaultPlayerConfig)
  return target;
}

size_t DanmuDefaultPlayerConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bilibili.community.service.dm.v1.DanmuDefaultPlayerConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool player_danmaku_use_default_config = 1;
  if (this->_internal_player_danmaku_use_default_config() != 0) {
    total_size += 1 + 1;
  }

  // bool player_danmaku_ai_recommended_switch = 4;
  if (this->_internal_player_danmaku_ai_recommended_switch() != 0) {
    total_size += 1 + 1;
  }

  // bool player_danmaku_blocktop = 6;
  if (this->_internal_player_danmaku_blocktop() != 0) {
    total_size += 1 + 1;
  }

  // bool player_danmaku_blockscroll = 7;
  if (this->_internal_player_danmaku_blockscroll() != 0) {
    total_size += 1 + 1;
  }

  // int32 player_danmaku_ai_recommended_level = 5;
  if (this->_internal_player_danmaku_ai_recommended_level() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_danmaku_ai_recommended_level());
  }

  // bool player_danmaku_blockbottom = 8;
  if (this->_internal_player_danmaku_blockbottom() != 0) {
    total_size += 1 + 1;
  }

  // bool player_danmaku_blockcolorful = 9;
  if (this->_internal_player_danmaku_blockcolorful() != 0) {
    total_size += 1 + 1;
  }

  // bool player_danmaku_blockrepeat = 10;
  if (this->_internal_player_danmaku_blockrepeat() != 0) {
    total_size += 1 + 1;
  }

  // bool player_danmaku_blockspecial = 11;
  if (this->_internal_player_danmaku_blockspecial() != 0) {
    total_size += 1 + 1;
  }

  // float player_danmaku_opacity = 12;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_player_danmaku_opacity = this->_internal_player_danmaku_opacity();
  uint32_t raw_player_danmaku_opacity;
  memcpy(&raw_player_danmaku_opacity, &tmp_player_danmaku_opacity, sizeof(tmp_player_danmaku_opacity));
  if (raw_player_danmaku_opacity != 0) {
    total_size += 1 + 4;
  }

  // float player_danmaku_scalingfactor = 13;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_player_danmaku_scalingfactor = this->_internal_player_danmaku_scalingfactor();
  uint32_t raw_player_danmaku_scalingfactor;
  memcpy(&raw_player_danmaku_scalingfactor, &tmp_player_danmaku_scalingfactor, sizeof(tmp_player_danmaku_scalingfactor));
  if (raw_player_danmaku_scalingfactor != 0) {
    total_size += 1 + 4;
  }

  // float player_danmaku_domain = 14;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_player_danmaku_domain = this->_internal_player_danmaku_domain();
  uint32_t raw_player_danmaku_domain;
  memcpy(&raw_player_danmaku_domain, &tmp_player_danmaku_domain, sizeof(tmp_player_danmaku_domain));
  if (raw_player_danmaku_domain != 0) {
    total_size += 1 + 4;
  }

  // int32 player_danmaku_speed = 15;
  if (this->_internal_player_danmaku_speed() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_danmaku_speed());
  }

  // bool inline_player_danmaku_switch = 16;
  if (this->_internal_inline_player_danmaku_switch() != 0) {
    total_size += 2 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DanmuDefaultPlayerConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DanmuDefaultPlayerConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DanmuDefaultPlayerConfig::GetClassData() const { return &_class_data_; }


void DanmuDefaultPlayerConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DanmuDefaultPlayerConfig*>(&to_msg);
  auto& from = static_cast<const DanmuDefaultPlayerConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bilibili.community.service.dm.v1.DanmuDefaultPlayerConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_player_danmaku_use_default_config() != 0) {
    _this->_internal_set_player_danmaku_use_default_config(from._internal_player_danmaku_use_default_config());
  }
  if (from._internal_player_danmaku_ai_recommended_switch() != 0) {
    _this->_internal_set_player_danmaku_ai_recommended_switch(from._internal_player_danmaku_ai_recommended_switch());
  }
  if (from._internal_player_danmaku_blocktop() != 0) {
    _this->_internal_set_player_danmaku_blocktop(from._internal_player_danmaku_blocktop());
  }
  if (from._internal_player_danmaku_blockscroll() != 0) {
    _this->_internal_set_player_danmaku_blockscroll(from._internal_player_danmaku_blockscroll());
  }
  if (from._internal_player_danmaku_ai_recommended_level() != 0) {
    _this->_internal_set_player_danmaku_ai_recommended_level(from._internal_player_danmaku_ai_recommended_level());
  }
  if (from._internal_player_danmaku_blockbottom() != 0) {
    _this->_internal_set_player_danmaku_blockbottom(from._internal_player_danmaku_blockbottom());
  }
  if (from._internal_player_danmaku_blockcolorful() != 0) {
    _this->_internal_set_player_danmaku_blockcolorful(from._internal_player_danmaku_blockcolorful());
  }
  if (from._internal_player_danmaku_blockrepeat() != 0) {
    _this->_internal_set_player_danmaku_blockrepeat(from._internal_player_danmaku_blockrepeat());
  }
  if (from._internal_player_danmaku_blockspecial() != 0) {
    _this->_internal_set_player_danmaku_blockspecial(from._internal_player_danmaku_blockspecial());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_player_danmaku_opacity = from._internal_player_danmaku_opacity();
  uint32_t raw_player_danmaku_opacity;
  memcpy(&raw_player_danmaku_opacity, &tmp_player_danmaku_opacity, sizeof(tmp_player_danmaku_opacity));
  if (raw_player_danmaku_opacity != 0) {
    _this->_internal_set_player_danmaku_opacity(from._internal_player_danmaku_opacity());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_player_danmaku_scalingfactor = from._internal_player_danmaku_scalingfactor();
  uint32_t raw_player_danmaku_scalingfactor;
  memcpy(&raw_player_danmaku_scalingfactor, &tmp_player_danmaku_scalingfactor, sizeof(tmp_player_danmaku_scalingfactor));
  if (raw_player_danmaku_scalingfactor != 0) {
    _this->_internal_set_player_danmaku_scalingfactor(from._internal_player_danmaku_scalingfactor());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_player_danmaku_domain = from._internal_player_danmaku_domain();
  uint32_t raw_player_danmaku_domain;
  memcpy(&raw_player_danmaku_domain, &tmp_player_danmaku_domain, sizeof(tmp_player_danmaku_domain));
  if (raw_player_danmaku_domain != 0) {
    _this->_internal_set_player_danmaku_domain(from._internal_player_danmaku_domain());
  }
  if (from._internal_player_danmaku_speed() != 0) {
    _this->_internal_set_player_danmaku_speed(from._internal_player_danmaku_speed());
  }
  if (from._internal_inline_player_danmaku_switch() != 0) {
    _this->_internal_set_inline_player_danmaku_switch(from._internal_inline_player_danmaku_switch());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DanmuDefaultPlayerConfig::CopyFrom(const DanmuDefaultPlayerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bilibili.community.service.dm.v1.DanmuDefaultPlayerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DanmuDefaultPlayerConfig::IsInitialized() const {
  return true;
}

void DanmuDefaultPlayerConfig::InternalSwap(DanmuDefaultPlayerConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DanmuDefaultPlayerConfig, _impl_.inline_player_danmaku_switch_)
      + sizeof(DanmuDefaultPlayerConfig::_impl_.inline_player_danmaku_switch_)
      - PROTOBUF_FIELD_OFFSET(DanmuDefaultPlayerConfig, _impl_.player_danmaku_use_default_config_)>(
          reinterpret_cast<char*>(&_impl_.player_danmaku_use_default_config_),
          reinterpret_cast<char*>(&other->_impl_.player_danmaku_use_default_config_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DanmuDefaultPlayerConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_reply_2eproto_getter, &descriptor_table_reply_2eproto_once,
      file_level_metadata_reply_2eproto[23]);
}

// ===================================================================

class DanmuPlayerConfig::_Internal {
 public:
};

DanmuPlayerConfig::DanmuPlayerConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bilibili.community.service.dm.v1.DanmuPlayerConfig)
}
DanmuPlayerConfig::DanmuPlayerConfig(const DanmuPlayerConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DanmuPlayerConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.player_danmaku_switch_){}
    , decltype(_impl_.player_danmaku_switch_save_){}
    , decltype(_impl_.player_danmaku_use_default_config_){}
    , decltype(_impl_.player_danmaku_ai_recommended_switch_){}
    , decltype(_impl_.player_danmaku_ai_recommended_level_){}
    , decltype(_impl_.player_danmaku_blocktop_){}
    , decltype(_impl_.player_danmaku_blockscroll_){}
    , decltype(_impl_.player_danmaku_blockbottom_){}
    , decltype(_impl_.player_danmaku_blockcolorful_){}
    , decltype(_impl_.player_danmaku_opacity_){}
    , decltype(_impl_.player_danmaku_scalingfactor_){}
    , decltype(_impl_.player_danmaku_blockrepeat_){}
    , decltype(_impl_.player_danmaku_blockspecial_){}
    , decltype(_impl_.player_danmaku_enableblocklist_){}
    , decltype(_impl_.inline_player_danmaku_switch_){}
    , decltype(_impl_.player_danmaku_domain_){}
    , decltype(_impl_.player_danmaku_speed_){}
    , decltype(_impl_.inline_player_danmaku_config_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.player_danmaku_switch_, &from._impl_.player_danmaku_switch_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.inline_player_danmaku_config_) -
    reinterpret_cast<char*>(&_impl_.player_danmaku_switch_)) + sizeof(_impl_.inline_player_danmaku_config_));
  // @@protoc_insertion_point(copy_constructor:bilibili.community.service.dm.v1.DanmuPlayerConfig)
}

inline void DanmuPlayerConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.player_danmaku_switch_){false}
    , decltype(_impl_.player_danmaku_switch_save_){false}
    , decltype(_impl_.player_danmaku_use_default_config_){false}
    , decltype(_impl_.player_danmaku_ai_recommended_switch_){false}
    , decltype(_impl_.player_danmaku_ai_recommended_level_){0}
    , decltype(_impl_.player_danmaku_blocktop_){false}
    , decltype(_impl_.player_danmaku_blockscroll_){false}
    , decltype(_impl_.player_danmaku_blockbottom_){false}
    , decltype(_impl_.player_danmaku_blockcolorful_){false}
    , decltype(_impl_.player_danmaku_opacity_){0}
    , decltype(_impl_.player_danmaku_scalingfactor_){0}
    , decltype(_impl_.player_danmaku_blockrepeat_){false}
    , decltype(_impl_.player_danmaku_blockspecial_){false}
    , decltype(_impl_.player_danmaku_enableblocklist_){false}
    , decltype(_impl_.inline_player_danmaku_switch_){false}
    , decltype(_impl_.player_danmaku_domain_){0}
    , decltype(_impl_.player_danmaku_speed_){0}
    , decltype(_impl_.inline_player_danmaku_config_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DanmuPlayerConfig::~DanmuPlayerConfig() {
  // @@protoc_insertion_point(destructor:bilibili.community.service.dm.v1.DanmuPlayerConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DanmuPlayerConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DanmuPlayerConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DanmuPlayerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:bilibili.community.service.dm.v1.DanmuPlayerConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.player_danmaku_switch_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.inline_player_danmaku_config_) -
      reinterpret_cast<char*>(&_impl_.player_danmaku_switch_)) + sizeof(_impl_.inline_player_danmaku_config_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DanmuPlayerConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool player_danmaku_switch = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.player_danmaku_switch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool player_danmaku_switch_save = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.player_danmaku_switch_save_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool player_danmaku_use_default_config = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.player_danmaku_use_default_config_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool player_danmaku_ai_recommended_switch = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.player_danmaku_ai_recommended_switch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 player_danmaku_ai_recommended_level = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.player_danmaku_ai_recommended_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool player_danmaku_blocktop = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.player_danmaku_blocktop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool player_danmaku_blockscroll = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.player_danmaku_blockscroll_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool player_danmaku_blockbottom = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.player_danmaku_blockbottom_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool player_danmaku_blockcolorful = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.player_danmaku_blockcolorful_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool player_danmaku_blockrepeat = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.player_danmaku_blockrepeat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool player_danmaku_blockspecial = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.player_danmaku_blockspecial_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float player_danmaku_opacity = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 101)) {
          _impl_.player_danmaku_opacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float player_danmaku_scalingfactor = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 109)) {
          _impl_.player_danmaku_scalingfactor_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float player_danmaku_domain = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 117)) {
          _impl_.player_danmaku_domain_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // int32 player_danmaku_speed = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.player_danmaku_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool player_danmaku_enableblocklist = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.player_danmaku_enableblocklist_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool inline_player_danmaku_switch = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.inline_player_danmaku_switch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 inline_player_danmaku_config = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _impl_.inline_player_danmaku_config_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DanmuPlayerConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bilibili.community.service.dm.v1.DanmuPlayerConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool player_danmaku_switch = 1;
  if (this->_internal_player_danmaku_switch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_player_danmaku_switch(), target);
  }

  // bool player_danmaku_switch_save = 2;
  if (this->_internal_player_danmaku_switch_save() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_player_danmaku_switch_save(), target);
  }

  // bool player_danmaku_use_default_config = 3;
  if (this->_internal_player_danmaku_use_default_config() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_player_danmaku_use_default_config(), target);
  }

  // bool player_danmaku_ai_recommended_switch = 4;
  if (this->_internal_player_danmaku_ai_recommended_switch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_player_danmaku_ai_recommended_switch(), target);
  }

  // int32 player_danmaku_ai_recommended_level = 5;
  if (this->_internal_player_danmaku_ai_recommended_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_player_danmaku_ai_recommended_level(), target);
  }

  // bool player_danmaku_blocktop = 6;
  if (this->_internal_player_danmaku_blocktop() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_player_danmaku_blocktop(), target);
  }

  // bool player_danmaku_blockscroll = 7;
  if (this->_internal_player_danmaku_blockscroll() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_player_danmaku_blockscroll(), target);
  }

  // bool player_danmaku_blockbottom = 8;
  if (this->_internal_player_danmaku_blockbottom() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_player_danmaku_blockbottom(), target);
  }

  // bool player_danmaku_blockcolorful = 9;
  if (this->_internal_player_danmaku_blockcolorful() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_player_danmaku_blockcolorful(), target);
  }

  // bool player_danmaku_blockrepeat = 10;
  if (this->_internal_player_danmaku_blockrepeat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_player_danmaku_blockrepeat(), target);
  }

  // bool player_danmaku_blockspecial = 11;
  if (this->_internal_player_danmaku_blockspecial() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_player_danmaku_blockspecial(), target);
  }

  // float player_danmaku_opacity = 12;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_player_danmaku_opacity = this->_internal_player_danmaku_opacity();
  uint32_t raw_player_danmaku_opacity;
  memcpy(&raw_player_danmaku_opacity, &tmp_player_danmaku_opacity, sizeof(tmp_player_danmaku_opacity));
  if (raw_player_danmaku_opacity != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(12, this->_internal_player_danmaku_opacity(), target);
  }

  // float player_danmaku_scalingfactor = 13;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_player_danmaku_scalingfactor = this->_internal_player_danmaku_scalingfactor();
  uint32_t raw_player_danmaku_scalingfactor;
  memcpy(&raw_player_danmaku_scalingfactor, &tmp_player_danmaku_scalingfactor, sizeof(tmp_player_danmaku_scalingfactor));
  if (raw_player_danmaku_scalingfactor != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(13, this->_internal_player_danmaku_scalingfactor(), target);
  }

  // float player_danmaku_domain = 14;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_player_danmaku_domain = this->_internal_player_danmaku_domain();
  uint32_t raw_player_danmaku_domain;
  memcpy(&raw_player_danmaku_domain, &tmp_player_danmaku_domain, sizeof(tmp_player_danmaku_domain));
  if (raw_player_danmaku_domain != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(14, this->_internal_player_danmaku_domain(), target);
  }

  // int32 player_danmaku_speed = 15;
  if (this->_internal_player_danmaku_speed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(15, this->_internal_player_danmaku_speed(), target);
  }

  // bool player_danmaku_enableblocklist = 16;
  if (this->_internal_player_danmaku_enableblocklist() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(16, this->_internal_player_danmaku_enableblocklist(), target);
  }

  // bool inline_player_danmaku_switch = 17;
  if (this->_internal_inline_player_danmaku_switch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(17, this->_internal_inline_player_danmaku_switch(), target);
  }

  // int32 inline_player_danmaku_config = 18;
  if (this->_internal_inline_player_danmaku_config() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(18, this->_internal_inline_player_danmaku_config(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bilibili.community.service.dm.v1.DanmuPlayerConfig)
  return target;
}

size_t DanmuPlayerConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bilibili.community.service.dm.v1.DanmuPlayerConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool player_danmaku_switch = 1;
  if (this->_internal_player_danmaku_switch() != 0) {
    total_size += 1 + 1;
  }

  // bool player_danmaku_switch_save = 2;
  if (this->_internal_player_danmaku_switch_save() != 0) {
    total_size += 1 + 1;
  }

  // bool player_danmaku_use_default_config = 3;
  if (this->_internal_player_danmaku_use_default_config() != 0) {
    total_size += 1 + 1;
  }

  // bool player_danmaku_ai_recommended_switch = 4;
  if (this->_internal_player_danmaku_ai_recommended_switch() != 0) {
    total_size += 1 + 1;
  }

  // int32 player_danmaku_ai_recommended_level = 5;
  if (this->_internal_player_danmaku_ai_recommended_level() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_danmaku_ai_recommended_level());
  }

  // bool player_danmaku_blocktop = 6;
  if (this->_internal_player_danmaku_blocktop() != 0) {
    total_size += 1 + 1;
  }

  // bool player_danmaku_blockscroll = 7;
  if (this->_internal_player_danmaku_blockscroll() != 0) {
    total_size += 1 + 1;
  }

  // bool player_danmaku_blockbottom = 8;
  if (this->_internal_player_danmaku_blockbottom() != 0) {
    total_size += 1 + 1;
  }

  // bool player_danmaku_blockcolorful = 9;
  if (this->_internal_player_danmaku_blockcolorful() != 0) {
    total_size += 1 + 1;
  }

  // float player_danmaku_opacity = 12;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_player_danmaku_opacity = this->_internal_player_danmaku_opacity();
  uint32_t raw_player_danmaku_opacity;
  memcpy(&raw_player_danmaku_opacity, &tmp_player_danmaku_opacity, sizeof(tmp_player_danmaku_opacity));
  if (raw_player_danmaku_opacity != 0) {
    total_size += 1 + 4;
  }

  // float player_danmaku_scalingfactor = 13;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_player_danmaku_scalingfactor = this->_internal_player_danmaku_scalingfactor();
  uint32_t raw_player_danmaku_scalingfactor;
  memcpy(&raw_player_danmaku_scalingfactor, &tmp_player_danmaku_scalingfactor, sizeof(tmp_player_danmaku_scalingfactor));
  if (raw_player_danmaku_scalingfactor != 0) {
    total_size += 1 + 4;
  }

  // bool player_danmaku_blockrepeat = 10;
  if (this->_internal_player_danmaku_blockrepeat() != 0) {
    total_size += 1 + 1;
  }

  // bool player_danmaku_blockspecial = 11;
  if (this->_internal_player_danmaku_blockspecial() != 0) {
    total_size += 1 + 1;
  }

  // bool player_danmaku_enableblocklist = 16;
  if (this->_internal_player_danmaku_enableblocklist() != 0) {
    total_size += 2 + 1;
  }

  // bool inline_player_danmaku_switch = 17;
  if (this->_internal_inline_player_danmaku_switch() != 0) {
    total_size += 2 + 1;
  }

  // float player_danmaku_domain = 14;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_player_danmaku_domain = this->_internal_player_danmaku_domain();
  uint32_t raw_player_danmaku_domain;
  memcpy(&raw_player_danmaku_domain, &tmp_player_danmaku_domain, sizeof(tmp_player_danmaku_domain));
  if (raw_player_danmaku_domain != 0) {
    total_size += 1 + 4;
  }

  // int32 player_danmaku_speed = 15;
  if (this->_internal_player_danmaku_speed() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_danmaku_speed());
  }

  // int32 inline_player_danmaku_config = 18;
  if (this->_internal_inline_player_danmaku_config() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_inline_player_danmaku_config());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DanmuPlayerConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DanmuPlayerConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DanmuPlayerConfig::GetClassData() const { return &_class_data_; }


void DanmuPlayerConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DanmuPlayerConfig*>(&to_msg);
  auto& from = static_cast<const DanmuPlayerConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bilibili.community.service.dm.v1.DanmuPlayerConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_player_danmaku_switch() != 0) {
    _this->_internal_set_player_danmaku_switch(from._internal_player_danmaku_switch());
  }
  if (from._internal_player_danmaku_switch_save() != 0) {
    _this->_internal_set_player_danmaku_switch_save(from._internal_player_danmaku_switch_save());
  }
  if (from._internal_player_danmaku_use_default_config() != 0) {
    _this->_internal_set_player_danmaku_use_default_config(from._internal_player_danmaku_use_default_config());
  }
  if (from._internal_player_danmaku_ai_recommended_switch() != 0) {
    _this->_internal_set_player_danmaku_ai_recommended_switch(from._internal_player_danmaku_ai_recommended_switch());
  }
  if (from._internal_player_danmaku_ai_recommended_level() != 0) {
    _this->_internal_set_player_danmaku_ai_recommended_level(from._internal_player_danmaku_ai_recommended_level());
  }
  if (from._internal_player_danmaku_blocktop() != 0) {
    _this->_internal_set_player_danmaku_blocktop(from._internal_player_danmaku_blocktop());
  }
  if (from._internal_player_danmaku_blockscroll() != 0) {
    _this->_internal_set_player_danmaku_blockscroll(from._internal_player_danmaku_blockscroll());
  }
  if (from._internal_player_danmaku_blockbottom() != 0) {
    _this->_internal_set_player_danmaku_blockbottom(from._internal_player_danmaku_blockbottom());
  }
  if (from._internal_player_danmaku_blockcolorful() != 0) {
    _this->_internal_set_player_danmaku_blockcolorful(from._internal_player_danmaku_blockcolorful());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_player_danmaku_opacity = from._internal_player_danmaku_opacity();
  uint32_t raw_player_danmaku_opacity;
  memcpy(&raw_player_danmaku_opacity, &tmp_player_danmaku_opacity, sizeof(tmp_player_danmaku_opacity));
  if (raw_player_danmaku_opacity != 0) {
    _this->_internal_set_player_danmaku_opacity(from._internal_player_danmaku_opacity());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_player_danmaku_scalingfactor = from._internal_player_danmaku_scalingfactor();
  uint32_t raw_player_danmaku_scalingfactor;
  memcpy(&raw_player_danmaku_scalingfactor, &tmp_player_danmaku_scalingfactor, sizeof(tmp_player_danmaku_scalingfactor));
  if (raw_player_danmaku_scalingfactor != 0) {
    _this->_internal_set_player_danmaku_scalingfactor(from._internal_player_danmaku_scalingfactor());
  }
  if (from._internal_player_danmaku_blockrepeat() != 0) {
    _this->_internal_set_player_danmaku_blockrepeat(from._internal_player_danmaku_blockrepeat());
  }
  if (from._internal_player_danmaku_blockspecial() != 0) {
    _this->_internal_set_player_danmaku_blockspecial(from._internal_player_danmaku_blockspecial());
  }
  if (from._internal_player_danmaku_enableblocklist() != 0) {
    _this->_internal_set_player_danmaku_enableblocklist(from._internal_player_danmaku_enableblocklist());
  }
  if (from._internal_inline_player_danmaku_switch() != 0) {
    _this->_internal_set_inline_player_danmaku_switch(from._internal_inline_player_danmaku_switch());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_player_danmaku_domain = from._internal_player_danmaku_domain();
  uint32_t raw_player_danmaku_domain;
  memcpy(&raw_player_danmaku_domain, &tmp_player_danmaku_domain, sizeof(tmp_player_danmaku_domain));
  if (raw_player_danmaku_domain != 0) {
    _this->_internal_set_player_danmaku_domain(from._internal_player_danmaku_domain());
  }
  if (from._internal_player_danmaku_speed() != 0) {
    _this->_internal_set_player_danmaku_speed(from._internal_player_danmaku_speed());
  }
  if (from._internal_inline_player_danmaku_config() != 0) {
    _this->_internal_set_inline_player_danmaku_config(from._internal_inline_player_danmaku_config());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DanmuPlayerConfig::CopyFrom(const DanmuPlayerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bilibili.community.service.dm.v1.DanmuPlayerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DanmuPlayerConfig::IsInitialized() const {
  return true;
}

void DanmuPlayerConfig::InternalSwap(DanmuPlayerConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DanmuPlayerConfig, _impl_.inline_player_danmaku_config_)
      + sizeof(DanmuPlayerConfig::_impl_.inline_player_danmaku_config_)
      - PROTOBUF_FIELD_OFFSET(DanmuPlayerConfig, _impl_.player_danmaku_switch_)>(
          reinterpret_cast<char*>(&_impl_.player_danmaku_switch_),
          reinterpret_cast<char*>(&other->_impl_.player_danmaku_switch_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DanmuPlayerConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_reply_2eproto_getter, &descriptor_table_reply_2eproto_once,
      file_level_metadata_reply_2eproto[24]);
}

// ===================================================================

class DanmuPlayerDynamicConfig::_Internal {
 public:
};

DanmuPlayerDynamicConfig::DanmuPlayerDynamicConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bilibili.community.service.dm.v1.DanmuPlayerDynamicConfig)
}
DanmuPlayerDynamicConfig::DanmuPlayerDynamicConfig(const DanmuPlayerDynamicConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DanmuPlayerDynamicConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.progress_){}
    , decltype(_impl_.player_danmaku_domain_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.progress_, &from._impl_.progress_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.player_danmaku_domain_) -
    reinterpret_cast<char*>(&_impl_.progress_)) + sizeof(_impl_.player_danmaku_domain_));
  // @@protoc_insertion_point(copy_constructor:bilibili.community.service.dm.v1.DanmuPlayerDynamicConfig)
}

inline void DanmuPlayerDynamicConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.progress_){0}
    , decltype(_impl_.player_danmaku_domain_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DanmuPlayerDynamicConfig::~DanmuPlayerDynamicConfig() {
  // @@protoc_insertion_point(destructor:bilibili.community.service.dm.v1.DanmuPlayerDynamicConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DanmuPlayerDynamicConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DanmuPlayerDynamicConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DanmuPlayerDynamicConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:bilibili.community.service.dm.v1.DanmuPlayerDynamicConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.progress_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.player_danmaku_domain_) -
      reinterpret_cast<char*>(&_impl_.progress_)) + sizeof(_impl_.player_danmaku_domain_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DanmuPlayerDynamicConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 progress = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.progress_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float player_danmaku_domain = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.player_danmaku_domain_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DanmuPlayerDynamicConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bilibili.community.service.dm.v1.DanmuPlayerDynamicConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 progress = 1;
  if (this->_internal_progress() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_progress(), target);
  }

  // float player_danmaku_domain = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_player_danmaku_domain = this->_internal_player_danmaku_domain();
  uint32_t raw_player_danmaku_domain;
  memcpy(&raw_player_danmaku_domain, &tmp_player_danmaku_domain, sizeof(tmp_player_danmaku_domain));
  if (raw_player_danmaku_domain != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_player_danmaku_domain(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bilibili.community.service.dm.v1.DanmuPlayerDynamicConfig)
  return target;
}

size_t DanmuPlayerDynamicConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bilibili.community.service.dm.v1.DanmuPlayerDynamicConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 progress = 1;
  if (this->_internal_progress() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_progress());
  }

  // float player_danmaku_domain = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_player_danmaku_domain = this->_internal_player_danmaku_domain();
  uint32_t raw_player_danmaku_domain;
  memcpy(&raw_player_danmaku_domain, &tmp_player_danmaku_domain, sizeof(tmp_player_danmaku_domain));
  if (raw_player_danmaku_domain != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DanmuPlayerDynamicConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DanmuPlayerDynamicConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DanmuPlayerDynamicConfig::GetClassData() const { return &_class_data_; }


void DanmuPlayerDynamicConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DanmuPlayerDynamicConfig*>(&to_msg);
  auto& from = static_cast<const DanmuPlayerDynamicConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bilibili.community.service.dm.v1.DanmuPlayerDynamicConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_progress() != 0) {
    _this->_internal_set_progress(from._internal_progress());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_player_danmaku_domain = from._internal_player_danmaku_domain();
  uint32_t raw_player_danmaku_domain;
  memcpy(&raw_player_danmaku_domain, &tmp_player_danmaku_domain, sizeof(tmp_player_danmaku_domain));
  if (raw_player_danmaku_domain != 0) {
    _this->_internal_set_player_danmaku_domain(from._internal_player_danmaku_domain());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DanmuPlayerDynamicConfig::CopyFrom(const DanmuPlayerDynamicConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bilibili.community.service.dm.v1.DanmuPlayerDynamicConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DanmuPlayerDynamicConfig::IsInitialized() const {
  return true;
}

void DanmuPlayerDynamicConfig::InternalSwap(DanmuPlayerDynamicConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DanmuPlayerDynamicConfig, _impl_.player_danmaku_domain_)
      + sizeof(DanmuPlayerDynamicConfig::_impl_.player_danmaku_domain_)
      - PROTOBUF_FIELD_OFFSET(DanmuPlayerDynamicConfig, _impl_.progress_)>(
          reinterpret_cast<char*>(&_impl_.progress_),
          reinterpret_cast<char*>(&other->_impl_.progress_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DanmuPlayerDynamicConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_reply_2eproto_getter, &descriptor_table_reply_2eproto_once,
      file_level_metadata_reply_2eproto[25]);
}

// ===================================================================

class PlayerDanmakuSwitch::_Internal {
 public:
};

PlayerDanmakuSwitch::PlayerDanmakuSwitch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bilibili.community.service.dm.v1.PlayerDanmakuSwitch)
}
PlayerDanmakuSwitch::PlayerDanmakuSwitch(const PlayerDanmakuSwitch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlayerDanmakuSwitch* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){}
    , decltype(_impl_.canignore_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.value_, &from._impl_.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.canignore_) -
    reinterpret_cast<char*>(&_impl_.value_)) + sizeof(_impl_.canignore_));
  // @@protoc_insertion_point(copy_constructor:bilibili.community.service.dm.v1.PlayerDanmakuSwitch)
}

inline void PlayerDanmakuSwitch::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){false}
    , decltype(_impl_.canignore_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PlayerDanmakuSwitch::~PlayerDanmakuSwitch() {
  // @@protoc_insertion_point(destructor:bilibili.community.service.dm.v1.PlayerDanmakuSwitch)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerDanmakuSwitch::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PlayerDanmakuSwitch::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlayerDanmakuSwitch::Clear() {
// @@protoc_insertion_point(message_clear_start:bilibili.community.service.dm.v1.PlayerDanmakuSwitch)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.canignore_) -
      reinterpret_cast<char*>(&_impl_.value_)) + sizeof(_impl_.canignore_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerDanmakuSwitch::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool canIgnore = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.canignore_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerDanmakuSwitch::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bilibili.community.service.dm.v1.PlayerDanmakuSwitch)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool value = 1;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_value(), target);
  }

  // bool canIgnore = 2;
  if (this->_internal_canignore() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_canignore(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bilibili.community.service.dm.v1.PlayerDanmakuSwitch)
  return target;
}

size_t PlayerDanmakuSwitch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bilibili.community.service.dm.v1.PlayerDanmakuSwitch)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool value = 1;
  if (this->_internal_value() != 0) {
    total_size += 1 + 1;
  }

  // bool canIgnore = 2;
  if (this->_internal_canignore() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerDanmakuSwitch::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlayerDanmakuSwitch::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerDanmakuSwitch::GetClassData() const { return &_class_data_; }


void PlayerDanmakuSwitch::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlayerDanmakuSwitch*>(&to_msg);
  auto& from = static_cast<const PlayerDanmakuSwitch&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bilibili.community.service.dm.v1.PlayerDanmakuSwitch)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_value() != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  if (from._internal_canignore() != 0) {
    _this->_internal_set_canignore(from._internal_canignore());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerDanmakuSwitch::CopyFrom(const PlayerDanmakuSwitch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bilibili.community.service.dm.v1.PlayerDanmakuSwitch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerDanmakuSwitch::IsInitialized() const {
  return true;
}

void PlayerDanmakuSwitch::InternalSwap(PlayerDanmakuSwitch* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerDanmakuSwitch, _impl_.canignore_)
      + sizeof(PlayerDanmakuSwitch::_impl_.canignore_)
      - PROTOBUF_FIELD_OFFSET(PlayerDanmakuSwitch, _impl_.value_)>(
          reinterpret_cast<char*>(&_impl_.value_),
          reinterpret_cast<char*>(&other->_impl_.value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerDanmakuSwitch::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_reply_2eproto_getter, &descriptor_table_reply_2eproto_once,
      file_level_metadata_reply_2eproto[26]);
}

// ===================================================================

class PlayerDanmakuSwitchSave::_Internal {
 public:
};

PlayerDanmakuSwitchSave::PlayerDanmakuSwitchSave(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bilibili.community.service.dm.v1.PlayerDanmakuSwitchSave)
}
PlayerDanmakuSwitchSave::PlayerDanmakuSwitchSave(const PlayerDanmakuSwitchSave& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlayerDanmakuSwitchSave* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.value_ = from._impl_.value_;
  // @@protoc_insertion_point(copy_constructor:bilibili.community.service.dm.v1.PlayerDanmakuSwitchSave)
}

inline void PlayerDanmakuSwitchSave::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PlayerDanmakuSwitchSave::~PlayerDanmakuSwitchSave() {
  // @@protoc_insertion_point(destructor:bilibili.community.service.dm.v1.PlayerDanmakuSwitchSave)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerDanmakuSwitchSave::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PlayerDanmakuSwitchSave::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlayerDanmakuSwitchSave::Clear() {
// @@protoc_insertion_point(message_clear_start:bilibili.community.service.dm.v1.PlayerDanmakuSwitchSave)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerDanmakuSwitchSave::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerDanmakuSwitchSave::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bilibili.community.service.dm.v1.PlayerDanmakuSwitchSave)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool value = 1;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bilibili.community.service.dm.v1.PlayerDanmakuSwitchSave)
  return target;
}

size_t PlayerDanmakuSwitchSave::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bilibili.community.service.dm.v1.PlayerDanmakuSwitchSave)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool value = 1;
  if (this->_internal_value() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerDanmakuSwitchSave::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlayerDanmakuSwitchSave::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerDanmakuSwitchSave::GetClassData() const { return &_class_data_; }


void PlayerDanmakuSwitchSave::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlayerDanmakuSwitchSave*>(&to_msg);
  auto& from = static_cast<const PlayerDanmakuSwitchSave&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bilibili.community.service.dm.v1.PlayerDanmakuSwitchSave)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_value() != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerDanmakuSwitchSave::CopyFrom(const PlayerDanmakuSwitchSave& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bilibili.community.service.dm.v1.PlayerDanmakuSwitchSave)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerDanmakuSwitchSave::IsInitialized() const {
  return true;
}

void PlayerDanmakuSwitchSave::InternalSwap(PlayerDanmakuSwitchSave* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.value_, other->_impl_.value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerDanmakuSwitchSave::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_reply_2eproto_getter, &descriptor_table_reply_2eproto_once,
      file_level_metadata_reply_2eproto[27]);
}

// ===================================================================

class PlayerDanmakuUseDefaultConfig::_Internal {
 public:
};

PlayerDanmakuUseDefaultConfig::PlayerDanmakuUseDefaultConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bilibili.community.service.dm.v1.PlayerDanmakuUseDefaultConfig)
}
PlayerDanmakuUseDefaultConfig::PlayerDanmakuUseDefaultConfig(const PlayerDanmakuUseDefaultConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlayerDanmakuUseDefaultConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.value_ = from._impl_.value_;
  // @@protoc_insertion_point(copy_constructor:bilibili.community.service.dm.v1.PlayerDanmakuUseDefaultConfig)
}

inline void PlayerDanmakuUseDefaultConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PlayerDanmakuUseDefaultConfig::~PlayerDanmakuUseDefaultConfig() {
  // @@protoc_insertion_point(destructor:bilibili.community.service.dm.v1.PlayerDanmakuUseDefaultConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerDanmakuUseDefaultConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PlayerDanmakuUseDefaultConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlayerDanmakuUseDefaultConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:bilibili.community.service.dm.v1.PlayerDanmakuUseDefaultConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerDanmakuUseDefaultConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerDanmakuUseDefaultConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bilibili.community.service.dm.v1.PlayerDanmakuUseDefaultConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool value = 1;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bilibili.community.service.dm.v1.PlayerDanmakuUseDefaultConfig)
  return target;
}

size_t PlayerDanmakuUseDefaultConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bilibili.community.service.dm.v1.PlayerDanmakuUseDefaultConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool value = 1;
  if (this->_internal_value() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerDanmakuUseDefaultConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlayerDanmakuUseDefaultConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerDanmakuUseDefaultConfig::GetClassData() const { return &_class_data_; }


void PlayerDanmakuUseDefaultConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlayerDanmakuUseDefaultConfig*>(&to_msg);
  auto& from = static_cast<const PlayerDanmakuUseDefaultConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bilibili.community.service.dm.v1.PlayerDanmakuUseDefaultConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_value() != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerDanmakuUseDefaultConfig::CopyFrom(const PlayerDanmakuUseDefaultConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bilibili.community.service.dm.v1.PlayerDanmakuUseDefaultConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerDanmakuUseDefaultConfig::IsInitialized() const {
  return true;
}

void PlayerDanmakuUseDefaultConfig::InternalSwap(PlayerDanmakuUseDefaultConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.value_, other->_impl_.value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerDanmakuUseDefaultConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_reply_2eproto_getter, &descriptor_table_reply_2eproto_once,
      file_level_metadata_reply_2eproto[28]);
}

// ===================================================================

class PlayerDanmakuAiRecommendedSwitch::_Internal {
 public:
};

PlayerDanmakuAiRecommendedSwitch::PlayerDanmakuAiRecommendedSwitch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedSwitch)
}
PlayerDanmakuAiRecommendedSwitch::PlayerDanmakuAiRecommendedSwitch(const PlayerDanmakuAiRecommendedSwitch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlayerDanmakuAiRecommendedSwitch* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.value_ = from._impl_.value_;
  // @@protoc_insertion_point(copy_constructor:bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedSwitch)
}

inline void PlayerDanmakuAiRecommendedSwitch::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PlayerDanmakuAiRecommendedSwitch::~PlayerDanmakuAiRecommendedSwitch() {
  // @@protoc_insertion_point(destructor:bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedSwitch)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerDanmakuAiRecommendedSwitch::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PlayerDanmakuAiRecommendedSwitch::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlayerDanmakuAiRecommendedSwitch::Clear() {
// @@protoc_insertion_point(message_clear_start:bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedSwitch)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerDanmakuAiRecommendedSwitch::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerDanmakuAiRecommendedSwitch::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedSwitch)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool value = 1;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedSwitch)
  return target;
}

size_t PlayerDanmakuAiRecommendedSwitch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedSwitch)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool value = 1;
  if (this->_internal_value() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerDanmakuAiRecommendedSwitch::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlayerDanmakuAiRecommendedSwitch::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerDanmakuAiRecommendedSwitch::GetClassData() const { return &_class_data_; }


void PlayerDanmakuAiRecommendedSwitch::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlayerDanmakuAiRecommendedSwitch*>(&to_msg);
  auto& from = static_cast<const PlayerDanmakuAiRecommendedSwitch&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedSwitch)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_value() != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerDanmakuAiRecommendedSwitch::CopyFrom(const PlayerDanmakuAiRecommendedSwitch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedSwitch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerDanmakuAiRecommendedSwitch::IsInitialized() const {
  return true;
}

void PlayerDanmakuAiRecommendedSwitch::InternalSwap(PlayerDanmakuAiRecommendedSwitch* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.value_, other->_impl_.value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerDanmakuAiRecommendedSwitch::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_reply_2eproto_getter, &descriptor_table_reply_2eproto_once,
      file_level_metadata_reply_2eproto[29]);
}

// ===================================================================

class PlayerDanmakuAiRecommendedLevel::_Internal {
 public:
};

PlayerDanmakuAiRecommendedLevel::PlayerDanmakuAiRecommendedLevel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedLevel)
}
PlayerDanmakuAiRecommendedLevel::PlayerDanmakuAiRecommendedLevel(const PlayerDanmakuAiRecommendedLevel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlayerDanmakuAiRecommendedLevel* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.value_ = from._impl_.value_;
  // @@protoc_insertion_point(copy_constructor:bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedLevel)
}

inline void PlayerDanmakuAiRecommendedLevel::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PlayerDanmakuAiRecommendedLevel::~PlayerDanmakuAiRecommendedLevel() {
  // @@protoc_insertion_point(destructor:bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedLevel)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerDanmakuAiRecommendedLevel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PlayerDanmakuAiRecommendedLevel::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlayerDanmakuAiRecommendedLevel::Clear() {
// @@protoc_insertion_point(message_clear_start:bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedLevel)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerDanmakuAiRecommendedLevel::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerDanmakuAiRecommendedLevel::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedLevel)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool value = 1;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedLevel)
  return target;
}

size_t PlayerDanmakuAiRecommendedLevel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedLevel)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool value = 1;
  if (this->_internal_value() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerDanmakuAiRecommendedLevel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlayerDanmakuAiRecommendedLevel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerDanmakuAiRecommendedLevel::GetClassData() const { return &_class_data_; }


void PlayerDanmakuAiRecommendedLevel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlayerDanmakuAiRecommendedLevel*>(&to_msg);
  auto& from = static_cast<const PlayerDanmakuAiRecommendedLevel&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedLevel)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_value() != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerDanmakuAiRecommendedLevel::CopyFrom(const PlayerDanmakuAiRecommendedLevel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedLevel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerDanmakuAiRecommendedLevel::IsInitialized() const {
  return true;
}

void PlayerDanmakuAiRecommendedLevel::InternalSwap(PlayerDanmakuAiRecommendedLevel* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.value_, other->_impl_.value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerDanmakuAiRecommendedLevel::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_reply_2eproto_getter, &descriptor_table_reply_2eproto_once,
      file_level_metadata_reply_2eproto[30]);
}

// ===================================================================

class PlayerDanmakuBlocktop::_Internal {
 public:
};

PlayerDanmakuBlocktop::PlayerDanmakuBlocktop(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bilibili.community.service.dm.v1.PlayerDanmakuBlocktop)
}
PlayerDanmakuBlocktop::PlayerDanmakuBlocktop(const PlayerDanmakuBlocktop& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlayerDanmakuBlocktop* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.value_ = from._impl_.value_;
  // @@protoc_insertion_point(copy_constructor:bilibili.community.service.dm.v1.PlayerDanmakuBlocktop)
}

inline void PlayerDanmakuBlocktop::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PlayerDanmakuBlocktop::~PlayerDanmakuBlocktop() {
  // @@protoc_insertion_point(destructor:bilibili.community.service.dm.v1.PlayerDanmakuBlocktop)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerDanmakuBlocktop::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PlayerDanmakuBlocktop::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlayerDanmakuBlocktop::Clear() {
// @@protoc_insertion_point(message_clear_start:bilibili.community.service.dm.v1.PlayerDanmakuBlocktop)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerDanmakuBlocktop::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerDanmakuBlocktop::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bilibili.community.service.dm.v1.PlayerDanmakuBlocktop)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool value = 1;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bilibili.community.service.dm.v1.PlayerDanmakuBlocktop)
  return target;
}

size_t PlayerDanmakuBlocktop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bilibili.community.service.dm.v1.PlayerDanmakuBlocktop)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool value = 1;
  if (this->_internal_value() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerDanmakuBlocktop::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlayerDanmakuBlocktop::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerDanmakuBlocktop::GetClassData() const { return &_class_data_; }


void PlayerDanmakuBlocktop::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlayerDanmakuBlocktop*>(&to_msg);
  auto& from = static_cast<const PlayerDanmakuBlocktop&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bilibili.community.service.dm.v1.PlayerDanmakuBlocktop)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_value() != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerDanmakuBlocktop::CopyFrom(const PlayerDanmakuBlocktop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bilibili.community.service.dm.v1.PlayerDanmakuBlocktop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerDanmakuBlocktop::IsInitialized() const {
  return true;
}

void PlayerDanmakuBlocktop::InternalSwap(PlayerDanmakuBlocktop* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.value_, other->_impl_.value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerDanmakuBlocktop::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_reply_2eproto_getter, &descriptor_table_reply_2eproto_once,
      file_level_metadata_reply_2eproto[31]);
}

// ===================================================================

class PlayerDanmakuBlockscroll::_Internal {
 public:
};

PlayerDanmakuBlockscroll::PlayerDanmakuBlockscroll(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bilibili.community.service.dm.v1.PlayerDanmakuBlockscroll)
}
PlayerDanmakuBlockscroll::PlayerDanmakuBlockscroll(const PlayerDanmakuBlockscroll& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlayerDanmakuBlockscroll* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.value_ = from._impl_.value_;
  // @@protoc_insertion_point(copy_constructor:bilibili.community.service.dm.v1.PlayerDanmakuBlockscroll)
}

inline void PlayerDanmakuBlockscroll::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PlayerDanmakuBlockscroll::~PlayerDanmakuBlockscroll() {
  // @@protoc_insertion_point(destructor:bilibili.community.service.dm.v1.PlayerDanmakuBlockscroll)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerDanmakuBlockscroll::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PlayerDanmakuBlockscroll::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlayerDanmakuBlockscroll::Clear() {
// @@protoc_insertion_point(message_clear_start:bilibili.community.service.dm.v1.PlayerDanmakuBlockscroll)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerDanmakuBlockscroll::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerDanmakuBlockscroll::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bilibili.community.service.dm.v1.PlayerDanmakuBlockscroll)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool value = 1;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bilibili.community.service.dm.v1.PlayerDanmakuBlockscroll)
  return target;
}

size_t PlayerDanmakuBlockscroll::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bilibili.community.service.dm.v1.PlayerDanmakuBlockscroll)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool value = 1;
  if (this->_internal_value() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerDanmakuBlockscroll::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlayerDanmakuBlockscroll::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerDanmakuBlockscroll::GetClassData() const { return &_class_data_; }


void PlayerDanmakuBlockscroll::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlayerDanmakuBlockscroll*>(&to_msg);
  auto& from = static_cast<const PlayerDanmakuBlockscroll&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bilibili.community.service.dm.v1.PlayerDanmakuBlockscroll)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_value() != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerDanmakuBlockscroll::CopyFrom(const PlayerDanmakuBlockscroll& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bilibili.community.service.dm.v1.PlayerDanmakuBlockscroll)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerDanmakuBlockscroll::IsInitialized() const {
  return true;
}

void PlayerDanmakuBlockscroll::InternalSwap(PlayerDanmakuBlockscroll* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.value_, other->_impl_.value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerDanmakuBlockscroll::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_reply_2eproto_getter, &descriptor_table_reply_2eproto_once,
      file_level_metadata_reply_2eproto[32]);
}

// ===================================================================

class PlayerDanmakuBlockbottom::_Internal {
 public:
};

PlayerDanmakuBlockbottom::PlayerDanmakuBlockbottom(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bilibili.community.service.dm.v1.PlayerDanmakuBlockbottom)
}
PlayerDanmakuBlockbottom::PlayerDanmakuBlockbottom(const PlayerDanmakuBlockbottom& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlayerDanmakuBlockbottom* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.value_ = from._impl_.value_;
  // @@protoc_insertion_point(copy_constructor:bilibili.community.service.dm.v1.PlayerDanmakuBlockbottom)
}

inline void PlayerDanmakuBlockbottom::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PlayerDanmakuBlockbottom::~PlayerDanmakuBlockbottom() {
  // @@protoc_insertion_point(destructor:bilibili.community.service.dm.v1.PlayerDanmakuBlockbottom)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerDanmakuBlockbottom::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PlayerDanmakuBlockbottom::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlayerDanmakuBlockbottom::Clear() {
// @@protoc_insertion_point(message_clear_start:bilibili.community.service.dm.v1.PlayerDanmakuBlockbottom)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerDanmakuBlockbottom::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerDanmakuBlockbottom::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bilibili.community.service.dm.v1.PlayerDanmakuBlockbottom)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool value = 1;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bilibili.community.service.dm.v1.PlayerDanmakuBlockbottom)
  return target;
}

size_t PlayerDanmakuBlockbottom::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bilibili.community.service.dm.v1.PlayerDanmakuBlockbottom)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool value = 1;
  if (this->_internal_value() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerDanmakuBlockbottom::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlayerDanmakuBlockbottom::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerDanmakuBlockbottom::GetClassData() const { return &_class_data_; }


void PlayerDanmakuBlockbottom::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlayerDanmakuBlockbottom*>(&to_msg);
  auto& from = static_cast<const PlayerDanmakuBlockbottom&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bilibili.community.service.dm.v1.PlayerDanmakuBlockbottom)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_value() != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerDanmakuBlockbottom::CopyFrom(const PlayerDanmakuBlockbottom& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bilibili.community.service.dm.v1.PlayerDanmakuBlockbottom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerDanmakuBlockbottom::IsInitialized() const {
  return true;
}

void PlayerDanmakuBlockbottom::InternalSwap(PlayerDanmakuBlockbottom* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.value_, other->_impl_.value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerDanmakuBlockbottom::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_reply_2eproto_getter, &descriptor_table_reply_2eproto_once,
      file_level_metadata_reply_2eproto[33]);
}

// ===================================================================

class PlayerDanmakuBlockcolorful::_Internal {
 public:
};

PlayerDanmakuBlockcolorful::PlayerDanmakuBlockcolorful(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bilibili.community.service.dm.v1.PlayerDanmakuBlockcolorful)
}
PlayerDanmakuBlockcolorful::PlayerDanmakuBlockcolorful(const PlayerDanmakuBlockcolorful& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlayerDanmakuBlockcolorful* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.value_ = from._impl_.value_;
  // @@protoc_insertion_point(copy_constructor:bilibili.community.service.dm.v1.PlayerDanmakuBlockcolorful)
}

inline void PlayerDanmakuBlockcolorful::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PlayerDanmakuBlockcolorful::~PlayerDanmakuBlockcolorful() {
  // @@protoc_insertion_point(destructor:bilibili.community.service.dm.v1.PlayerDanmakuBlockcolorful)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerDanmakuBlockcolorful::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PlayerDanmakuBlockcolorful::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlayerDanmakuBlockcolorful::Clear() {
// @@protoc_insertion_point(message_clear_start:bilibili.community.service.dm.v1.PlayerDanmakuBlockcolorful)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerDanmakuBlockcolorful::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerDanmakuBlockcolorful::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bilibili.community.service.dm.v1.PlayerDanmakuBlockcolorful)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool value = 1;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bilibili.community.service.dm.v1.PlayerDanmakuBlockcolorful)
  return target;
}

size_t PlayerDanmakuBlockcolorful::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bilibili.community.service.dm.v1.PlayerDanmakuBlockcolorful)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool value = 1;
  if (this->_internal_value() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerDanmakuBlockcolorful::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlayerDanmakuBlockcolorful::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerDanmakuBlockcolorful::GetClassData() const { return &_class_data_; }


void PlayerDanmakuBlockcolorful::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlayerDanmakuBlockcolorful*>(&to_msg);
  auto& from = static_cast<const PlayerDanmakuBlockcolorful&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bilibili.community.service.dm.v1.PlayerDanmakuBlockcolorful)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_value() != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerDanmakuBlockcolorful::CopyFrom(const PlayerDanmakuBlockcolorful& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bilibili.community.service.dm.v1.PlayerDanmakuBlockcolorful)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerDanmakuBlockcolorful::IsInitialized() const {
  return true;
}

void PlayerDanmakuBlockcolorful::InternalSwap(PlayerDanmakuBlockcolorful* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.value_, other->_impl_.value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerDanmakuBlockcolorful::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_reply_2eproto_getter, &descriptor_table_reply_2eproto_once,
      file_level_metadata_reply_2eproto[34]);
}

// ===================================================================

class PlayerDanmakuBlockrepeat::_Internal {
 public:
};

PlayerDanmakuBlockrepeat::PlayerDanmakuBlockrepeat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bilibili.community.service.dm.v1.PlayerDanmakuBlockrepeat)
}
PlayerDanmakuBlockrepeat::PlayerDanmakuBlockrepeat(const PlayerDanmakuBlockrepeat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlayerDanmakuBlockrepeat* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.value_ = from._impl_.value_;
  // @@protoc_insertion_point(copy_constructor:bilibili.community.service.dm.v1.PlayerDanmakuBlockrepeat)
}

inline void PlayerDanmakuBlockrepeat::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PlayerDanmakuBlockrepeat::~PlayerDanmakuBlockrepeat() {
  // @@protoc_insertion_point(destructor:bilibili.community.service.dm.v1.PlayerDanmakuBlockrepeat)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerDanmakuBlockrepeat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PlayerDanmakuBlockrepeat::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlayerDanmakuBlockrepeat::Clear() {
// @@protoc_insertion_point(message_clear_start:bilibili.community.service.dm.v1.PlayerDanmakuBlockrepeat)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerDanmakuBlockrepeat::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerDanmakuBlockrepeat::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bilibili.community.service.dm.v1.PlayerDanmakuBlockrepeat)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool value = 1;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bilibili.community.service.dm.v1.PlayerDanmakuBlockrepeat)
  return target;
}

size_t PlayerDanmakuBlockrepeat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bilibili.community.service.dm.v1.PlayerDanmakuBlockrepeat)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool value = 1;
  if (this->_internal_value() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerDanmakuBlockrepeat::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlayerDanmakuBlockrepeat::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerDanmakuBlockrepeat::GetClassData() const { return &_class_data_; }


void PlayerDanmakuBlockrepeat::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlayerDanmakuBlockrepeat*>(&to_msg);
  auto& from = static_cast<const PlayerDanmakuBlockrepeat&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bilibili.community.service.dm.v1.PlayerDanmakuBlockrepeat)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_value() != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerDanmakuBlockrepeat::CopyFrom(const PlayerDanmakuBlockrepeat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bilibili.community.service.dm.v1.PlayerDanmakuBlockrepeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerDanmakuBlockrepeat::IsInitialized() const {
  return true;
}

void PlayerDanmakuBlockrepeat::InternalSwap(PlayerDanmakuBlockrepeat* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.value_, other->_impl_.value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerDanmakuBlockrepeat::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_reply_2eproto_getter, &descriptor_table_reply_2eproto_once,
      file_level_metadata_reply_2eproto[35]);
}

// ===================================================================

class PlayerDanmakuBlockspecial::_Internal {
 public:
};

PlayerDanmakuBlockspecial::PlayerDanmakuBlockspecial(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bilibili.community.service.dm.v1.PlayerDanmakuBlockspecial)
}
PlayerDanmakuBlockspecial::PlayerDanmakuBlockspecial(const PlayerDanmakuBlockspecial& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlayerDanmakuBlockspecial* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.value_ = from._impl_.value_;
  // @@protoc_insertion_point(copy_constructor:bilibili.community.service.dm.v1.PlayerDanmakuBlockspecial)
}

inline void PlayerDanmakuBlockspecial::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PlayerDanmakuBlockspecial::~PlayerDanmakuBlockspecial() {
  // @@protoc_insertion_point(destructor:bilibili.community.service.dm.v1.PlayerDanmakuBlockspecial)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerDanmakuBlockspecial::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PlayerDanmakuBlockspecial::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlayerDanmakuBlockspecial::Clear() {
// @@protoc_insertion_point(message_clear_start:bilibili.community.service.dm.v1.PlayerDanmakuBlockspecial)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerDanmakuBlockspecial::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerDanmakuBlockspecial::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bilibili.community.service.dm.v1.PlayerDanmakuBlockspecial)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool value = 1;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bilibili.community.service.dm.v1.PlayerDanmakuBlockspecial)
  return target;
}

size_t PlayerDanmakuBlockspecial::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bilibili.community.service.dm.v1.PlayerDanmakuBlockspecial)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool value = 1;
  if (this->_internal_value() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerDanmakuBlockspecial::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlayerDanmakuBlockspecial::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerDanmakuBlockspecial::GetClassData() const { return &_class_data_; }


void PlayerDanmakuBlockspecial::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlayerDanmakuBlockspecial*>(&to_msg);
  auto& from = static_cast<const PlayerDanmakuBlockspecial&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bilibili.community.service.dm.v1.PlayerDanmakuBlockspecial)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_value() != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerDanmakuBlockspecial::CopyFrom(const PlayerDanmakuBlockspecial& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bilibili.community.service.dm.v1.PlayerDanmakuBlockspecial)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerDanmakuBlockspecial::IsInitialized() const {
  return true;
}

void PlayerDanmakuBlockspecial::InternalSwap(PlayerDanmakuBlockspecial* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.value_, other->_impl_.value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerDanmakuBlockspecial::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_reply_2eproto_getter, &descriptor_table_reply_2eproto_once,
      file_level_metadata_reply_2eproto[36]);
}

// ===================================================================

class PlayerDanmakuOpacity::_Internal {
 public:
};

PlayerDanmakuOpacity::PlayerDanmakuOpacity(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bilibili.community.service.dm.v1.PlayerDanmakuOpacity)
}
PlayerDanmakuOpacity::PlayerDanmakuOpacity(const PlayerDanmakuOpacity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlayerDanmakuOpacity* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.value_ = from._impl_.value_;
  // @@protoc_insertion_point(copy_constructor:bilibili.community.service.dm.v1.PlayerDanmakuOpacity)
}

inline void PlayerDanmakuOpacity::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PlayerDanmakuOpacity::~PlayerDanmakuOpacity() {
  // @@protoc_insertion_point(destructor:bilibili.community.service.dm.v1.PlayerDanmakuOpacity)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerDanmakuOpacity::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PlayerDanmakuOpacity::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlayerDanmakuOpacity::Clear() {
// @@protoc_insertion_point(message_clear_start:bilibili.community.service.dm.v1.PlayerDanmakuOpacity)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerDanmakuOpacity::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerDanmakuOpacity::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bilibili.community.service.dm.v1.PlayerDanmakuOpacity)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float value = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_value = this->_internal_value();
  uint32_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bilibili.community.service.dm.v1.PlayerDanmakuOpacity)
  return target;
}

size_t PlayerDanmakuOpacity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bilibili.community.service.dm.v1.PlayerDanmakuOpacity)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float value = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_value = this->_internal_value();
  uint32_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerDanmakuOpacity::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlayerDanmakuOpacity::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerDanmakuOpacity::GetClassData() const { return &_class_data_; }


void PlayerDanmakuOpacity::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlayerDanmakuOpacity*>(&to_msg);
  auto& from = static_cast<const PlayerDanmakuOpacity&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bilibili.community.service.dm.v1.PlayerDanmakuOpacity)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_value = from._internal_value();
  uint32_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerDanmakuOpacity::CopyFrom(const PlayerDanmakuOpacity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bilibili.community.service.dm.v1.PlayerDanmakuOpacity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerDanmakuOpacity::IsInitialized() const {
  return true;
}

void PlayerDanmakuOpacity::InternalSwap(PlayerDanmakuOpacity* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.value_, other->_impl_.value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerDanmakuOpacity::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_reply_2eproto_getter, &descriptor_table_reply_2eproto_once,
      file_level_metadata_reply_2eproto[37]);
}

// ===================================================================

class PlayerDanmakuScalingfactor::_Internal {
 public:
};

PlayerDanmakuScalingfactor::PlayerDanmakuScalingfactor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bilibili.community.service.dm.v1.PlayerDanmakuScalingfactor)
}
PlayerDanmakuScalingfactor::PlayerDanmakuScalingfactor(const PlayerDanmakuScalingfactor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlayerDanmakuScalingfactor* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.value_ = from._impl_.value_;
  // @@protoc_insertion_point(copy_constructor:bilibili.community.service.dm.v1.PlayerDanmakuScalingfactor)
}

inline void PlayerDanmakuScalingfactor::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PlayerDanmakuScalingfactor::~PlayerDanmakuScalingfactor() {
  // @@protoc_insertion_point(destructor:bilibili.community.service.dm.v1.PlayerDanmakuScalingfactor)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerDanmakuScalingfactor::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PlayerDanmakuScalingfactor::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlayerDanmakuScalingfactor::Clear() {
// @@protoc_insertion_point(message_clear_start:bilibili.community.service.dm.v1.PlayerDanmakuScalingfactor)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerDanmakuScalingfactor::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerDanmakuScalingfactor::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bilibili.community.service.dm.v1.PlayerDanmakuScalingfactor)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float value = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_value = this->_internal_value();
  uint32_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bilibili.community.service.dm.v1.PlayerDanmakuScalingfactor)
  return target;
}

size_t PlayerDanmakuScalingfactor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bilibili.community.service.dm.v1.PlayerDanmakuScalingfactor)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float value = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_value = this->_internal_value();
  uint32_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerDanmakuScalingfactor::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlayerDanmakuScalingfactor::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerDanmakuScalingfactor::GetClassData() const { return &_class_data_; }


void PlayerDanmakuScalingfactor::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlayerDanmakuScalingfactor*>(&to_msg);
  auto& from = static_cast<const PlayerDanmakuScalingfactor&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bilibili.community.service.dm.v1.PlayerDanmakuScalingfactor)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_value = from._internal_value();
  uint32_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerDanmakuScalingfactor::CopyFrom(const PlayerDanmakuScalingfactor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bilibili.community.service.dm.v1.PlayerDanmakuScalingfactor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerDanmakuScalingfactor::IsInitialized() const {
  return true;
}

void PlayerDanmakuScalingfactor::InternalSwap(PlayerDanmakuScalingfactor* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.value_, other->_impl_.value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerDanmakuScalingfactor::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_reply_2eproto_getter, &descriptor_table_reply_2eproto_once,
      file_level_metadata_reply_2eproto[38]);
}

// ===================================================================

class PlayerDanmakuDomain::_Internal {
 public:
};

PlayerDanmakuDomain::PlayerDanmakuDomain(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bilibili.community.service.dm.v1.PlayerDanmakuDomain)
}
PlayerDanmakuDomain::PlayerDanmakuDomain(const PlayerDanmakuDomain& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlayerDanmakuDomain* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.value_ = from._impl_.value_;
  // @@protoc_insertion_point(copy_constructor:bilibili.community.service.dm.v1.PlayerDanmakuDomain)
}

inline void PlayerDanmakuDomain::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PlayerDanmakuDomain::~PlayerDanmakuDomain() {
  // @@protoc_insertion_point(destructor:bilibili.community.service.dm.v1.PlayerDanmakuDomain)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerDanmakuDomain::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PlayerDanmakuDomain::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlayerDanmakuDomain::Clear() {
// @@protoc_insertion_point(message_clear_start:bilibili.community.service.dm.v1.PlayerDanmakuDomain)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerDanmakuDomain::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerDanmakuDomain::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bilibili.community.service.dm.v1.PlayerDanmakuDomain)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float value = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_value = this->_internal_value();
  uint32_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bilibili.community.service.dm.v1.PlayerDanmakuDomain)
  return target;
}

size_t PlayerDanmakuDomain::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bilibili.community.service.dm.v1.PlayerDanmakuDomain)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float value = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_value = this->_internal_value();
  uint32_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerDanmakuDomain::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlayerDanmakuDomain::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerDanmakuDomain::GetClassData() const { return &_class_data_; }


void PlayerDanmakuDomain::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlayerDanmakuDomain*>(&to_msg);
  auto& from = static_cast<const PlayerDanmakuDomain&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bilibili.community.service.dm.v1.PlayerDanmakuDomain)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_value = from._internal_value();
  uint32_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerDanmakuDomain::CopyFrom(const PlayerDanmakuDomain& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bilibili.community.service.dm.v1.PlayerDanmakuDomain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerDanmakuDomain::IsInitialized() const {
  return true;
}

void PlayerDanmakuDomain::InternalSwap(PlayerDanmakuDomain* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.value_, other->_impl_.value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerDanmakuDomain::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_reply_2eproto_getter, &descriptor_table_reply_2eproto_once,
      file_level_metadata_reply_2eproto[39]);
}

// ===================================================================

class PlayerDanmakuSpeed::_Internal {
 public:
};

PlayerDanmakuSpeed::PlayerDanmakuSpeed(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bilibili.community.service.dm.v1.PlayerDanmakuSpeed)
}
PlayerDanmakuSpeed::PlayerDanmakuSpeed(const PlayerDanmakuSpeed& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlayerDanmakuSpeed* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.value_ = from._impl_.value_;
  // @@protoc_insertion_point(copy_constructor:bilibili.community.service.dm.v1.PlayerDanmakuSpeed)
}

inline void PlayerDanmakuSpeed::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PlayerDanmakuSpeed::~PlayerDanmakuSpeed() {
  // @@protoc_insertion_point(destructor:bilibili.community.service.dm.v1.PlayerDanmakuSpeed)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerDanmakuSpeed::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PlayerDanmakuSpeed::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlayerDanmakuSpeed::Clear() {
// @@protoc_insertion_point(message_clear_start:bilibili.community.service.dm.v1.PlayerDanmakuSpeed)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerDanmakuSpeed::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerDanmakuSpeed::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bilibili.community.service.dm.v1.PlayerDanmakuSpeed)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 value = 1;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bilibili.community.service.dm.v1.PlayerDanmakuSpeed)
  return target;
}

size_t PlayerDanmakuSpeed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bilibili.community.service.dm.v1.PlayerDanmakuSpeed)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 value = 1;
  if (this->_internal_value() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerDanmakuSpeed::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlayerDanmakuSpeed::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerDanmakuSpeed::GetClassData() const { return &_class_data_; }


void PlayerDanmakuSpeed::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlayerDanmakuSpeed*>(&to_msg);
  auto& from = static_cast<const PlayerDanmakuSpeed&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bilibili.community.service.dm.v1.PlayerDanmakuSpeed)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_value() != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerDanmakuSpeed::CopyFrom(const PlayerDanmakuSpeed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bilibili.community.service.dm.v1.PlayerDanmakuSpeed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerDanmakuSpeed::IsInitialized() const {
  return true;
}

void PlayerDanmakuSpeed::InternalSwap(PlayerDanmakuSpeed* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.value_, other->_impl_.value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerDanmakuSpeed::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_reply_2eproto_getter, &descriptor_table_reply_2eproto_once,
      file_level_metadata_reply_2eproto[40]);
}

// ===================================================================

class PlayerDanmakuEnableblocklist::_Internal {
 public:
};

PlayerDanmakuEnableblocklist::PlayerDanmakuEnableblocklist(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bilibili.community.service.dm.v1.PlayerDanmakuEnableblocklist)
}
PlayerDanmakuEnableblocklist::PlayerDanmakuEnableblocklist(const PlayerDanmakuEnableblocklist& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlayerDanmakuEnableblocklist* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.value_ = from._impl_.value_;
  // @@protoc_insertion_point(copy_constructor:bilibili.community.service.dm.v1.PlayerDanmakuEnableblocklist)
}

inline void PlayerDanmakuEnableblocklist::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PlayerDanmakuEnableblocklist::~PlayerDanmakuEnableblocklist() {
  // @@protoc_insertion_point(destructor:bilibili.community.service.dm.v1.PlayerDanmakuEnableblocklist)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerDanmakuEnableblocklist::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PlayerDanmakuEnableblocklist::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlayerDanmakuEnableblocklist::Clear() {
// @@protoc_insertion_point(message_clear_start:bilibili.community.service.dm.v1.PlayerDanmakuEnableblocklist)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerDanmakuEnableblocklist::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerDanmakuEnableblocklist::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bilibili.community.service.dm.v1.PlayerDanmakuEnableblocklist)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool value = 1;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bilibili.community.service.dm.v1.PlayerDanmakuEnableblocklist)
  return target;
}

size_t PlayerDanmakuEnableblocklist::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bilibili.community.service.dm.v1.PlayerDanmakuEnableblocklist)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool value = 1;
  if (this->_internal_value() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerDanmakuEnableblocklist::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlayerDanmakuEnableblocklist::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerDanmakuEnableblocklist::GetClassData() const { return &_class_data_; }


void PlayerDanmakuEnableblocklist::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlayerDanmakuEnableblocklist*>(&to_msg);
  auto& from = static_cast<const PlayerDanmakuEnableblocklist&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bilibili.community.service.dm.v1.PlayerDanmakuEnableblocklist)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_value() != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerDanmakuEnableblocklist::CopyFrom(const PlayerDanmakuEnableblocklist& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bilibili.community.service.dm.v1.PlayerDanmakuEnableblocklist)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerDanmakuEnableblocklist::IsInitialized() const {
  return true;
}

void PlayerDanmakuEnableblocklist::InternalSwap(PlayerDanmakuEnableblocklist* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.value_, other->_impl_.value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerDanmakuEnableblocklist::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_reply_2eproto_getter, &descriptor_table_reply_2eproto_once,
      file_level_metadata_reply_2eproto[41]);
}

// ===================================================================

class InlinePlayerDanmakuSwitch::_Internal {
 public:
};

InlinePlayerDanmakuSwitch::InlinePlayerDanmakuSwitch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bilibili.community.service.dm.v1.InlinePlayerDanmakuSwitch)
}
InlinePlayerDanmakuSwitch::InlinePlayerDanmakuSwitch(const InlinePlayerDanmakuSwitch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InlinePlayerDanmakuSwitch* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.value_ = from._impl_.value_;
  // @@protoc_insertion_point(copy_constructor:bilibili.community.service.dm.v1.InlinePlayerDanmakuSwitch)
}

inline void InlinePlayerDanmakuSwitch::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

InlinePlayerDanmakuSwitch::~InlinePlayerDanmakuSwitch() {
  // @@protoc_insertion_point(destructor:bilibili.community.service.dm.v1.InlinePlayerDanmakuSwitch)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InlinePlayerDanmakuSwitch::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void InlinePlayerDanmakuSwitch::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InlinePlayerDanmakuSwitch::Clear() {
// @@protoc_insertion_point(message_clear_start:bilibili.community.service.dm.v1.InlinePlayerDanmakuSwitch)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InlinePlayerDanmakuSwitch::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InlinePlayerDanmakuSwitch::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bilibili.community.service.dm.v1.InlinePlayerDanmakuSwitch)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool value = 1;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bilibili.community.service.dm.v1.InlinePlayerDanmakuSwitch)
  return target;
}

size_t InlinePlayerDanmakuSwitch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bilibili.community.service.dm.v1.InlinePlayerDanmakuSwitch)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool value = 1;
  if (this->_internal_value() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InlinePlayerDanmakuSwitch::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InlinePlayerDanmakuSwitch::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InlinePlayerDanmakuSwitch::GetClassData() const { return &_class_data_; }


void InlinePlayerDanmakuSwitch::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InlinePlayerDanmakuSwitch*>(&to_msg);
  auto& from = static_cast<const InlinePlayerDanmakuSwitch&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bilibili.community.service.dm.v1.InlinePlayerDanmakuSwitch)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_value() != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InlinePlayerDanmakuSwitch::CopyFrom(const InlinePlayerDanmakuSwitch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bilibili.community.service.dm.v1.InlinePlayerDanmakuSwitch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InlinePlayerDanmakuSwitch::IsInitialized() const {
  return true;
}

void InlinePlayerDanmakuSwitch::InternalSwap(InlinePlayerDanmakuSwitch* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.value_, other->_impl_.value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InlinePlayerDanmakuSwitch::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_reply_2eproto_getter, &descriptor_table_reply_2eproto_once,
      file_level_metadata_reply_2eproto[42]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace dm
}  // namespace service
}  // namespace community
}  // namespace bilibili
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::bilibili::community::service::dm::v1::DmSegSDKReq*
Arena::CreateMaybeMessage< ::bilibili::community::service::dm::v1::DmSegSDKReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bilibili::community::service::dm::v1::DmSegSDKReq >(arena);
}
template<> PROTOBUF_NOINLINE ::bilibili::community::service::dm::v1::DmSegSDKReply*
Arena::CreateMaybeMessage< ::bilibili::community::service::dm::v1::DmSegSDKReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bilibili::community::service::dm::v1::DmSegSDKReply >(arena);
}
template<> PROTOBUF_NOINLINE ::bilibili::community::service::dm::v1::DmSegOttReq*
Arena::CreateMaybeMessage< ::bilibili::community::service::dm::v1::DmSegOttReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bilibili::community::service::dm::v1::DmSegOttReq >(arena);
}
template<> PROTOBUF_NOINLINE ::bilibili::community::service::dm::v1::DmSegOttReply*
Arena::CreateMaybeMessage< ::bilibili::community::service::dm::v1::DmSegOttReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bilibili::community::service::dm::v1::DmSegOttReply >(arena);
}
template<> PROTOBUF_NOINLINE ::bilibili::community::service::dm::v1::DmSegMobileReq*
Arena::CreateMaybeMessage< ::bilibili::community::service::dm::v1::DmSegMobileReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bilibili::community::service::dm::v1::DmSegMobileReq >(arena);
}
template<> PROTOBUF_NOINLINE ::bilibili::community::service::dm::v1::DmSegMobileReply*
Arena::CreateMaybeMessage< ::bilibili::community::service::dm::v1::DmSegMobileReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bilibili::community::service::dm::v1::DmSegMobileReply >(arena);
}
template<> PROTOBUF_NOINLINE ::bilibili::community::service::dm::v1::DmViewReq*
Arena::CreateMaybeMessage< ::bilibili::community::service::dm::v1::DmViewReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bilibili::community::service::dm::v1::DmViewReq >(arena);
}
template<> PROTOBUF_NOINLINE ::bilibili::community::service::dm::v1::DmViewReply*
Arena::CreateMaybeMessage< ::bilibili::community::service::dm::v1::DmViewReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bilibili::community::service::dm::v1::DmViewReply >(arena);
}
template<> PROTOBUF_NOINLINE ::bilibili::community::service::dm::v1::DmWebViewReply*
Arena::CreateMaybeMessage< ::bilibili::community::service::dm::v1::DmWebViewReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bilibili::community::service::dm::v1::DmWebViewReply >(arena);
}
template<> PROTOBUF_NOINLINE ::bilibili::community::service::dm::v1::CommandDm*
Arena::CreateMaybeMessage< ::bilibili::community::service::dm::v1::CommandDm >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bilibili::community::service::dm::v1::CommandDm >(arena);
}
template<> PROTOBUF_NOINLINE ::bilibili::community::service::dm::v1::DmSegConfig*
Arena::CreateMaybeMessage< ::bilibili::community::service::dm::v1::DmSegConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bilibili::community::service::dm::v1::DmSegConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::bilibili::community::service::dm::v1::VideoMask*
Arena::CreateMaybeMessage< ::bilibili::community::service::dm::v1::VideoMask >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bilibili::community::service::dm::v1::VideoMask >(arena);
}
template<> PROTOBUF_NOINLINE ::bilibili::community::service::dm::v1::VideoSubtitle*
Arena::CreateMaybeMessage< ::bilibili::community::service::dm::v1::VideoSubtitle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bilibili::community::service::dm::v1::VideoSubtitle >(arena);
}
template<> PROTOBUF_NOINLINE ::bilibili::community::service::dm::v1::DanmuWebPlayerConfig*
Arena::CreateMaybeMessage< ::bilibili::community::service::dm::v1::DanmuWebPlayerConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bilibili::community::service::dm::v1::DanmuWebPlayerConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::bilibili::community::service::dm::v1::SubtitleItem*
Arena::CreateMaybeMessage< ::bilibili::community::service::dm::v1::SubtitleItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bilibili::community::service::dm::v1::SubtitleItem >(arena);
}
template<> PROTOBUF_NOINLINE ::bilibili::community::service::dm::v1::UserInfo*
Arena::CreateMaybeMessage< ::bilibili::community::service::dm::v1::UserInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bilibili::community::service::dm::v1::UserInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::bilibili::community::service::dm::v1::DanmakuElem*
Arena::CreateMaybeMessage< ::bilibili::community::service::dm::v1::DanmakuElem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bilibili::community::service::dm::v1::DanmakuElem >(arena);
}
template<> PROTOBUF_NOINLINE ::bilibili::community::service::dm::v1::DmPlayerConfigReq*
Arena::CreateMaybeMessage< ::bilibili::community::service::dm::v1::DmPlayerConfigReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bilibili::community::service::dm::v1::DmPlayerConfigReq >(arena);
}
template<> PROTOBUF_NOINLINE ::bilibili::community::service::dm::v1::Response*
Arena::CreateMaybeMessage< ::bilibili::community::service::dm::v1::Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bilibili::community::service::dm::v1::Response >(arena);
}
template<> PROTOBUF_NOINLINE ::bilibili::community::service::dm::v1::DanmakuFlag*
Arena::CreateMaybeMessage< ::bilibili::community::service::dm::v1::DanmakuFlag >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bilibili::community::service::dm::v1::DanmakuFlag >(arena);
}
template<> PROTOBUF_NOINLINE ::bilibili::community::service::dm::v1::DanmakuFlagConfig*
Arena::CreateMaybeMessage< ::bilibili::community::service::dm::v1::DanmakuFlagConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bilibili::community::service::dm::v1::DanmakuFlagConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::bilibili::community::service::dm::v1::DanmakuAIFlag*
Arena::CreateMaybeMessage< ::bilibili::community::service::dm::v1::DanmakuAIFlag >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bilibili::community::service::dm::v1::DanmakuAIFlag >(arena);
}
template<> PROTOBUF_NOINLINE ::bilibili::community::service::dm::v1::DanmuPlayerViewConfig*
Arena::CreateMaybeMessage< ::bilibili::community::service::dm::v1::DanmuPlayerViewConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bilibili::community::service::dm::v1::DanmuPlayerViewConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::bilibili::community::service::dm::v1::DanmuDefaultPlayerConfig*
Arena::CreateMaybeMessage< ::bilibili::community::service::dm::v1::DanmuDefaultPlayerConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bilibili::community::service::dm::v1::DanmuDefaultPlayerConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::bilibili::community::service::dm::v1::DanmuPlayerConfig*
Arena::CreateMaybeMessage< ::bilibili::community::service::dm::v1::DanmuPlayerConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bilibili::community::service::dm::v1::DanmuPlayerConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::bilibili::community::service::dm::v1::DanmuPlayerDynamicConfig*
Arena::CreateMaybeMessage< ::bilibili::community::service::dm::v1::DanmuPlayerDynamicConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bilibili::community::service::dm::v1::DanmuPlayerDynamicConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::bilibili::community::service::dm::v1::PlayerDanmakuSwitch*
Arena::CreateMaybeMessage< ::bilibili::community::service::dm::v1::PlayerDanmakuSwitch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bilibili::community::service::dm::v1::PlayerDanmakuSwitch >(arena);
}
template<> PROTOBUF_NOINLINE ::bilibili::community::service::dm::v1::PlayerDanmakuSwitchSave*
Arena::CreateMaybeMessage< ::bilibili::community::service::dm::v1::PlayerDanmakuSwitchSave >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bilibili::community::service::dm::v1::PlayerDanmakuSwitchSave >(arena);
}
template<> PROTOBUF_NOINLINE ::bilibili::community::service::dm::v1::PlayerDanmakuUseDefaultConfig*
Arena::CreateMaybeMessage< ::bilibili::community::service::dm::v1::PlayerDanmakuUseDefaultConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bilibili::community::service::dm::v1::PlayerDanmakuUseDefaultConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::bilibili::community::service::dm::v1::PlayerDanmakuAiRecommendedSwitch*
Arena::CreateMaybeMessage< ::bilibili::community::service::dm::v1::PlayerDanmakuAiRecommendedSwitch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bilibili::community::service::dm::v1::PlayerDanmakuAiRecommendedSwitch >(arena);
}
template<> PROTOBUF_NOINLINE ::bilibili::community::service::dm::v1::PlayerDanmakuAiRecommendedLevel*
Arena::CreateMaybeMessage< ::bilibili::community::service::dm::v1::PlayerDanmakuAiRecommendedLevel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bilibili::community::service::dm::v1::PlayerDanmakuAiRecommendedLevel >(arena);
}
template<> PROTOBUF_NOINLINE ::bilibili::community::service::dm::v1::PlayerDanmakuBlocktop*
Arena::CreateMaybeMessage< ::bilibili::community::service::dm::v1::PlayerDanmakuBlocktop >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bilibili::community::service::dm::v1::PlayerDanmakuBlocktop >(arena);
}
template<> PROTOBUF_NOINLINE ::bilibili::community::service::dm::v1::PlayerDanmakuBlockscroll*
Arena::CreateMaybeMessage< ::bilibili::community::service::dm::v1::PlayerDanmakuBlockscroll >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bilibili::community::service::dm::v1::PlayerDanmakuBlockscroll >(arena);
}
template<> PROTOBUF_NOINLINE ::bilibili::community::service::dm::v1::PlayerDanmakuBlockbottom*
Arena::CreateMaybeMessage< ::bilibili::community::service::dm::v1::PlayerDanmakuBlockbottom >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bilibili::community::service::dm::v1::PlayerDanmakuBlockbottom >(arena);
}
template<> PROTOBUF_NOINLINE ::bilibili::community::service::dm::v1::PlayerDanmakuBlockcolorful*
Arena::CreateMaybeMessage< ::bilibili::community::service::dm::v1::PlayerDanmakuBlockcolorful >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bilibili::community::service::dm::v1::PlayerDanmakuBlockcolorful >(arena);
}
template<> PROTOBUF_NOINLINE ::bilibili::community::service::dm::v1::PlayerDanmakuBlockrepeat*
Arena::CreateMaybeMessage< ::bilibili::community::service::dm::v1::PlayerDanmakuBlockrepeat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bilibili::community::service::dm::v1::PlayerDanmakuBlockrepeat >(arena);
}
template<> PROTOBUF_NOINLINE ::bilibili::community::service::dm::v1::PlayerDanmakuBlockspecial*
Arena::CreateMaybeMessage< ::bilibili::community::service::dm::v1::PlayerDanmakuBlockspecial >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bilibili::community::service::dm::v1::PlayerDanmakuBlockspecial >(arena);
}
template<> PROTOBUF_NOINLINE ::bilibili::community::service::dm::v1::PlayerDanmakuOpacity*
Arena::CreateMaybeMessage< ::bilibili::community::service::dm::v1::PlayerDanmakuOpacity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bilibili::community::service::dm::v1::PlayerDanmakuOpacity >(arena);
}
template<> PROTOBUF_NOINLINE ::bilibili::community::service::dm::v1::PlayerDanmakuScalingfactor*
Arena::CreateMaybeMessage< ::bilibili::community::service::dm::v1::PlayerDanmakuScalingfactor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bilibili::community::service::dm::v1::PlayerDanmakuScalingfactor >(arena);
}
template<> PROTOBUF_NOINLINE ::bilibili::community::service::dm::v1::PlayerDanmakuDomain*
Arena::CreateMaybeMessage< ::bilibili::community::service::dm::v1::PlayerDanmakuDomain >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bilibili::community::service::dm::v1::PlayerDanmakuDomain >(arena);
}
template<> PROTOBUF_NOINLINE ::bilibili::community::service::dm::v1::PlayerDanmakuSpeed*
Arena::CreateMaybeMessage< ::bilibili::community::service::dm::v1::PlayerDanmakuSpeed >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bilibili::community::service::dm::v1::PlayerDanmakuSpeed >(arena);
}
template<> PROTOBUF_NOINLINE ::bilibili::community::service::dm::v1::PlayerDanmakuEnableblocklist*
Arena::CreateMaybeMessage< ::bilibili::community::service::dm::v1::PlayerDanmakuEnableblocklist >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bilibili::community::service::dm::v1::PlayerDanmakuEnableblocklist >(arena);
}
template<> PROTOBUF_NOINLINE ::bilibili::community::service::dm::v1::InlinePlayerDanmakuSwitch*
Arena::CreateMaybeMessage< ::bilibili::community::service::dm::v1::InlinePlayerDanmakuSwitch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bilibili::community::service::dm::v1::InlinePlayerDanmakuSwitch >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
