// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: reply.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_reply_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_reply_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_reply_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_reply_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_reply_2eproto;
namespace bilibili {
namespace community {
namespace service {
namespace dm {
namespace v1 {
class CommandDm;
struct CommandDmDefaultTypeInternal;
extern CommandDmDefaultTypeInternal _CommandDm_default_instance_;
class DanmakuAIFlag;
struct DanmakuAIFlagDefaultTypeInternal;
extern DanmakuAIFlagDefaultTypeInternal _DanmakuAIFlag_default_instance_;
class DanmakuElem;
struct DanmakuElemDefaultTypeInternal;
extern DanmakuElemDefaultTypeInternal _DanmakuElem_default_instance_;
class DanmakuFlag;
struct DanmakuFlagDefaultTypeInternal;
extern DanmakuFlagDefaultTypeInternal _DanmakuFlag_default_instance_;
class DanmakuFlagConfig;
struct DanmakuFlagConfigDefaultTypeInternal;
extern DanmakuFlagConfigDefaultTypeInternal _DanmakuFlagConfig_default_instance_;
class DanmuDefaultPlayerConfig;
struct DanmuDefaultPlayerConfigDefaultTypeInternal;
extern DanmuDefaultPlayerConfigDefaultTypeInternal _DanmuDefaultPlayerConfig_default_instance_;
class DanmuPlayerConfig;
struct DanmuPlayerConfigDefaultTypeInternal;
extern DanmuPlayerConfigDefaultTypeInternal _DanmuPlayerConfig_default_instance_;
class DanmuPlayerDynamicConfig;
struct DanmuPlayerDynamicConfigDefaultTypeInternal;
extern DanmuPlayerDynamicConfigDefaultTypeInternal _DanmuPlayerDynamicConfig_default_instance_;
class DanmuPlayerViewConfig;
struct DanmuPlayerViewConfigDefaultTypeInternal;
extern DanmuPlayerViewConfigDefaultTypeInternal _DanmuPlayerViewConfig_default_instance_;
class DanmuWebPlayerConfig;
struct DanmuWebPlayerConfigDefaultTypeInternal;
extern DanmuWebPlayerConfigDefaultTypeInternal _DanmuWebPlayerConfig_default_instance_;
class DmPlayerConfigReq;
struct DmPlayerConfigReqDefaultTypeInternal;
extern DmPlayerConfigReqDefaultTypeInternal _DmPlayerConfigReq_default_instance_;
class DmSegConfig;
struct DmSegConfigDefaultTypeInternal;
extern DmSegConfigDefaultTypeInternal _DmSegConfig_default_instance_;
class DmSegMobileReply;
struct DmSegMobileReplyDefaultTypeInternal;
extern DmSegMobileReplyDefaultTypeInternal _DmSegMobileReply_default_instance_;
class DmSegMobileReq;
struct DmSegMobileReqDefaultTypeInternal;
extern DmSegMobileReqDefaultTypeInternal _DmSegMobileReq_default_instance_;
class DmSegOttReply;
struct DmSegOttReplyDefaultTypeInternal;
extern DmSegOttReplyDefaultTypeInternal _DmSegOttReply_default_instance_;
class DmSegOttReq;
struct DmSegOttReqDefaultTypeInternal;
extern DmSegOttReqDefaultTypeInternal _DmSegOttReq_default_instance_;
class DmSegSDKReply;
struct DmSegSDKReplyDefaultTypeInternal;
extern DmSegSDKReplyDefaultTypeInternal _DmSegSDKReply_default_instance_;
class DmSegSDKReq;
struct DmSegSDKReqDefaultTypeInternal;
extern DmSegSDKReqDefaultTypeInternal _DmSegSDKReq_default_instance_;
class DmViewReply;
struct DmViewReplyDefaultTypeInternal;
extern DmViewReplyDefaultTypeInternal _DmViewReply_default_instance_;
class DmViewReq;
struct DmViewReqDefaultTypeInternal;
extern DmViewReqDefaultTypeInternal _DmViewReq_default_instance_;
class DmWebViewReply;
struct DmWebViewReplyDefaultTypeInternal;
extern DmWebViewReplyDefaultTypeInternal _DmWebViewReply_default_instance_;
class InlinePlayerDanmakuSwitch;
struct InlinePlayerDanmakuSwitchDefaultTypeInternal;
extern InlinePlayerDanmakuSwitchDefaultTypeInternal _InlinePlayerDanmakuSwitch_default_instance_;
class PlayerDanmakuAiRecommendedLevel;
struct PlayerDanmakuAiRecommendedLevelDefaultTypeInternal;
extern PlayerDanmakuAiRecommendedLevelDefaultTypeInternal _PlayerDanmakuAiRecommendedLevel_default_instance_;
class PlayerDanmakuAiRecommendedSwitch;
struct PlayerDanmakuAiRecommendedSwitchDefaultTypeInternal;
extern PlayerDanmakuAiRecommendedSwitchDefaultTypeInternal _PlayerDanmakuAiRecommendedSwitch_default_instance_;
class PlayerDanmakuBlockbottom;
struct PlayerDanmakuBlockbottomDefaultTypeInternal;
extern PlayerDanmakuBlockbottomDefaultTypeInternal _PlayerDanmakuBlockbottom_default_instance_;
class PlayerDanmakuBlockcolorful;
struct PlayerDanmakuBlockcolorfulDefaultTypeInternal;
extern PlayerDanmakuBlockcolorfulDefaultTypeInternal _PlayerDanmakuBlockcolorful_default_instance_;
class PlayerDanmakuBlockrepeat;
struct PlayerDanmakuBlockrepeatDefaultTypeInternal;
extern PlayerDanmakuBlockrepeatDefaultTypeInternal _PlayerDanmakuBlockrepeat_default_instance_;
class PlayerDanmakuBlockscroll;
struct PlayerDanmakuBlockscrollDefaultTypeInternal;
extern PlayerDanmakuBlockscrollDefaultTypeInternal _PlayerDanmakuBlockscroll_default_instance_;
class PlayerDanmakuBlockspecial;
struct PlayerDanmakuBlockspecialDefaultTypeInternal;
extern PlayerDanmakuBlockspecialDefaultTypeInternal _PlayerDanmakuBlockspecial_default_instance_;
class PlayerDanmakuBlocktop;
struct PlayerDanmakuBlocktopDefaultTypeInternal;
extern PlayerDanmakuBlocktopDefaultTypeInternal _PlayerDanmakuBlocktop_default_instance_;
class PlayerDanmakuDomain;
struct PlayerDanmakuDomainDefaultTypeInternal;
extern PlayerDanmakuDomainDefaultTypeInternal _PlayerDanmakuDomain_default_instance_;
class PlayerDanmakuEnableblocklist;
struct PlayerDanmakuEnableblocklistDefaultTypeInternal;
extern PlayerDanmakuEnableblocklistDefaultTypeInternal _PlayerDanmakuEnableblocklist_default_instance_;
class PlayerDanmakuOpacity;
struct PlayerDanmakuOpacityDefaultTypeInternal;
extern PlayerDanmakuOpacityDefaultTypeInternal _PlayerDanmakuOpacity_default_instance_;
class PlayerDanmakuScalingfactor;
struct PlayerDanmakuScalingfactorDefaultTypeInternal;
extern PlayerDanmakuScalingfactorDefaultTypeInternal _PlayerDanmakuScalingfactor_default_instance_;
class PlayerDanmakuSpeed;
struct PlayerDanmakuSpeedDefaultTypeInternal;
extern PlayerDanmakuSpeedDefaultTypeInternal _PlayerDanmakuSpeed_default_instance_;
class PlayerDanmakuSwitch;
struct PlayerDanmakuSwitchDefaultTypeInternal;
extern PlayerDanmakuSwitchDefaultTypeInternal _PlayerDanmakuSwitch_default_instance_;
class PlayerDanmakuSwitchSave;
struct PlayerDanmakuSwitchSaveDefaultTypeInternal;
extern PlayerDanmakuSwitchSaveDefaultTypeInternal _PlayerDanmakuSwitchSave_default_instance_;
class PlayerDanmakuUseDefaultConfig;
struct PlayerDanmakuUseDefaultConfigDefaultTypeInternal;
extern PlayerDanmakuUseDefaultConfigDefaultTypeInternal _PlayerDanmakuUseDefaultConfig_default_instance_;
class Response;
struct ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
class SubtitleItem;
struct SubtitleItemDefaultTypeInternal;
extern SubtitleItemDefaultTypeInternal _SubtitleItem_default_instance_;
class UserInfo;
struct UserInfoDefaultTypeInternal;
extern UserInfoDefaultTypeInternal _UserInfo_default_instance_;
class VideoMask;
struct VideoMaskDefaultTypeInternal;
extern VideoMaskDefaultTypeInternal _VideoMask_default_instance_;
class VideoSubtitle;
struct VideoSubtitleDefaultTypeInternal;
extern VideoSubtitleDefaultTypeInternal _VideoSubtitle_default_instance_;
}  // namespace v1
}  // namespace dm
}  // namespace service
}  // namespace community
}  // namespace bilibili
PROTOBUF_NAMESPACE_OPEN
template<> ::bilibili::community::service::dm::v1::CommandDm* Arena::CreateMaybeMessage<::bilibili::community::service::dm::v1::CommandDm>(Arena*);
template<> ::bilibili::community::service::dm::v1::DanmakuAIFlag* Arena::CreateMaybeMessage<::bilibili::community::service::dm::v1::DanmakuAIFlag>(Arena*);
template<> ::bilibili::community::service::dm::v1::DanmakuElem* Arena::CreateMaybeMessage<::bilibili::community::service::dm::v1::DanmakuElem>(Arena*);
template<> ::bilibili::community::service::dm::v1::DanmakuFlag* Arena::CreateMaybeMessage<::bilibili::community::service::dm::v1::DanmakuFlag>(Arena*);
template<> ::bilibili::community::service::dm::v1::DanmakuFlagConfig* Arena::CreateMaybeMessage<::bilibili::community::service::dm::v1::DanmakuFlagConfig>(Arena*);
template<> ::bilibili::community::service::dm::v1::DanmuDefaultPlayerConfig* Arena::CreateMaybeMessage<::bilibili::community::service::dm::v1::DanmuDefaultPlayerConfig>(Arena*);
template<> ::bilibili::community::service::dm::v1::DanmuPlayerConfig* Arena::CreateMaybeMessage<::bilibili::community::service::dm::v1::DanmuPlayerConfig>(Arena*);
template<> ::bilibili::community::service::dm::v1::DanmuPlayerDynamicConfig* Arena::CreateMaybeMessage<::bilibili::community::service::dm::v1::DanmuPlayerDynamicConfig>(Arena*);
template<> ::bilibili::community::service::dm::v1::DanmuPlayerViewConfig* Arena::CreateMaybeMessage<::bilibili::community::service::dm::v1::DanmuPlayerViewConfig>(Arena*);
template<> ::bilibili::community::service::dm::v1::DanmuWebPlayerConfig* Arena::CreateMaybeMessage<::bilibili::community::service::dm::v1::DanmuWebPlayerConfig>(Arena*);
template<> ::bilibili::community::service::dm::v1::DmPlayerConfigReq* Arena::CreateMaybeMessage<::bilibili::community::service::dm::v1::DmPlayerConfigReq>(Arena*);
template<> ::bilibili::community::service::dm::v1::DmSegConfig* Arena::CreateMaybeMessage<::bilibili::community::service::dm::v1::DmSegConfig>(Arena*);
template<> ::bilibili::community::service::dm::v1::DmSegMobileReply* Arena::CreateMaybeMessage<::bilibili::community::service::dm::v1::DmSegMobileReply>(Arena*);
template<> ::bilibili::community::service::dm::v1::DmSegMobileReq* Arena::CreateMaybeMessage<::bilibili::community::service::dm::v1::DmSegMobileReq>(Arena*);
template<> ::bilibili::community::service::dm::v1::DmSegOttReply* Arena::CreateMaybeMessage<::bilibili::community::service::dm::v1::DmSegOttReply>(Arena*);
template<> ::bilibili::community::service::dm::v1::DmSegOttReq* Arena::CreateMaybeMessage<::bilibili::community::service::dm::v1::DmSegOttReq>(Arena*);
template<> ::bilibili::community::service::dm::v1::DmSegSDKReply* Arena::CreateMaybeMessage<::bilibili::community::service::dm::v1::DmSegSDKReply>(Arena*);
template<> ::bilibili::community::service::dm::v1::DmSegSDKReq* Arena::CreateMaybeMessage<::bilibili::community::service::dm::v1::DmSegSDKReq>(Arena*);
template<> ::bilibili::community::service::dm::v1::DmViewReply* Arena::CreateMaybeMessage<::bilibili::community::service::dm::v1::DmViewReply>(Arena*);
template<> ::bilibili::community::service::dm::v1::DmViewReq* Arena::CreateMaybeMessage<::bilibili::community::service::dm::v1::DmViewReq>(Arena*);
template<> ::bilibili::community::service::dm::v1::DmWebViewReply* Arena::CreateMaybeMessage<::bilibili::community::service::dm::v1::DmWebViewReply>(Arena*);
template<> ::bilibili::community::service::dm::v1::InlinePlayerDanmakuSwitch* Arena::CreateMaybeMessage<::bilibili::community::service::dm::v1::InlinePlayerDanmakuSwitch>(Arena*);
template<> ::bilibili::community::service::dm::v1::PlayerDanmakuAiRecommendedLevel* Arena::CreateMaybeMessage<::bilibili::community::service::dm::v1::PlayerDanmakuAiRecommendedLevel>(Arena*);
template<> ::bilibili::community::service::dm::v1::PlayerDanmakuAiRecommendedSwitch* Arena::CreateMaybeMessage<::bilibili::community::service::dm::v1::PlayerDanmakuAiRecommendedSwitch>(Arena*);
template<> ::bilibili::community::service::dm::v1::PlayerDanmakuBlockbottom* Arena::CreateMaybeMessage<::bilibili::community::service::dm::v1::PlayerDanmakuBlockbottom>(Arena*);
template<> ::bilibili::community::service::dm::v1::PlayerDanmakuBlockcolorful* Arena::CreateMaybeMessage<::bilibili::community::service::dm::v1::PlayerDanmakuBlockcolorful>(Arena*);
template<> ::bilibili::community::service::dm::v1::PlayerDanmakuBlockrepeat* Arena::CreateMaybeMessage<::bilibili::community::service::dm::v1::PlayerDanmakuBlockrepeat>(Arena*);
template<> ::bilibili::community::service::dm::v1::PlayerDanmakuBlockscroll* Arena::CreateMaybeMessage<::bilibili::community::service::dm::v1::PlayerDanmakuBlockscroll>(Arena*);
template<> ::bilibili::community::service::dm::v1::PlayerDanmakuBlockspecial* Arena::CreateMaybeMessage<::bilibili::community::service::dm::v1::PlayerDanmakuBlockspecial>(Arena*);
template<> ::bilibili::community::service::dm::v1::PlayerDanmakuBlocktop* Arena::CreateMaybeMessage<::bilibili::community::service::dm::v1::PlayerDanmakuBlocktop>(Arena*);
template<> ::bilibili::community::service::dm::v1::PlayerDanmakuDomain* Arena::CreateMaybeMessage<::bilibili::community::service::dm::v1::PlayerDanmakuDomain>(Arena*);
template<> ::bilibili::community::service::dm::v1::PlayerDanmakuEnableblocklist* Arena::CreateMaybeMessage<::bilibili::community::service::dm::v1::PlayerDanmakuEnableblocklist>(Arena*);
template<> ::bilibili::community::service::dm::v1::PlayerDanmakuOpacity* Arena::CreateMaybeMessage<::bilibili::community::service::dm::v1::PlayerDanmakuOpacity>(Arena*);
template<> ::bilibili::community::service::dm::v1::PlayerDanmakuScalingfactor* Arena::CreateMaybeMessage<::bilibili::community::service::dm::v1::PlayerDanmakuScalingfactor>(Arena*);
template<> ::bilibili::community::service::dm::v1::PlayerDanmakuSpeed* Arena::CreateMaybeMessage<::bilibili::community::service::dm::v1::PlayerDanmakuSpeed>(Arena*);
template<> ::bilibili::community::service::dm::v1::PlayerDanmakuSwitch* Arena::CreateMaybeMessage<::bilibili::community::service::dm::v1::PlayerDanmakuSwitch>(Arena*);
template<> ::bilibili::community::service::dm::v1::PlayerDanmakuSwitchSave* Arena::CreateMaybeMessage<::bilibili::community::service::dm::v1::PlayerDanmakuSwitchSave>(Arena*);
template<> ::bilibili::community::service::dm::v1::PlayerDanmakuUseDefaultConfig* Arena::CreateMaybeMessage<::bilibili::community::service::dm::v1::PlayerDanmakuUseDefaultConfig>(Arena*);
template<> ::bilibili::community::service::dm::v1::Response* Arena::CreateMaybeMessage<::bilibili::community::service::dm::v1::Response>(Arena*);
template<> ::bilibili::community::service::dm::v1::SubtitleItem* Arena::CreateMaybeMessage<::bilibili::community::service::dm::v1::SubtitleItem>(Arena*);
template<> ::bilibili::community::service::dm::v1::UserInfo* Arena::CreateMaybeMessage<::bilibili::community::service::dm::v1::UserInfo>(Arena*);
template<> ::bilibili::community::service::dm::v1::VideoMask* Arena::CreateMaybeMessage<::bilibili::community::service::dm::v1::VideoMask>(Arena*);
template<> ::bilibili::community::service::dm::v1::VideoSubtitle* Arena::CreateMaybeMessage<::bilibili::community::service::dm::v1::VideoSubtitle>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace bilibili {
namespace community {
namespace service {
namespace dm {
namespace v1 {

enum DMAttrBit : int {
  DMAttrBitProtect = 0,
  DMAttrBitFromLive = 1,
  DMAttrHighLike = 2,
  DMAttrBit_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  DMAttrBit_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool DMAttrBit_IsValid(int value);
constexpr DMAttrBit DMAttrBit_MIN = DMAttrBitProtect;
constexpr DMAttrBit DMAttrBit_MAX = DMAttrHighLike;
constexpr int DMAttrBit_ARRAYSIZE = DMAttrBit_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DMAttrBit_descriptor();
template<typename T>
inline const std::string& DMAttrBit_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DMAttrBit>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DMAttrBit_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DMAttrBit_descriptor(), enum_t_value);
}
inline bool DMAttrBit_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DMAttrBit* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DMAttrBit>(
    DMAttrBit_descriptor(), name, value);
}
// ===================================================================

class DmSegSDKReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bilibili.community.service.dm.v1.DmSegSDKReq) */ {
 public:
  inline DmSegSDKReq() : DmSegSDKReq(nullptr) {}
  ~DmSegSDKReq() override;
  explicit PROTOBUF_CONSTEXPR DmSegSDKReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DmSegSDKReq(const DmSegSDKReq& from);
  DmSegSDKReq(DmSegSDKReq&& from) noexcept
    : DmSegSDKReq() {
    *this = ::std::move(from);
  }

  inline DmSegSDKReq& operator=(const DmSegSDKReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline DmSegSDKReq& operator=(DmSegSDKReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DmSegSDKReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const DmSegSDKReq* internal_default_instance() {
    return reinterpret_cast<const DmSegSDKReq*>(
               &_DmSegSDKReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DmSegSDKReq& a, DmSegSDKReq& b) {
    a.Swap(&b);
  }
  inline void Swap(DmSegSDKReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DmSegSDKReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DmSegSDKReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DmSegSDKReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DmSegSDKReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DmSegSDKReq& from) {
    DmSegSDKReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DmSegSDKReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bilibili.community.service.dm.v1.DmSegSDKReq";
  }
  protected:
  explicit DmSegSDKReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPidFieldNumber = 1,
    kOidFieldNumber = 2,
    kSegmentIndexFieldNumber = 4,
    kTypeFieldNumber = 3,
  };
  // int64 pid = 1;
  void clear_pid();
  int64_t pid() const;
  void set_pid(int64_t value);
  private:
  int64_t _internal_pid() const;
  void _internal_set_pid(int64_t value);
  public:

  // int64 oid = 2;
  void clear_oid();
  int64_t oid() const;
  void set_oid(int64_t value);
  private:
  int64_t _internal_oid() const;
  void _internal_set_oid(int64_t value);
  public:

  // int64 segment_index = 4;
  void clear_segment_index();
  int64_t segment_index() const;
  void set_segment_index(int64_t value);
  private:
  int64_t _internal_segment_index() const;
  void _internal_set_segment_index(int64_t value);
  public:

  // int32 type = 3;
  void clear_type();
  int32_t type() const;
  void set_type(int32_t value);
  private:
  int32_t _internal_type() const;
  void _internal_set_type(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:bilibili.community.service.dm.v1.DmSegSDKReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t pid_;
    int64_t oid_;
    int64_t segment_index_;
    int32_t type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_reply_2eproto;
};
// -------------------------------------------------------------------

class DmSegSDKReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bilibili.community.service.dm.v1.DmSegSDKReply) */ {
 public:
  inline DmSegSDKReply() : DmSegSDKReply(nullptr) {}
  ~DmSegSDKReply() override;
  explicit PROTOBUF_CONSTEXPR DmSegSDKReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DmSegSDKReply(const DmSegSDKReply& from);
  DmSegSDKReply(DmSegSDKReply&& from) noexcept
    : DmSegSDKReply() {
    *this = ::std::move(from);
  }

  inline DmSegSDKReply& operator=(const DmSegSDKReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline DmSegSDKReply& operator=(DmSegSDKReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DmSegSDKReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const DmSegSDKReply* internal_default_instance() {
    return reinterpret_cast<const DmSegSDKReply*>(
               &_DmSegSDKReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DmSegSDKReply& a, DmSegSDKReply& b) {
    a.Swap(&b);
  }
  inline void Swap(DmSegSDKReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DmSegSDKReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DmSegSDKReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DmSegSDKReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DmSegSDKReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DmSegSDKReply& from) {
    DmSegSDKReply::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DmSegSDKReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bilibili.community.service.dm.v1.DmSegSDKReply";
  }
  protected:
  explicit DmSegSDKReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kElemsFieldNumber = 2,
    kClosedFieldNumber = 1,
  };
  // repeated .bilibili.community.service.dm.v1.DanmakuElem elems = 2;
  int elems_size() const;
  private:
  int _internal_elems_size() const;
  public:
  void clear_elems();
  ::bilibili::community::service::dm::v1::DanmakuElem* mutable_elems(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bilibili::community::service::dm::v1::DanmakuElem >*
      mutable_elems();
  private:
  const ::bilibili::community::service::dm::v1::DanmakuElem& _internal_elems(int index) const;
  ::bilibili::community::service::dm::v1::DanmakuElem* _internal_add_elems();
  public:
  const ::bilibili::community::service::dm::v1::DanmakuElem& elems(int index) const;
  ::bilibili::community::service::dm::v1::DanmakuElem* add_elems();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bilibili::community::service::dm::v1::DanmakuElem >&
      elems() const;

  // bool closed = 1;
  void clear_closed();
  bool closed() const;
  void set_closed(bool value);
  private:
  bool _internal_closed() const;
  void _internal_set_closed(bool value);
  public:

  // @@protoc_insertion_point(class_scope:bilibili.community.service.dm.v1.DmSegSDKReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bilibili::community::service::dm::v1::DanmakuElem > elems_;
    bool closed_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_reply_2eproto;
};
// -------------------------------------------------------------------

class DmSegOttReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bilibili.community.service.dm.v1.DmSegOttReq) */ {
 public:
  inline DmSegOttReq() : DmSegOttReq(nullptr) {}
  ~DmSegOttReq() override;
  explicit PROTOBUF_CONSTEXPR DmSegOttReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DmSegOttReq(const DmSegOttReq& from);
  DmSegOttReq(DmSegOttReq&& from) noexcept
    : DmSegOttReq() {
    *this = ::std::move(from);
  }

  inline DmSegOttReq& operator=(const DmSegOttReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline DmSegOttReq& operator=(DmSegOttReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DmSegOttReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const DmSegOttReq* internal_default_instance() {
    return reinterpret_cast<const DmSegOttReq*>(
               &_DmSegOttReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DmSegOttReq& a, DmSegOttReq& b) {
    a.Swap(&b);
  }
  inline void Swap(DmSegOttReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DmSegOttReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DmSegOttReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DmSegOttReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DmSegOttReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DmSegOttReq& from) {
    DmSegOttReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DmSegOttReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bilibili.community.service.dm.v1.DmSegOttReq";
  }
  protected:
  explicit DmSegOttReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPidFieldNumber = 1,
    kOidFieldNumber = 2,
    kSegmentIndexFieldNumber = 4,
    kTypeFieldNumber = 3,
  };
  // int64 pid = 1;
  void clear_pid();
  int64_t pid() const;
  void set_pid(int64_t value);
  private:
  int64_t _internal_pid() const;
  void _internal_set_pid(int64_t value);
  public:

  // int64 oid = 2;
  void clear_oid();
  int64_t oid() const;
  void set_oid(int64_t value);
  private:
  int64_t _internal_oid() const;
  void _internal_set_oid(int64_t value);
  public:

  // int64 segment_index = 4;
  void clear_segment_index();
  int64_t segment_index() const;
  void set_segment_index(int64_t value);
  private:
  int64_t _internal_segment_index() const;
  void _internal_set_segment_index(int64_t value);
  public:

  // int32 type = 3;
  void clear_type();
  int32_t type() const;
  void set_type(int32_t value);
  private:
  int32_t _internal_type() const;
  void _internal_set_type(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:bilibili.community.service.dm.v1.DmSegOttReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t pid_;
    int64_t oid_;
    int64_t segment_index_;
    int32_t type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_reply_2eproto;
};
// -------------------------------------------------------------------

class DmSegOttReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bilibili.community.service.dm.v1.DmSegOttReply) */ {
 public:
  inline DmSegOttReply() : DmSegOttReply(nullptr) {}
  ~DmSegOttReply() override;
  explicit PROTOBUF_CONSTEXPR DmSegOttReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DmSegOttReply(const DmSegOttReply& from);
  DmSegOttReply(DmSegOttReply&& from) noexcept
    : DmSegOttReply() {
    *this = ::std::move(from);
  }

  inline DmSegOttReply& operator=(const DmSegOttReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline DmSegOttReply& operator=(DmSegOttReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DmSegOttReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const DmSegOttReply* internal_default_instance() {
    return reinterpret_cast<const DmSegOttReply*>(
               &_DmSegOttReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DmSegOttReply& a, DmSegOttReply& b) {
    a.Swap(&b);
  }
  inline void Swap(DmSegOttReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DmSegOttReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DmSegOttReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DmSegOttReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DmSegOttReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DmSegOttReply& from) {
    DmSegOttReply::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DmSegOttReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bilibili.community.service.dm.v1.DmSegOttReply";
  }
  protected:
  explicit DmSegOttReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kElemsFieldNumber = 2,
    kClosedFieldNumber = 1,
  };
  // repeated .bilibili.community.service.dm.v1.DanmakuElem elems = 2;
  int elems_size() const;
  private:
  int _internal_elems_size() const;
  public:
  void clear_elems();
  ::bilibili::community::service::dm::v1::DanmakuElem* mutable_elems(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bilibili::community::service::dm::v1::DanmakuElem >*
      mutable_elems();
  private:
  const ::bilibili::community::service::dm::v1::DanmakuElem& _internal_elems(int index) const;
  ::bilibili::community::service::dm::v1::DanmakuElem* _internal_add_elems();
  public:
  const ::bilibili::community::service::dm::v1::DanmakuElem& elems(int index) const;
  ::bilibili::community::service::dm::v1::DanmakuElem* add_elems();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bilibili::community::service::dm::v1::DanmakuElem >&
      elems() const;

  // bool closed = 1;
  void clear_closed();
  bool closed() const;
  void set_closed(bool value);
  private:
  bool _internal_closed() const;
  void _internal_set_closed(bool value);
  public:

  // @@protoc_insertion_point(class_scope:bilibili.community.service.dm.v1.DmSegOttReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bilibili::community::service::dm::v1::DanmakuElem > elems_;
    bool closed_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_reply_2eproto;
};
// -------------------------------------------------------------------

class DmSegMobileReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bilibili.community.service.dm.v1.DmSegMobileReq) */ {
 public:
  inline DmSegMobileReq() : DmSegMobileReq(nullptr) {}
  ~DmSegMobileReq() override;
  explicit PROTOBUF_CONSTEXPR DmSegMobileReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DmSegMobileReq(const DmSegMobileReq& from);
  DmSegMobileReq(DmSegMobileReq&& from) noexcept
    : DmSegMobileReq() {
    *this = ::std::move(from);
  }

  inline DmSegMobileReq& operator=(const DmSegMobileReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline DmSegMobileReq& operator=(DmSegMobileReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DmSegMobileReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const DmSegMobileReq* internal_default_instance() {
    return reinterpret_cast<const DmSegMobileReq*>(
               &_DmSegMobileReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DmSegMobileReq& a, DmSegMobileReq& b) {
    a.Swap(&b);
  }
  inline void Swap(DmSegMobileReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DmSegMobileReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DmSegMobileReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DmSegMobileReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DmSegMobileReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DmSegMobileReq& from) {
    DmSegMobileReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DmSegMobileReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bilibili.community.service.dm.v1.DmSegMobileReq";
  }
  protected:
  explicit DmSegMobileReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPidFieldNumber = 1,
    kOidFieldNumber = 2,
    kSegmentIndexFieldNumber = 4,
    kTypeFieldNumber = 3,
    kTeenagersModeFieldNumber = 5,
  };
  // int64 pid = 1;
  void clear_pid();
  int64_t pid() const;
  void set_pid(int64_t value);
  private:
  int64_t _internal_pid() const;
  void _internal_set_pid(int64_t value);
  public:

  // int64 oid = 2;
  void clear_oid();
  int64_t oid() const;
  void set_oid(int64_t value);
  private:
  int64_t _internal_oid() const;
  void _internal_set_oid(int64_t value);
  public:

  // int64 segment_index = 4;
  void clear_segment_index();
  int64_t segment_index() const;
  void set_segment_index(int64_t value);
  private:
  int64_t _internal_segment_index() const;
  void _internal_set_segment_index(int64_t value);
  public:

  // int32 type = 3;
  void clear_type();
  int32_t type() const;
  void set_type(int32_t value);
  private:
  int32_t _internal_type() const;
  void _internal_set_type(int32_t value);
  public:

  // int32 teenagers_mode = 5;
  void clear_teenagers_mode();
  int32_t teenagers_mode() const;
  void set_teenagers_mode(int32_t value);
  private:
  int32_t _internal_teenagers_mode() const;
  void _internal_set_teenagers_mode(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:bilibili.community.service.dm.v1.DmSegMobileReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t pid_;
    int64_t oid_;
    int64_t segment_index_;
    int32_t type_;
    int32_t teenagers_mode_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_reply_2eproto;
};
// -------------------------------------------------------------------

class DmSegMobileReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bilibili.community.service.dm.v1.DmSegMobileReply) */ {
 public:
  inline DmSegMobileReply() : DmSegMobileReply(nullptr) {}
  ~DmSegMobileReply() override;
  explicit PROTOBUF_CONSTEXPR DmSegMobileReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DmSegMobileReply(const DmSegMobileReply& from);
  DmSegMobileReply(DmSegMobileReply&& from) noexcept
    : DmSegMobileReply() {
    *this = ::std::move(from);
  }

  inline DmSegMobileReply& operator=(const DmSegMobileReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline DmSegMobileReply& operator=(DmSegMobileReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DmSegMobileReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const DmSegMobileReply* internal_default_instance() {
    return reinterpret_cast<const DmSegMobileReply*>(
               &_DmSegMobileReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(DmSegMobileReply& a, DmSegMobileReply& b) {
    a.Swap(&b);
  }
  inline void Swap(DmSegMobileReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DmSegMobileReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DmSegMobileReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DmSegMobileReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DmSegMobileReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DmSegMobileReply& from) {
    DmSegMobileReply::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DmSegMobileReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bilibili.community.service.dm.v1.DmSegMobileReply";
  }
  protected:
  explicit DmSegMobileReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kElemsFieldNumber = 1,
    kAiFlagFieldNumber = 3,
    kStateFieldNumber = 2,
  };
  // repeated .bilibili.community.service.dm.v1.DanmakuElem elems = 1;
  int elems_size() const;
  private:
  int _internal_elems_size() const;
  public:
  void clear_elems();
  ::bilibili::community::service::dm::v1::DanmakuElem* mutable_elems(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bilibili::community::service::dm::v1::DanmakuElem >*
      mutable_elems();
  private:
  const ::bilibili::community::service::dm::v1::DanmakuElem& _internal_elems(int index) const;
  ::bilibili::community::service::dm::v1::DanmakuElem* _internal_add_elems();
  public:
  const ::bilibili::community::service::dm::v1::DanmakuElem& elems(int index) const;
  ::bilibili::community::service::dm::v1::DanmakuElem* add_elems();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bilibili::community::service::dm::v1::DanmakuElem >&
      elems() const;

  // .bilibili.community.service.dm.v1.DanmakuAIFlag ai_flag = 3;
  bool has_ai_flag() const;
  private:
  bool _internal_has_ai_flag() const;
  public:
  void clear_ai_flag();
  const ::bilibili::community::service::dm::v1::DanmakuAIFlag& ai_flag() const;
  PROTOBUF_NODISCARD ::bilibili::community::service::dm::v1::DanmakuAIFlag* release_ai_flag();
  ::bilibili::community::service::dm::v1::DanmakuAIFlag* mutable_ai_flag();
  void set_allocated_ai_flag(::bilibili::community::service::dm::v1::DanmakuAIFlag* ai_flag);
  private:
  const ::bilibili::community::service::dm::v1::DanmakuAIFlag& _internal_ai_flag() const;
  ::bilibili::community::service::dm::v1::DanmakuAIFlag* _internal_mutable_ai_flag();
  public:
  void unsafe_arena_set_allocated_ai_flag(
      ::bilibili::community::service::dm::v1::DanmakuAIFlag* ai_flag);
  ::bilibili::community::service::dm::v1::DanmakuAIFlag* unsafe_arena_release_ai_flag();

  // int32 state = 2;
  void clear_state();
  int32_t state() const;
  void set_state(int32_t value);
  private:
  int32_t _internal_state() const;
  void _internal_set_state(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:bilibili.community.service.dm.v1.DmSegMobileReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bilibili::community::service::dm::v1::DanmakuElem > elems_;
    ::bilibili::community::service::dm::v1::DanmakuAIFlag* ai_flag_;
    int32_t state_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_reply_2eproto;
};
// -------------------------------------------------------------------

class DmViewReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bilibili.community.service.dm.v1.DmViewReq) */ {
 public:
  inline DmViewReq() : DmViewReq(nullptr) {}
  ~DmViewReq() override;
  explicit PROTOBUF_CONSTEXPR DmViewReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DmViewReq(const DmViewReq& from);
  DmViewReq(DmViewReq&& from) noexcept
    : DmViewReq() {
    *this = ::std::move(from);
  }

  inline DmViewReq& operator=(const DmViewReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline DmViewReq& operator=(DmViewReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DmViewReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const DmViewReq* internal_default_instance() {
    return reinterpret_cast<const DmViewReq*>(
               &_DmViewReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(DmViewReq& a, DmViewReq& b) {
    a.Swap(&b);
  }
  inline void Swap(DmViewReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DmViewReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DmViewReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DmViewReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DmViewReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DmViewReq& from) {
    DmViewReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DmViewReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bilibili.community.service.dm.v1.DmViewReq";
  }
  protected:
  explicit DmViewReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpmidFieldNumber = 4,
    kPidFieldNumber = 1,
    kOidFieldNumber = 2,
    kTypeFieldNumber = 3,
    kIsHardBootFieldNumber = 5,
  };
  // string spmid = 4;
  void clear_spmid();
  const std::string& spmid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_spmid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_spmid();
  PROTOBUF_NODISCARD std::string* release_spmid();
  void set_allocated_spmid(std::string* spmid);
  private:
  const std::string& _internal_spmid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_spmid(const std::string& value);
  std::string* _internal_mutable_spmid();
  public:

  // int64 pid = 1;
  void clear_pid();
  int64_t pid() const;
  void set_pid(int64_t value);
  private:
  int64_t _internal_pid() const;
  void _internal_set_pid(int64_t value);
  public:

  // int64 oid = 2;
  void clear_oid();
  int64_t oid() const;
  void set_oid(int64_t value);
  private:
  int64_t _internal_oid() const;
  void _internal_set_oid(int64_t value);
  public:

  // int32 type = 3;
  void clear_type();
  int32_t type() const;
  void set_type(int32_t value);
  private:
  int32_t _internal_type() const;
  void _internal_set_type(int32_t value);
  public:

  // int32 is_hard_boot = 5;
  void clear_is_hard_boot();
  int32_t is_hard_boot() const;
  void set_is_hard_boot(int32_t value);
  private:
  int32_t _internal_is_hard_boot() const;
  void _internal_set_is_hard_boot(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:bilibili.community.service.dm.v1.DmViewReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr spmid_;
    int64_t pid_;
    int64_t oid_;
    int32_t type_;
    int32_t is_hard_boot_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_reply_2eproto;
};
// -------------------------------------------------------------------

class DmViewReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bilibili.community.service.dm.v1.DmViewReply) */ {
 public:
  inline DmViewReply() : DmViewReply(nullptr) {}
  ~DmViewReply() override;
  explicit PROTOBUF_CONSTEXPR DmViewReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DmViewReply(const DmViewReply& from);
  DmViewReply(DmViewReply&& from) noexcept
    : DmViewReply() {
    *this = ::std::move(from);
  }

  inline DmViewReply& operator=(const DmViewReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline DmViewReply& operator=(DmViewReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DmViewReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const DmViewReply* internal_default_instance() {
    return reinterpret_cast<const DmViewReply*>(
               &_DmViewReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(DmViewReply& a, DmViewReply& b) {
    a.Swap(&b);
  }
  inline void Swap(DmViewReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DmViewReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DmViewReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DmViewReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DmViewReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DmViewReply& from) {
    DmViewReply::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DmViewReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bilibili.community.service.dm.v1.DmViewReply";
  }
  protected:
  explicit DmViewReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpecialDmsFieldNumber = 4,
    kReportFilterContentFieldNumber = 13,
    kCheckBoxFieldNumber = 9,
    kCheckBoxShowMsgFieldNumber = 10,
    kTextPlaceholderFieldNumber = 11,
    kInputPlaceholderFieldNumber = 12,
    kMaskFieldNumber = 2,
    kSubtitleFieldNumber = 3,
    kAiFlagFieldNumber = 5,
    kPlayerConfigFieldNumber = 6,
    kClosedFieldNumber = 1,
    kAllowFieldNumber = 8,
    kSendBoxStyleFieldNumber = 7,
  };
  // repeated string special_dms = 4;
  int special_dms_size() const;
  private:
  int _internal_special_dms_size() const;
  public:
  void clear_special_dms();
  const std::string& special_dms(int index) const;
  std::string* mutable_special_dms(int index);
  void set_special_dms(int index, const std::string& value);
  void set_special_dms(int index, std::string&& value);
  void set_special_dms(int index, const char* value);
  void set_special_dms(int index, const char* value, size_t size);
  std::string* add_special_dms();
  void add_special_dms(const std::string& value);
  void add_special_dms(std::string&& value);
  void add_special_dms(const char* value);
  void add_special_dms(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& special_dms() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_special_dms();
  private:
  const std::string& _internal_special_dms(int index) const;
  std::string* _internal_add_special_dms();
  public:

  // repeated string report_filter_content = 13;
  int report_filter_content_size() const;
  private:
  int _internal_report_filter_content_size() const;
  public:
  void clear_report_filter_content();
  const std::string& report_filter_content(int index) const;
  std::string* mutable_report_filter_content(int index);
  void set_report_filter_content(int index, const std::string& value);
  void set_report_filter_content(int index, std::string&& value);
  void set_report_filter_content(int index, const char* value);
  void set_report_filter_content(int index, const char* value, size_t size);
  std::string* add_report_filter_content();
  void add_report_filter_content(const std::string& value);
  void add_report_filter_content(std::string&& value);
  void add_report_filter_content(const char* value);
  void add_report_filter_content(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& report_filter_content() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_report_filter_content();
  private:
  const std::string& _internal_report_filter_content(int index) const;
  std::string* _internal_add_report_filter_content();
  public:

  // string check_box = 9;
  void clear_check_box();
  const std::string& check_box() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_check_box(ArgT0&& arg0, ArgT... args);
  std::string* mutable_check_box();
  PROTOBUF_NODISCARD std::string* release_check_box();
  void set_allocated_check_box(std::string* check_box);
  private:
  const std::string& _internal_check_box() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_check_box(const std::string& value);
  std::string* _internal_mutable_check_box();
  public:

  // string check_box_show_msg = 10;
  void clear_check_box_show_msg();
  const std::string& check_box_show_msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_check_box_show_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_check_box_show_msg();
  PROTOBUF_NODISCARD std::string* release_check_box_show_msg();
  void set_allocated_check_box_show_msg(std::string* check_box_show_msg);
  private:
  const std::string& _internal_check_box_show_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_check_box_show_msg(const std::string& value);
  std::string* _internal_mutable_check_box_show_msg();
  public:

  // string text_placeholder = 11;
  void clear_text_placeholder();
  const std::string& text_placeholder() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_text_placeholder(ArgT0&& arg0, ArgT... args);
  std::string* mutable_text_placeholder();
  PROTOBUF_NODISCARD std::string* release_text_placeholder();
  void set_allocated_text_placeholder(std::string* text_placeholder);
  private:
  const std::string& _internal_text_placeholder() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text_placeholder(const std::string& value);
  std::string* _internal_mutable_text_placeholder();
  public:

  // string input_placeholder = 12;
  void clear_input_placeholder();
  const std::string& input_placeholder() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_input_placeholder(ArgT0&& arg0, ArgT... args);
  std::string* mutable_input_placeholder();
  PROTOBUF_NODISCARD std::string* release_input_placeholder();
  void set_allocated_input_placeholder(std::string* input_placeholder);
  private:
  const std::string& _internal_input_placeholder() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_input_placeholder(const std::string& value);
  std::string* _internal_mutable_input_placeholder();
  public:

  // .bilibili.community.service.dm.v1.VideoMask mask = 2;
  bool has_mask() const;
  private:
  bool _internal_has_mask() const;
  public:
  void clear_mask();
  const ::bilibili::community::service::dm::v1::VideoMask& mask() const;
  PROTOBUF_NODISCARD ::bilibili::community::service::dm::v1::VideoMask* release_mask();
  ::bilibili::community::service::dm::v1::VideoMask* mutable_mask();
  void set_allocated_mask(::bilibili::community::service::dm::v1::VideoMask* mask);
  private:
  const ::bilibili::community::service::dm::v1::VideoMask& _internal_mask() const;
  ::bilibili::community::service::dm::v1::VideoMask* _internal_mutable_mask();
  public:
  void unsafe_arena_set_allocated_mask(
      ::bilibili::community::service::dm::v1::VideoMask* mask);
  ::bilibili::community::service::dm::v1::VideoMask* unsafe_arena_release_mask();

  // .bilibili.community.service.dm.v1.VideoSubtitle subtitle = 3;
  bool has_subtitle() const;
  private:
  bool _internal_has_subtitle() const;
  public:
  void clear_subtitle();
  const ::bilibili::community::service::dm::v1::VideoSubtitle& subtitle() const;
  PROTOBUF_NODISCARD ::bilibili::community::service::dm::v1::VideoSubtitle* release_subtitle();
  ::bilibili::community::service::dm::v1::VideoSubtitle* mutable_subtitle();
  void set_allocated_subtitle(::bilibili::community::service::dm::v1::VideoSubtitle* subtitle);
  private:
  const ::bilibili::community::service::dm::v1::VideoSubtitle& _internal_subtitle() const;
  ::bilibili::community::service::dm::v1::VideoSubtitle* _internal_mutable_subtitle();
  public:
  void unsafe_arena_set_allocated_subtitle(
      ::bilibili::community::service::dm::v1::VideoSubtitle* subtitle);
  ::bilibili::community::service::dm::v1::VideoSubtitle* unsafe_arena_release_subtitle();

  // .bilibili.community.service.dm.v1.DanmakuFlagConfig ai_flag = 5;
  bool has_ai_flag() const;
  private:
  bool _internal_has_ai_flag() const;
  public:
  void clear_ai_flag();
  const ::bilibili::community::service::dm::v1::DanmakuFlagConfig& ai_flag() const;
  PROTOBUF_NODISCARD ::bilibili::community::service::dm::v1::DanmakuFlagConfig* release_ai_flag();
  ::bilibili::community::service::dm::v1::DanmakuFlagConfig* mutable_ai_flag();
  void set_allocated_ai_flag(::bilibili::community::service::dm::v1::DanmakuFlagConfig* ai_flag);
  private:
  const ::bilibili::community::service::dm::v1::DanmakuFlagConfig& _internal_ai_flag() const;
  ::bilibili::community::service::dm::v1::DanmakuFlagConfig* _internal_mutable_ai_flag();
  public:
  void unsafe_arena_set_allocated_ai_flag(
      ::bilibili::community::service::dm::v1::DanmakuFlagConfig* ai_flag);
  ::bilibili::community::service::dm::v1::DanmakuFlagConfig* unsafe_arena_release_ai_flag();

  // .bilibili.community.service.dm.v1.DanmuPlayerViewConfig player_config = 6;
  bool has_player_config() const;
  private:
  bool _internal_has_player_config() const;
  public:
  void clear_player_config();
  const ::bilibili::community::service::dm::v1::DanmuPlayerViewConfig& player_config() const;
  PROTOBUF_NODISCARD ::bilibili::community::service::dm::v1::DanmuPlayerViewConfig* release_player_config();
  ::bilibili::community::service::dm::v1::DanmuPlayerViewConfig* mutable_player_config();
  void set_allocated_player_config(::bilibili::community::service::dm::v1::DanmuPlayerViewConfig* player_config);
  private:
  const ::bilibili::community::service::dm::v1::DanmuPlayerViewConfig& _internal_player_config() const;
  ::bilibili::community::service::dm::v1::DanmuPlayerViewConfig* _internal_mutable_player_config();
  public:
  void unsafe_arena_set_allocated_player_config(
      ::bilibili::community::service::dm::v1::DanmuPlayerViewConfig* player_config);
  ::bilibili::community::service::dm::v1::DanmuPlayerViewConfig* unsafe_arena_release_player_config();

  // bool closed = 1;
  void clear_closed();
  bool closed() const;
  void set_closed(bool value);
  private:
  bool _internal_closed() const;
  void _internal_set_closed(bool value);
  public:

  // bool allow = 8;
  void clear_allow();
  bool allow() const;
  void set_allow(bool value);
  private:
  bool _internal_allow() const;
  void _internal_set_allow(bool value);
  public:

  // int32 send_box_style = 7;
  void clear_send_box_style();
  int32_t send_box_style() const;
  void set_send_box_style(int32_t value);
  private:
  int32_t _internal_send_box_style() const;
  void _internal_set_send_box_style(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:bilibili.community.service.dm.v1.DmViewReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> special_dms_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> report_filter_content_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr check_box_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr check_box_show_msg_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_placeholder_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr input_placeholder_;
    ::bilibili::community::service::dm::v1::VideoMask* mask_;
    ::bilibili::community::service::dm::v1::VideoSubtitle* subtitle_;
    ::bilibili::community::service::dm::v1::DanmakuFlagConfig* ai_flag_;
    ::bilibili::community::service::dm::v1::DanmuPlayerViewConfig* player_config_;
    bool closed_;
    bool allow_;
    int32_t send_box_style_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_reply_2eproto;
};
// -------------------------------------------------------------------

class DmWebViewReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bilibili.community.service.dm.v1.DmWebViewReply) */ {
 public:
  inline DmWebViewReply() : DmWebViewReply(nullptr) {}
  ~DmWebViewReply() override;
  explicit PROTOBUF_CONSTEXPR DmWebViewReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DmWebViewReply(const DmWebViewReply& from);
  DmWebViewReply(DmWebViewReply&& from) noexcept
    : DmWebViewReply() {
    *this = ::std::move(from);
  }

  inline DmWebViewReply& operator=(const DmWebViewReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline DmWebViewReply& operator=(DmWebViewReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DmWebViewReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const DmWebViewReply* internal_default_instance() {
    return reinterpret_cast<const DmWebViewReply*>(
               &_DmWebViewReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(DmWebViewReply& a, DmWebViewReply& b) {
    a.Swap(&b);
  }
  inline void Swap(DmWebViewReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DmWebViewReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DmWebViewReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DmWebViewReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DmWebViewReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DmWebViewReply& from) {
    DmWebViewReply::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DmWebViewReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bilibili.community.service.dm.v1.DmWebViewReply";
  }
  protected:
  explicit DmWebViewReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpecialDmsFieldNumber = 6,
    kCommandDmsFieldNumber = 9,
    kReportFilterContentFieldNumber = 11,
    kTextFieldNumber = 2,
    kTextSideFieldNumber = 3,
    kDmSgeFieldNumber = 4,
    kFlagFieldNumber = 5,
    kPlayerConfigFieldNumber = 10,
    kStateFieldNumber = 1,
    kCheckBoxFieldNumber = 7,
    kCountFieldNumber = 8,
  };
  // repeated string special_dms = 6;
  int special_dms_size() const;
  private:
  int _internal_special_dms_size() const;
  public:
  void clear_special_dms();
  const std::string& special_dms(int index) const;
  std::string* mutable_special_dms(int index);
  void set_special_dms(int index, const std::string& value);
  void set_special_dms(int index, std::string&& value);
  void set_special_dms(int index, const char* value);
  void set_special_dms(int index, const char* value, size_t size);
  std::string* add_special_dms();
  void add_special_dms(const std::string& value);
  void add_special_dms(std::string&& value);
  void add_special_dms(const char* value);
  void add_special_dms(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& special_dms() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_special_dms();
  private:
  const std::string& _internal_special_dms(int index) const;
  std::string* _internal_add_special_dms();
  public:

  // repeated .bilibili.community.service.dm.v1.CommandDm commandDms = 9;
  int commanddms_size() const;
  private:
  int _internal_commanddms_size() const;
  public:
  void clear_commanddms();
  ::bilibili::community::service::dm::v1::CommandDm* mutable_commanddms(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bilibili::community::service::dm::v1::CommandDm >*
      mutable_commanddms();
  private:
  const ::bilibili::community::service::dm::v1::CommandDm& _internal_commanddms(int index) const;
  ::bilibili::community::service::dm::v1::CommandDm* _internal_add_commanddms();
  public:
  const ::bilibili::community::service::dm::v1::CommandDm& commanddms(int index) const;
  ::bilibili::community::service::dm::v1::CommandDm* add_commanddms();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bilibili::community::service::dm::v1::CommandDm >&
      commanddms() const;

  // repeated string report_filter_content = 11;
  int report_filter_content_size() const;
  private:
  int _internal_report_filter_content_size() const;
  public:
  void clear_report_filter_content();
  const std::string& report_filter_content(int index) const;
  std::string* mutable_report_filter_content(int index);
  void set_report_filter_content(int index, const std::string& value);
  void set_report_filter_content(int index, std::string&& value);
  void set_report_filter_content(int index, const char* value);
  void set_report_filter_content(int index, const char* value, size_t size);
  std::string* add_report_filter_content();
  void add_report_filter_content(const std::string& value);
  void add_report_filter_content(std::string&& value);
  void add_report_filter_content(const char* value);
  void add_report_filter_content(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& report_filter_content() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_report_filter_content();
  private:
  const std::string& _internal_report_filter_content(int index) const;
  std::string* _internal_add_report_filter_content();
  public:

  // string text = 2;
  void clear_text();
  const std::string& text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_text();
  PROTOBUF_NODISCARD std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // string text_side = 3;
  void clear_text_side();
  const std::string& text_side() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_text_side(ArgT0&& arg0, ArgT... args);
  std::string* mutable_text_side();
  PROTOBUF_NODISCARD std::string* release_text_side();
  void set_allocated_text_side(std::string* text_side);
  private:
  const std::string& _internal_text_side() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text_side(const std::string& value);
  std::string* _internal_mutable_text_side();
  public:

  // .bilibili.community.service.dm.v1.DmSegConfig dm_sge = 4;
  bool has_dm_sge() const;
  private:
  bool _internal_has_dm_sge() const;
  public:
  void clear_dm_sge();
  const ::bilibili::community::service::dm::v1::DmSegConfig& dm_sge() const;
  PROTOBUF_NODISCARD ::bilibili::community::service::dm::v1::DmSegConfig* release_dm_sge();
  ::bilibili::community::service::dm::v1::DmSegConfig* mutable_dm_sge();
  void set_allocated_dm_sge(::bilibili::community::service::dm::v1::DmSegConfig* dm_sge);
  private:
  const ::bilibili::community::service::dm::v1::DmSegConfig& _internal_dm_sge() const;
  ::bilibili::community::service::dm::v1::DmSegConfig* _internal_mutable_dm_sge();
  public:
  void unsafe_arena_set_allocated_dm_sge(
      ::bilibili::community::service::dm::v1::DmSegConfig* dm_sge);
  ::bilibili::community::service::dm::v1::DmSegConfig* unsafe_arena_release_dm_sge();

  // .bilibili.community.service.dm.v1.DanmakuFlagConfig flag = 5;
  bool has_flag() const;
  private:
  bool _internal_has_flag() const;
  public:
  void clear_flag();
  const ::bilibili::community::service::dm::v1::DanmakuFlagConfig& flag() const;
  PROTOBUF_NODISCARD ::bilibili::community::service::dm::v1::DanmakuFlagConfig* release_flag();
  ::bilibili::community::service::dm::v1::DanmakuFlagConfig* mutable_flag();
  void set_allocated_flag(::bilibili::community::service::dm::v1::DanmakuFlagConfig* flag);
  private:
  const ::bilibili::community::service::dm::v1::DanmakuFlagConfig& _internal_flag() const;
  ::bilibili::community::service::dm::v1::DanmakuFlagConfig* _internal_mutable_flag();
  public:
  void unsafe_arena_set_allocated_flag(
      ::bilibili::community::service::dm::v1::DanmakuFlagConfig* flag);
  ::bilibili::community::service::dm::v1::DanmakuFlagConfig* unsafe_arena_release_flag();

  // .bilibili.community.service.dm.v1.DanmuWebPlayerConfig player_config = 10;
  bool has_player_config() const;
  private:
  bool _internal_has_player_config() const;
  public:
  void clear_player_config();
  const ::bilibili::community::service::dm::v1::DanmuWebPlayerConfig& player_config() const;
  PROTOBUF_NODISCARD ::bilibili::community::service::dm::v1::DanmuWebPlayerConfig* release_player_config();
  ::bilibili::community::service::dm::v1::DanmuWebPlayerConfig* mutable_player_config();
  void set_allocated_player_config(::bilibili::community::service::dm::v1::DanmuWebPlayerConfig* player_config);
  private:
  const ::bilibili::community::service::dm::v1::DanmuWebPlayerConfig& _internal_player_config() const;
  ::bilibili::community::service::dm::v1::DanmuWebPlayerConfig* _internal_mutable_player_config();
  public:
  void unsafe_arena_set_allocated_player_config(
      ::bilibili::community::service::dm::v1::DanmuWebPlayerConfig* player_config);
  ::bilibili::community::service::dm::v1::DanmuWebPlayerConfig* unsafe_arena_release_player_config();

  // int32 state = 1;
  void clear_state();
  int32_t state() const;
  void set_state(int32_t value);
  private:
  int32_t _internal_state() const;
  void _internal_set_state(int32_t value);
  public:

  // bool check_box = 7;
  void clear_check_box();
  bool check_box() const;
  void set_check_box(bool value);
  private:
  bool _internal_check_box() const;
  void _internal_set_check_box(bool value);
  public:

  // int64 count = 8;
  void clear_count();
  int64_t count() const;
  void set_count(int64_t value);
  private:
  int64_t _internal_count() const;
  void _internal_set_count(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:bilibili.community.service.dm.v1.DmWebViewReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> special_dms_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bilibili::community::service::dm::v1::CommandDm > commanddms_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> report_filter_content_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_side_;
    ::bilibili::community::service::dm::v1::DmSegConfig* dm_sge_;
    ::bilibili::community::service::dm::v1::DanmakuFlagConfig* flag_;
    ::bilibili::community::service::dm::v1::DanmuWebPlayerConfig* player_config_;
    int32_t state_;
    bool check_box_;
    int64_t count_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_reply_2eproto;
};
// -------------------------------------------------------------------

class CommandDm final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bilibili.community.service.dm.v1.CommandDm) */ {
 public:
  inline CommandDm() : CommandDm(nullptr) {}
  ~CommandDm() override;
  explicit PROTOBUF_CONSTEXPR CommandDm(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandDm(const CommandDm& from);
  CommandDm(CommandDm&& from) noexcept
    : CommandDm() {
    *this = ::std::move(from);
  }

  inline CommandDm& operator=(const CommandDm& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandDm& operator=(CommandDm&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandDm& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandDm* internal_default_instance() {
    return reinterpret_cast<const CommandDm*>(
               &_CommandDm_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CommandDm& a, CommandDm& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandDm* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandDm* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandDm* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandDm>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandDm& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandDm& from) {
    CommandDm::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandDm* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bilibili.community.service.dm.v1.CommandDm";
  }
  protected:
  explicit CommandDm(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMidFieldNumber = 3,
    kCommandFieldNumber = 4,
    kContentFieldNumber = 5,
    kCtimeFieldNumber = 7,
    kMtimeFieldNumber = 8,
    kExtraFieldNumber = 9,
    kIdStrFieldNumber = 10,
    kIdFieldNumber = 1,
    kOidFieldNumber = 2,
    kProgressFieldNumber = 6,
  };
  // string mid = 3;
  void clear_mid();
  const std::string& mid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mid();
  PROTOBUF_NODISCARD std::string* release_mid();
  void set_allocated_mid(std::string* mid);
  private:
  const std::string& _internal_mid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mid(const std::string& value);
  std::string* _internal_mutable_mid();
  public:

  // string command = 4;
  void clear_command();
  const std::string& command() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_command(ArgT0&& arg0, ArgT... args);
  std::string* mutable_command();
  PROTOBUF_NODISCARD std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string content = 5;
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // string ctime = 7;
  void clear_ctime();
  const std::string& ctime() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ctime(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ctime();
  PROTOBUF_NODISCARD std::string* release_ctime();
  void set_allocated_ctime(std::string* ctime);
  private:
  const std::string& _internal_ctime() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ctime(const std::string& value);
  std::string* _internal_mutable_ctime();
  public:

  // string mtime = 8;
  void clear_mtime();
  const std::string& mtime() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mtime(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mtime();
  PROTOBUF_NODISCARD std::string* release_mtime();
  void set_allocated_mtime(std::string* mtime);
  private:
  const std::string& _internal_mtime() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mtime(const std::string& value);
  std::string* _internal_mutable_mtime();
  public:

  // string extra = 9;
  void clear_extra();
  const std::string& extra() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_extra(ArgT0&& arg0, ArgT... args);
  std::string* mutable_extra();
  PROTOBUF_NODISCARD std::string* release_extra();
  void set_allocated_extra(std::string* extra);
  private:
  const std::string& _internal_extra() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_extra(const std::string& value);
  std::string* _internal_mutable_extra();
  public:

  // string idStr = 10;
  void clear_idstr();
  const std::string& idstr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_idstr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_idstr();
  PROTOBUF_NODISCARD std::string* release_idstr();
  void set_allocated_idstr(std::string* idstr);
  private:
  const std::string& _internal_idstr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_idstr(const std::string& value);
  std::string* _internal_mutable_idstr();
  public:

  // int64 id = 1;
  void clear_id();
  int64_t id() const;
  void set_id(int64_t value);
  private:
  int64_t _internal_id() const;
  void _internal_set_id(int64_t value);
  public:

  // int64 oid = 2;
  void clear_oid();
  int64_t oid() const;
  void set_oid(int64_t value);
  private:
  int64_t _internal_oid() const;
  void _internal_set_oid(int64_t value);
  public:

  // int32 progress = 6;
  void clear_progress();
  int32_t progress() const;
  void set_progress(int32_t value);
  private:
  int32_t _internal_progress() const;
  void _internal_set_progress(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:bilibili.community.service.dm.v1.CommandDm)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ctime_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mtime_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr extra_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr idstr_;
    int64_t id_;
    int64_t oid_;
    int32_t progress_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_reply_2eproto;
};
// -------------------------------------------------------------------

class DmSegConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bilibili.community.service.dm.v1.DmSegConfig) */ {
 public:
  inline DmSegConfig() : DmSegConfig(nullptr) {}
  ~DmSegConfig() override;
  explicit PROTOBUF_CONSTEXPR DmSegConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DmSegConfig(const DmSegConfig& from);
  DmSegConfig(DmSegConfig&& from) noexcept
    : DmSegConfig() {
    *this = ::std::move(from);
  }

  inline DmSegConfig& operator=(const DmSegConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline DmSegConfig& operator=(DmSegConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DmSegConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const DmSegConfig* internal_default_instance() {
    return reinterpret_cast<const DmSegConfig*>(
               &_DmSegConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(DmSegConfig& a, DmSegConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(DmSegConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DmSegConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DmSegConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DmSegConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DmSegConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DmSegConfig& from) {
    DmSegConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DmSegConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bilibili.community.service.dm.v1.DmSegConfig";
  }
  protected:
  explicit DmSegConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPageSizeFieldNumber = 1,
    kTotalFieldNumber = 2,
  };
  // int64 page_size = 1;
  void clear_page_size();
  int64_t page_size() const;
  void set_page_size(int64_t value);
  private:
  int64_t _internal_page_size() const;
  void _internal_set_page_size(int64_t value);
  public:

  // int64 total = 2;
  void clear_total();
  int64_t total() const;
  void set_total(int64_t value);
  private:
  int64_t _internal_total() const;
  void _internal_set_total(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:bilibili.community.service.dm.v1.DmSegConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t page_size_;
    int64_t total_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_reply_2eproto;
};
// -------------------------------------------------------------------

class VideoMask final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bilibili.community.service.dm.v1.VideoMask) */ {
 public:
  inline VideoMask() : VideoMask(nullptr) {}
  ~VideoMask() override;
  explicit PROTOBUF_CONSTEXPR VideoMask(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VideoMask(const VideoMask& from);
  VideoMask(VideoMask&& from) noexcept
    : VideoMask() {
    *this = ::std::move(from);
  }

  inline VideoMask& operator=(const VideoMask& from) {
    CopyFrom(from);
    return *this;
  }
  inline VideoMask& operator=(VideoMask&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VideoMask& default_instance() {
    return *internal_default_instance();
  }
  static inline const VideoMask* internal_default_instance() {
    return reinterpret_cast<const VideoMask*>(
               &_VideoMask_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(VideoMask& a, VideoMask& b) {
    a.Swap(&b);
  }
  inline void Swap(VideoMask* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VideoMask* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VideoMask* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VideoMask>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VideoMask& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VideoMask& from) {
    VideoMask::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VideoMask* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bilibili.community.service.dm.v1.VideoMask";
  }
  protected:
  explicit VideoMask(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaskUrlFieldNumber = 5,
    kCidFieldNumber = 1,
    kPlatFieldNumber = 2,
    kFpsFieldNumber = 3,
    kTimeFieldNumber = 4,
  };
  // string mask_url = 5;
  void clear_mask_url();
  const std::string& mask_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mask_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mask_url();
  PROTOBUF_NODISCARD std::string* release_mask_url();
  void set_allocated_mask_url(std::string* mask_url);
  private:
  const std::string& _internal_mask_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mask_url(const std::string& value);
  std::string* _internal_mutable_mask_url();
  public:

  // int64 cid = 1;
  void clear_cid();
  int64_t cid() const;
  void set_cid(int64_t value);
  private:
  int64_t _internal_cid() const;
  void _internal_set_cid(int64_t value);
  public:

  // int32 plat = 2;
  void clear_plat();
  int32_t plat() const;
  void set_plat(int32_t value);
  private:
  int32_t _internal_plat() const;
  void _internal_set_plat(int32_t value);
  public:

  // int32 fps = 3;
  void clear_fps();
  int32_t fps() const;
  void set_fps(int32_t value);
  private:
  int32_t _internal_fps() const;
  void _internal_set_fps(int32_t value);
  public:

  // int64 time = 4;
  void clear_time();
  int64_t time() const;
  void set_time(int64_t value);
  private:
  int64_t _internal_time() const;
  void _internal_set_time(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:bilibili.community.service.dm.v1.VideoMask)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mask_url_;
    int64_t cid_;
    int32_t plat_;
    int32_t fps_;
    int64_t time_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_reply_2eproto;
};
// -------------------------------------------------------------------

class VideoSubtitle final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bilibili.community.service.dm.v1.VideoSubtitle) */ {
 public:
  inline VideoSubtitle() : VideoSubtitle(nullptr) {}
  ~VideoSubtitle() override;
  explicit PROTOBUF_CONSTEXPR VideoSubtitle(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VideoSubtitle(const VideoSubtitle& from);
  VideoSubtitle(VideoSubtitle&& from) noexcept
    : VideoSubtitle() {
    *this = ::std::move(from);
  }

  inline VideoSubtitle& operator=(const VideoSubtitle& from) {
    CopyFrom(from);
    return *this;
  }
  inline VideoSubtitle& operator=(VideoSubtitle&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VideoSubtitle& default_instance() {
    return *internal_default_instance();
  }
  static inline const VideoSubtitle* internal_default_instance() {
    return reinterpret_cast<const VideoSubtitle*>(
               &_VideoSubtitle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(VideoSubtitle& a, VideoSubtitle& b) {
    a.Swap(&b);
  }
  inline void Swap(VideoSubtitle* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VideoSubtitle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VideoSubtitle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VideoSubtitle>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VideoSubtitle& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VideoSubtitle& from) {
    VideoSubtitle::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VideoSubtitle* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bilibili.community.service.dm.v1.VideoSubtitle";
  }
  protected:
  explicit VideoSubtitle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubtitlesFieldNumber = 3,
    kLanFieldNumber = 1,
    kLanDocFieldNumber = 2,
  };
  // repeated .bilibili.community.service.dm.v1.SubtitleItem subtitles = 3;
  int subtitles_size() const;
  private:
  int _internal_subtitles_size() const;
  public:
  void clear_subtitles();
  ::bilibili::community::service::dm::v1::SubtitleItem* mutable_subtitles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bilibili::community::service::dm::v1::SubtitleItem >*
      mutable_subtitles();
  private:
  const ::bilibili::community::service::dm::v1::SubtitleItem& _internal_subtitles(int index) const;
  ::bilibili::community::service::dm::v1::SubtitleItem* _internal_add_subtitles();
  public:
  const ::bilibili::community::service::dm::v1::SubtitleItem& subtitles(int index) const;
  ::bilibili::community::service::dm::v1::SubtitleItem* add_subtitles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bilibili::community::service::dm::v1::SubtitleItem >&
      subtitles() const;

  // string lan = 1;
  void clear_lan();
  const std::string& lan() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_lan(ArgT0&& arg0, ArgT... args);
  std::string* mutable_lan();
  PROTOBUF_NODISCARD std::string* release_lan();
  void set_allocated_lan(std::string* lan);
  private:
  const std::string& _internal_lan() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lan(const std::string& value);
  std::string* _internal_mutable_lan();
  public:

  // string lanDoc = 2;
  void clear_landoc();
  const std::string& landoc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_landoc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_landoc();
  PROTOBUF_NODISCARD std::string* release_landoc();
  void set_allocated_landoc(std::string* landoc);
  private:
  const std::string& _internal_landoc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_landoc(const std::string& value);
  std::string* _internal_mutable_landoc();
  public:

  // @@protoc_insertion_point(class_scope:bilibili.community.service.dm.v1.VideoSubtitle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bilibili::community::service::dm::v1::SubtitleItem > subtitles_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lan_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr landoc_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_reply_2eproto;
};
// -------------------------------------------------------------------

class DanmuWebPlayerConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bilibili.community.service.dm.v1.DanmuWebPlayerConfig) */ {
 public:
  inline DanmuWebPlayerConfig() : DanmuWebPlayerConfig(nullptr) {}
  ~DanmuWebPlayerConfig() override;
  explicit PROTOBUF_CONSTEXPR DanmuWebPlayerConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DanmuWebPlayerConfig(const DanmuWebPlayerConfig& from);
  DanmuWebPlayerConfig(DanmuWebPlayerConfig&& from) noexcept
    : DanmuWebPlayerConfig() {
    *this = ::std::move(from);
  }

  inline DanmuWebPlayerConfig& operator=(const DanmuWebPlayerConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline DanmuWebPlayerConfig& operator=(DanmuWebPlayerConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DanmuWebPlayerConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const DanmuWebPlayerConfig* internal_default_instance() {
    return reinterpret_cast<const DanmuWebPlayerConfig*>(
               &_DanmuWebPlayerConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(DanmuWebPlayerConfig& a, DanmuWebPlayerConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(DanmuWebPlayerConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DanmuWebPlayerConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DanmuWebPlayerConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DanmuWebPlayerConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DanmuWebPlayerConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DanmuWebPlayerConfig& from) {
    DanmuWebPlayerConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DanmuWebPlayerConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bilibili.community.service.dm.v1.DanmuWebPlayerConfig";
  }
  protected:
  explicit DanmuWebPlayerConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFontfamilyFieldNumber = 17,
    kDrawTypeFieldNumber = 20,
    kAiLevelFieldNumber = 3,
    kDmSwitchFieldNumber = 1,
    kAiSwitchFieldNumber = 2,
    kBlocktopFieldNumber = 4,
    kBlockscrollFieldNumber = 5,
    kBlockbottomFieldNumber = 6,
    kBlockcolorFieldNumber = 7,
    kBlockspecialFieldNumber = 8,
    kPreventshadeFieldNumber = 9,
    kOpacityFieldNumber = 11,
    kDmareaFieldNumber = 12,
    kSpeedplusFieldNumber = 13,
    kFontsizeFieldNumber = 14,
    kDmaskFieldNumber = 10,
    kScreensyncFieldNumber = 15,
    kSpeedsyncFieldNumber = 16,
    kBoldFieldNumber = 18,
    kFontborderFieldNumber = 19,
  };
  // string fontfamily = 17;
  void clear_fontfamily();
  const std::string& fontfamily() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_fontfamily(ArgT0&& arg0, ArgT... args);
  std::string* mutable_fontfamily();
  PROTOBUF_NODISCARD std::string* release_fontfamily();
  void set_allocated_fontfamily(std::string* fontfamily);
  private:
  const std::string& _internal_fontfamily() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_fontfamily(const std::string& value);
  std::string* _internal_mutable_fontfamily();
  public:

  // string draw_type = 20;
  void clear_draw_type();
  const std::string& draw_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_draw_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_draw_type();
  PROTOBUF_NODISCARD std::string* release_draw_type();
  void set_allocated_draw_type(std::string* draw_type);
  private:
  const std::string& _internal_draw_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_draw_type(const std::string& value);
  std::string* _internal_mutable_draw_type();
  public:

  // int32 ai_level = 3;
  void clear_ai_level();
  int32_t ai_level() const;
  void set_ai_level(int32_t value);
  private:
  int32_t _internal_ai_level() const;
  void _internal_set_ai_level(int32_t value);
  public:

  // bool dm_switch = 1;
  void clear_dm_switch();
  bool dm_switch() const;
  void set_dm_switch(bool value);
  private:
  bool _internal_dm_switch() const;
  void _internal_set_dm_switch(bool value);
  public:

  // bool ai_switch = 2;
  void clear_ai_switch();
  bool ai_switch() const;
  void set_ai_switch(bool value);
  private:
  bool _internal_ai_switch() const;
  void _internal_set_ai_switch(bool value);
  public:

  // bool blocktop = 4;
  void clear_blocktop();
  bool blocktop() const;
  void set_blocktop(bool value);
  private:
  bool _internal_blocktop() const;
  void _internal_set_blocktop(bool value);
  public:

  // bool blockscroll = 5;
  void clear_blockscroll();
  bool blockscroll() const;
  void set_blockscroll(bool value);
  private:
  bool _internal_blockscroll() const;
  void _internal_set_blockscroll(bool value);
  public:

  // bool blockbottom = 6;
  void clear_blockbottom();
  bool blockbottom() const;
  void set_blockbottom(bool value);
  private:
  bool _internal_blockbottom() const;
  void _internal_set_blockbottom(bool value);
  public:

  // bool blockcolor = 7;
  void clear_blockcolor();
  bool blockcolor() const;
  void set_blockcolor(bool value);
  private:
  bool _internal_blockcolor() const;
  void _internal_set_blockcolor(bool value);
  public:

  // bool blockspecial = 8;
  void clear_blockspecial();
  bool blockspecial() const;
  void set_blockspecial(bool value);
  private:
  bool _internal_blockspecial() const;
  void _internal_set_blockspecial(bool value);
  public:

  // bool preventshade = 9;
  void clear_preventshade();
  bool preventshade() const;
  void set_preventshade(bool value);
  private:
  bool _internal_preventshade() const;
  void _internal_set_preventshade(bool value);
  public:

  // float opacity = 11;
  void clear_opacity();
  float opacity() const;
  void set_opacity(float value);
  private:
  float _internal_opacity() const;
  void _internal_set_opacity(float value);
  public:

  // int32 dmarea = 12;
  void clear_dmarea();
  int32_t dmarea() const;
  void set_dmarea(int32_t value);
  private:
  int32_t _internal_dmarea() const;
  void _internal_set_dmarea(int32_t value);
  public:

  // float speedplus = 13;
  void clear_speedplus();
  float speedplus() const;
  void set_speedplus(float value);
  private:
  float _internal_speedplus() const;
  void _internal_set_speedplus(float value);
  public:

  // float fontsize = 14;
  void clear_fontsize();
  float fontsize() const;
  void set_fontsize(float value);
  private:
  float _internal_fontsize() const;
  void _internal_set_fontsize(float value);
  public:

  // bool dmask = 10;
  void clear_dmask();
  bool dmask() const;
  void set_dmask(bool value);
  private:
  bool _internal_dmask() const;
  void _internal_set_dmask(bool value);
  public:

  // bool screensync = 15;
  void clear_screensync();
  bool screensync() const;
  void set_screensync(bool value);
  private:
  bool _internal_screensync() const;
  void _internal_set_screensync(bool value);
  public:

  // bool speedsync = 16;
  void clear_speedsync();
  bool speedsync() const;
  void set_speedsync(bool value);
  private:
  bool _internal_speedsync() const;
  void _internal_set_speedsync(bool value);
  public:

  // bool bold = 18;
  void clear_bold();
  bool bold() const;
  void set_bold(bool value);
  private:
  bool _internal_bold() const;
  void _internal_set_bold(bool value);
  public:

  // int32 fontborder = 19;
  void clear_fontborder();
  int32_t fontborder() const;
  void set_fontborder(int32_t value);
  private:
  int32_t _internal_fontborder() const;
  void _internal_set_fontborder(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:bilibili.community.service.dm.v1.DanmuWebPlayerConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fontfamily_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr draw_type_;
    int32_t ai_level_;
    bool dm_switch_;
    bool ai_switch_;
    bool blocktop_;
    bool blockscroll_;
    bool blockbottom_;
    bool blockcolor_;
    bool blockspecial_;
    bool preventshade_;
    float opacity_;
    int32_t dmarea_;
    float speedplus_;
    float fontsize_;
    bool dmask_;
    bool screensync_;
    bool speedsync_;
    bool bold_;
    int32_t fontborder_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_reply_2eproto;
};
// -------------------------------------------------------------------

class SubtitleItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bilibili.community.service.dm.v1.SubtitleItem) */ {
 public:
  inline SubtitleItem() : SubtitleItem(nullptr) {}
  ~SubtitleItem() override;
  explicit PROTOBUF_CONSTEXPR SubtitleItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubtitleItem(const SubtitleItem& from);
  SubtitleItem(SubtitleItem&& from) noexcept
    : SubtitleItem() {
    *this = ::std::move(from);
  }

  inline SubtitleItem& operator=(const SubtitleItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubtitleItem& operator=(SubtitleItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubtitleItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubtitleItem* internal_default_instance() {
    return reinterpret_cast<const SubtitleItem*>(
               &_SubtitleItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(SubtitleItem& a, SubtitleItem& b) {
    a.Swap(&b);
  }
  inline void Swap(SubtitleItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubtitleItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubtitleItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubtitleItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SubtitleItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SubtitleItem& from) {
    SubtitleItem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubtitleItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bilibili.community.service.dm.v1.SubtitleItem";
  }
  protected:
  explicit SubtitleItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdStrFieldNumber = 2,
    kLanFieldNumber = 3,
    kLanDocFieldNumber = 4,
    kSubtitleUrlFieldNumber = 5,
    kAuthorFieldNumber = 6,
    kIdFieldNumber = 1,
  };
  // string id_str = 2;
  void clear_id_str();
  const std::string& id_str() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id_str(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id_str();
  PROTOBUF_NODISCARD std::string* release_id_str();
  void set_allocated_id_str(std::string* id_str);
  private:
  const std::string& _internal_id_str() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id_str(const std::string& value);
  std::string* _internal_mutable_id_str();
  public:

  // string lan = 3;
  void clear_lan();
  const std::string& lan() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_lan(ArgT0&& arg0, ArgT... args);
  std::string* mutable_lan();
  PROTOBUF_NODISCARD std::string* release_lan();
  void set_allocated_lan(std::string* lan);
  private:
  const std::string& _internal_lan() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lan(const std::string& value);
  std::string* _internal_mutable_lan();
  public:

  // string lan_doc = 4;
  void clear_lan_doc();
  const std::string& lan_doc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_lan_doc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_lan_doc();
  PROTOBUF_NODISCARD std::string* release_lan_doc();
  void set_allocated_lan_doc(std::string* lan_doc);
  private:
  const std::string& _internal_lan_doc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lan_doc(const std::string& value);
  std::string* _internal_mutable_lan_doc();
  public:

  // string subtitle_url = 5;
  void clear_subtitle_url();
  const std::string& subtitle_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_subtitle_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_subtitle_url();
  PROTOBUF_NODISCARD std::string* release_subtitle_url();
  void set_allocated_subtitle_url(std::string* subtitle_url);
  private:
  const std::string& _internal_subtitle_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subtitle_url(const std::string& value);
  std::string* _internal_mutable_subtitle_url();
  public:

  // .bilibili.community.service.dm.v1.UserInfo author = 6;
  bool has_author() const;
  private:
  bool _internal_has_author() const;
  public:
  void clear_author();
  const ::bilibili::community::service::dm::v1::UserInfo& author() const;
  PROTOBUF_NODISCARD ::bilibili::community::service::dm::v1::UserInfo* release_author();
  ::bilibili::community::service::dm::v1::UserInfo* mutable_author();
  void set_allocated_author(::bilibili::community::service::dm::v1::UserInfo* author);
  private:
  const ::bilibili::community::service::dm::v1::UserInfo& _internal_author() const;
  ::bilibili::community::service::dm::v1::UserInfo* _internal_mutable_author();
  public:
  void unsafe_arena_set_allocated_author(
      ::bilibili::community::service::dm::v1::UserInfo* author);
  ::bilibili::community::service::dm::v1::UserInfo* unsafe_arena_release_author();

  // int64 id = 1;
  void clear_id();
  int64_t id() const;
  void set_id(int64_t value);
  private:
  int64_t _internal_id() const;
  void _internal_set_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:bilibili.community.service.dm.v1.SubtitleItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_str_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lan_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lan_doc_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subtitle_url_;
    ::bilibili::community::service::dm::v1::UserInfo* author_;
    int64_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_reply_2eproto;
};
// -------------------------------------------------------------------

class UserInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bilibili.community.service.dm.v1.UserInfo) */ {
 public:
  inline UserInfo() : UserInfo(nullptr) {}
  ~UserInfo() override;
  explicit PROTOBUF_CONSTEXPR UserInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserInfo(const UserInfo& from);
  UserInfo(UserInfo&& from) noexcept
    : UserInfo() {
    *this = ::std::move(from);
  }

  inline UserInfo& operator=(const UserInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserInfo& operator=(UserInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserInfo* internal_default_instance() {
    return reinterpret_cast<const UserInfo*>(
               &_UserInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(UserInfo& a, UserInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(UserInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UserInfo& from) {
    UserInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bilibili.community.service.dm.v1.UserInfo";
  }
  protected:
  explicit UserInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kSexFieldNumber = 3,
    kFaceFieldNumber = 4,
    kSignFieldNumber = 5,
    kMidFieldNumber = 1,
    kRankFieldNumber = 6,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string sex = 3;
  void clear_sex();
  const std::string& sex() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sex(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sex();
  PROTOBUF_NODISCARD std::string* release_sex();
  void set_allocated_sex(std::string* sex);
  private:
  const std::string& _internal_sex() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sex(const std::string& value);
  std::string* _internal_mutable_sex();
  public:

  // string face = 4;
  void clear_face();
  const std::string& face() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_face(ArgT0&& arg0, ArgT... args);
  std::string* mutable_face();
  PROTOBUF_NODISCARD std::string* release_face();
  void set_allocated_face(std::string* face);
  private:
  const std::string& _internal_face() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_face(const std::string& value);
  std::string* _internal_mutable_face();
  public:

  // string sign = 5;
  void clear_sign();
  const std::string& sign() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sign(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sign();
  PROTOBUF_NODISCARD std::string* release_sign();
  void set_allocated_sign(std::string* sign);
  private:
  const std::string& _internal_sign() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sign(const std::string& value);
  std::string* _internal_mutable_sign();
  public:

  // int64 mid = 1;
  void clear_mid();
  int64_t mid() const;
  void set_mid(int64_t value);
  private:
  int64_t _internal_mid() const;
  void _internal_set_mid(int64_t value);
  public:

  // int32 rank = 6;
  void clear_rank();
  int32_t rank() const;
  void set_rank(int32_t value);
  private:
  int32_t _internal_rank() const;
  void _internal_set_rank(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:bilibili.community.service.dm.v1.UserInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sex_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr face_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sign_;
    int64_t mid_;
    int32_t rank_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_reply_2eproto;
};
// -------------------------------------------------------------------

class DanmakuElem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bilibili.community.service.dm.v1.DanmakuElem) */ {
 public:
  inline DanmakuElem() : DanmakuElem(nullptr) {}
  ~DanmakuElem() override;
  explicit PROTOBUF_CONSTEXPR DanmakuElem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DanmakuElem(const DanmakuElem& from);
  DanmakuElem(DanmakuElem&& from) noexcept
    : DanmakuElem() {
    *this = ::std::move(from);
  }

  inline DanmakuElem& operator=(const DanmakuElem& from) {
    CopyFrom(from);
    return *this;
  }
  inline DanmakuElem& operator=(DanmakuElem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DanmakuElem& default_instance() {
    return *internal_default_instance();
  }
  static inline const DanmakuElem* internal_default_instance() {
    return reinterpret_cast<const DanmakuElem*>(
               &_DanmakuElem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(DanmakuElem& a, DanmakuElem& b) {
    a.Swap(&b);
  }
  inline void Swap(DanmakuElem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DanmakuElem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DanmakuElem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DanmakuElem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DanmakuElem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DanmakuElem& from) {
    DanmakuElem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DanmakuElem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bilibili.community.service.dm.v1.DanmakuElem";
  }
  protected:
  explicit DanmakuElem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMidHashFieldNumber = 6,
    kContentFieldNumber = 7,
    kActionFieldNumber = 10,
    kIdStrFieldNumber = 12,
    kIdFieldNumber = 1,
    kProgressFieldNumber = 2,
    kModeFieldNumber = 3,
    kFontsizeFieldNumber = 4,
    kColorFieldNumber = 5,
    kCtimeFieldNumber = 8,
    kWeightFieldNumber = 9,
    kPoolFieldNumber = 11,
    kAttrFieldNumber = 13,
  };
  // string midHash = 6;
  void clear_midhash();
  const std::string& midhash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_midhash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_midhash();
  PROTOBUF_NODISCARD std::string* release_midhash();
  void set_allocated_midhash(std::string* midhash);
  private:
  const std::string& _internal_midhash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_midhash(const std::string& value);
  std::string* _internal_mutable_midhash();
  public:

  // string content = 7;
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // string action = 10;
  void clear_action();
  const std::string& action() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action();
  PROTOBUF_NODISCARD std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // string idStr = 12;
  void clear_idstr();
  const std::string& idstr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_idstr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_idstr();
  PROTOBUF_NODISCARD std::string* release_idstr();
  void set_allocated_idstr(std::string* idstr);
  private:
  const std::string& _internal_idstr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_idstr(const std::string& value);
  std::string* _internal_mutable_idstr();
  public:

  // int64 id = 1;
  void clear_id();
  int64_t id() const;
  void set_id(int64_t value);
  private:
  int64_t _internal_id() const;
  void _internal_set_id(int64_t value);
  public:

  // int32 progress = 2;
  void clear_progress();
  int32_t progress() const;
  void set_progress(int32_t value);
  private:
  int32_t _internal_progress() const;
  void _internal_set_progress(int32_t value);
  public:

  // int32 mode = 3;
  void clear_mode();
  int32_t mode() const;
  void set_mode(int32_t value);
  private:
  int32_t _internal_mode() const;
  void _internal_set_mode(int32_t value);
  public:

  // int32 fontsize = 4;
  void clear_fontsize();
  int32_t fontsize() const;
  void set_fontsize(int32_t value);
  private:
  int32_t _internal_fontsize() const;
  void _internal_set_fontsize(int32_t value);
  public:

  // uint32 color = 5;
  void clear_color();
  uint32_t color() const;
  void set_color(uint32_t value);
  private:
  uint32_t _internal_color() const;
  void _internal_set_color(uint32_t value);
  public:

  // int64 ctime = 8;
  void clear_ctime();
  int64_t ctime() const;
  void set_ctime(int64_t value);
  private:
  int64_t _internal_ctime() const;
  void _internal_set_ctime(int64_t value);
  public:

  // int32 weight = 9;
  void clear_weight();
  int32_t weight() const;
  void set_weight(int32_t value);
  private:
  int32_t _internal_weight() const;
  void _internal_set_weight(int32_t value);
  public:

  // int32 pool = 11;
  void clear_pool();
  int32_t pool() const;
  void set_pool(int32_t value);
  private:
  int32_t _internal_pool() const;
  void _internal_set_pool(int32_t value);
  public:

  // int32 attr = 13;
  void clear_attr();
  int32_t attr() const;
  void set_attr(int32_t value);
  private:
  int32_t _internal_attr() const;
  void _internal_set_attr(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:bilibili.community.service.dm.v1.DanmakuElem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr midhash_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr idstr_;
    int64_t id_;
    int32_t progress_;
    int32_t mode_;
    int32_t fontsize_;
    uint32_t color_;
    int64_t ctime_;
    int32_t weight_;
    int32_t pool_;
    int32_t attr_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_reply_2eproto;
};
// -------------------------------------------------------------------

class DmPlayerConfigReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bilibili.community.service.dm.v1.DmPlayerConfigReq) */ {
 public:
  inline DmPlayerConfigReq() : DmPlayerConfigReq(nullptr) {}
  ~DmPlayerConfigReq() override;
  explicit PROTOBUF_CONSTEXPR DmPlayerConfigReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DmPlayerConfigReq(const DmPlayerConfigReq& from);
  DmPlayerConfigReq(DmPlayerConfigReq&& from) noexcept
    : DmPlayerConfigReq() {
    *this = ::std::move(from);
  }

  inline DmPlayerConfigReq& operator=(const DmPlayerConfigReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline DmPlayerConfigReq& operator=(DmPlayerConfigReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DmPlayerConfigReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const DmPlayerConfigReq* internal_default_instance() {
    return reinterpret_cast<const DmPlayerConfigReq*>(
               &_DmPlayerConfigReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(DmPlayerConfigReq& a, DmPlayerConfigReq& b) {
    a.Swap(&b);
  }
  inline void Swap(DmPlayerConfigReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DmPlayerConfigReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DmPlayerConfigReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DmPlayerConfigReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DmPlayerConfigReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DmPlayerConfigReq& from) {
    DmPlayerConfigReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DmPlayerConfigReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bilibili.community.service.dm.v1.DmPlayerConfigReq";
  }
  protected:
  explicit DmPlayerConfigReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSwitchFieldNumber = 2,
    kSwitchSaveFieldNumber = 3,
    kUseDefaultConfigFieldNumber = 4,
    kAiRecommendedSwitchFieldNumber = 5,
    kAiRecommendedLevelFieldNumber = 6,
    kBlocktopFieldNumber = 7,
    kBlockscrollFieldNumber = 8,
    kBlockbottomFieldNumber = 9,
    kBlockcolorfulFieldNumber = 10,
    kBlockrepeatFieldNumber = 11,
    kBlockspecialFieldNumber = 12,
    kOpacityFieldNumber = 13,
    kScalingfactorFieldNumber = 14,
    kDomainFieldNumber = 15,
    kSpeedFieldNumber = 16,
    kEnableblocklistFieldNumber = 17,
    kInlinePlayerDanmakuSwitchFieldNumber = 18,
    kTsFieldNumber = 1,
  };
  // .bilibili.community.service.dm.v1.PlayerDanmakuSwitch switch = 2;
  bool has_switch_() const;
  private:
  bool _internal_has_switch_() const;
  public:
  void clear_switch_();
  const ::bilibili::community::service::dm::v1::PlayerDanmakuSwitch& switch_() const;
  PROTOBUF_NODISCARD ::bilibili::community::service::dm::v1::PlayerDanmakuSwitch* release_switch_();
  ::bilibili::community::service::dm::v1::PlayerDanmakuSwitch* mutable_switch_();
  void set_allocated_switch_(::bilibili::community::service::dm::v1::PlayerDanmakuSwitch* switch_);
  private:
  const ::bilibili::community::service::dm::v1::PlayerDanmakuSwitch& _internal_switch_() const;
  ::bilibili::community::service::dm::v1::PlayerDanmakuSwitch* _internal_mutable_switch_();
  public:
  void unsafe_arena_set_allocated_switch_(
      ::bilibili::community::service::dm::v1::PlayerDanmakuSwitch* switch_);
  ::bilibili::community::service::dm::v1::PlayerDanmakuSwitch* unsafe_arena_release_switch_();

  // .bilibili.community.service.dm.v1.PlayerDanmakuSwitchSave switch_save = 3;
  bool has_switch_save() const;
  private:
  bool _internal_has_switch_save() const;
  public:
  void clear_switch_save();
  const ::bilibili::community::service::dm::v1::PlayerDanmakuSwitchSave& switch_save() const;
  PROTOBUF_NODISCARD ::bilibili::community::service::dm::v1::PlayerDanmakuSwitchSave* release_switch_save();
  ::bilibili::community::service::dm::v1::PlayerDanmakuSwitchSave* mutable_switch_save();
  void set_allocated_switch_save(::bilibili::community::service::dm::v1::PlayerDanmakuSwitchSave* switch_save);
  private:
  const ::bilibili::community::service::dm::v1::PlayerDanmakuSwitchSave& _internal_switch_save() const;
  ::bilibili::community::service::dm::v1::PlayerDanmakuSwitchSave* _internal_mutable_switch_save();
  public:
  void unsafe_arena_set_allocated_switch_save(
      ::bilibili::community::service::dm::v1::PlayerDanmakuSwitchSave* switch_save);
  ::bilibili::community::service::dm::v1::PlayerDanmakuSwitchSave* unsafe_arena_release_switch_save();

  // .bilibili.community.service.dm.v1.PlayerDanmakuUseDefaultConfig use_default_config = 4;
  bool has_use_default_config() const;
  private:
  bool _internal_has_use_default_config() const;
  public:
  void clear_use_default_config();
  const ::bilibili::community::service::dm::v1::PlayerDanmakuUseDefaultConfig& use_default_config() const;
  PROTOBUF_NODISCARD ::bilibili::community::service::dm::v1::PlayerDanmakuUseDefaultConfig* release_use_default_config();
  ::bilibili::community::service::dm::v1::PlayerDanmakuUseDefaultConfig* mutable_use_default_config();
  void set_allocated_use_default_config(::bilibili::community::service::dm::v1::PlayerDanmakuUseDefaultConfig* use_default_config);
  private:
  const ::bilibili::community::service::dm::v1::PlayerDanmakuUseDefaultConfig& _internal_use_default_config() const;
  ::bilibili::community::service::dm::v1::PlayerDanmakuUseDefaultConfig* _internal_mutable_use_default_config();
  public:
  void unsafe_arena_set_allocated_use_default_config(
      ::bilibili::community::service::dm::v1::PlayerDanmakuUseDefaultConfig* use_default_config);
  ::bilibili::community::service::dm::v1::PlayerDanmakuUseDefaultConfig* unsafe_arena_release_use_default_config();

  // .bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedSwitch ai_recommended_switch = 5;
  bool has_ai_recommended_switch() const;
  private:
  bool _internal_has_ai_recommended_switch() const;
  public:
  void clear_ai_recommended_switch();
  const ::bilibili::community::service::dm::v1::PlayerDanmakuAiRecommendedSwitch& ai_recommended_switch() const;
  PROTOBUF_NODISCARD ::bilibili::community::service::dm::v1::PlayerDanmakuAiRecommendedSwitch* release_ai_recommended_switch();
  ::bilibili::community::service::dm::v1::PlayerDanmakuAiRecommendedSwitch* mutable_ai_recommended_switch();
  void set_allocated_ai_recommended_switch(::bilibili::community::service::dm::v1::PlayerDanmakuAiRecommendedSwitch* ai_recommended_switch);
  private:
  const ::bilibili::community::service::dm::v1::PlayerDanmakuAiRecommendedSwitch& _internal_ai_recommended_switch() const;
  ::bilibili::community::service::dm::v1::PlayerDanmakuAiRecommendedSwitch* _internal_mutable_ai_recommended_switch();
  public:
  void unsafe_arena_set_allocated_ai_recommended_switch(
      ::bilibili::community::service::dm::v1::PlayerDanmakuAiRecommendedSwitch* ai_recommended_switch);
  ::bilibili::community::service::dm::v1::PlayerDanmakuAiRecommendedSwitch* unsafe_arena_release_ai_recommended_switch();

  // .bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedLevel ai_recommended_level = 6;
  bool has_ai_recommended_level() const;
  private:
  bool _internal_has_ai_recommended_level() const;
  public:
  void clear_ai_recommended_level();
  const ::bilibili::community::service::dm::v1::PlayerDanmakuAiRecommendedLevel& ai_recommended_level() const;
  PROTOBUF_NODISCARD ::bilibili::community::service::dm::v1::PlayerDanmakuAiRecommendedLevel* release_ai_recommended_level();
  ::bilibili::community::service::dm::v1::PlayerDanmakuAiRecommendedLevel* mutable_ai_recommended_level();
  void set_allocated_ai_recommended_level(::bilibili::community::service::dm::v1::PlayerDanmakuAiRecommendedLevel* ai_recommended_level);
  private:
  const ::bilibili::community::service::dm::v1::PlayerDanmakuAiRecommendedLevel& _internal_ai_recommended_level() const;
  ::bilibili::community::service::dm::v1::PlayerDanmakuAiRecommendedLevel* _internal_mutable_ai_recommended_level();
  public:
  void unsafe_arena_set_allocated_ai_recommended_level(
      ::bilibili::community::service::dm::v1::PlayerDanmakuAiRecommendedLevel* ai_recommended_level);
  ::bilibili::community::service::dm::v1::PlayerDanmakuAiRecommendedLevel* unsafe_arena_release_ai_recommended_level();

  // .bilibili.community.service.dm.v1.PlayerDanmakuBlocktop blocktop = 7;
  bool has_blocktop() const;
  private:
  bool _internal_has_blocktop() const;
  public:
  void clear_blocktop();
  const ::bilibili::community::service::dm::v1::PlayerDanmakuBlocktop& blocktop() const;
  PROTOBUF_NODISCARD ::bilibili::community::service::dm::v1::PlayerDanmakuBlocktop* release_blocktop();
  ::bilibili::community::service::dm::v1::PlayerDanmakuBlocktop* mutable_blocktop();
  void set_allocated_blocktop(::bilibili::community::service::dm::v1::PlayerDanmakuBlocktop* blocktop);
  private:
  const ::bilibili::community::service::dm::v1::PlayerDanmakuBlocktop& _internal_blocktop() const;
  ::bilibili::community::service::dm::v1::PlayerDanmakuBlocktop* _internal_mutable_blocktop();
  public:
  void unsafe_arena_set_allocated_blocktop(
      ::bilibili::community::service::dm::v1::PlayerDanmakuBlocktop* blocktop);
  ::bilibili::community::service::dm::v1::PlayerDanmakuBlocktop* unsafe_arena_release_blocktop();

  // .bilibili.community.service.dm.v1.PlayerDanmakuBlockscroll blockscroll = 8;
  bool has_blockscroll() const;
  private:
  bool _internal_has_blockscroll() const;
  public:
  void clear_blockscroll();
  const ::bilibili::community::service::dm::v1::PlayerDanmakuBlockscroll& blockscroll() const;
  PROTOBUF_NODISCARD ::bilibili::community::service::dm::v1::PlayerDanmakuBlockscroll* release_blockscroll();
  ::bilibili::community::service::dm::v1::PlayerDanmakuBlockscroll* mutable_blockscroll();
  void set_allocated_blockscroll(::bilibili::community::service::dm::v1::PlayerDanmakuBlockscroll* blockscroll);
  private:
  const ::bilibili::community::service::dm::v1::PlayerDanmakuBlockscroll& _internal_blockscroll() const;
  ::bilibili::community::service::dm::v1::PlayerDanmakuBlockscroll* _internal_mutable_blockscroll();
  public:
  void unsafe_arena_set_allocated_blockscroll(
      ::bilibili::community::service::dm::v1::PlayerDanmakuBlockscroll* blockscroll);
  ::bilibili::community::service::dm::v1::PlayerDanmakuBlockscroll* unsafe_arena_release_blockscroll();

  // .bilibili.community.service.dm.v1.PlayerDanmakuBlockbottom blockbottom = 9;
  bool has_blockbottom() const;
  private:
  bool _internal_has_blockbottom() const;
  public:
  void clear_blockbottom();
  const ::bilibili::community::service::dm::v1::PlayerDanmakuBlockbottom& blockbottom() const;
  PROTOBUF_NODISCARD ::bilibili::community::service::dm::v1::PlayerDanmakuBlockbottom* release_blockbottom();
  ::bilibili::community::service::dm::v1::PlayerDanmakuBlockbottom* mutable_blockbottom();
  void set_allocated_blockbottom(::bilibili::community::service::dm::v1::PlayerDanmakuBlockbottom* blockbottom);
  private:
  const ::bilibili::community::service::dm::v1::PlayerDanmakuBlockbottom& _internal_blockbottom() const;
  ::bilibili::community::service::dm::v1::PlayerDanmakuBlockbottom* _internal_mutable_blockbottom();
  public:
  void unsafe_arena_set_allocated_blockbottom(
      ::bilibili::community::service::dm::v1::PlayerDanmakuBlockbottom* blockbottom);
  ::bilibili::community::service::dm::v1::PlayerDanmakuBlockbottom* unsafe_arena_release_blockbottom();

  // .bilibili.community.service.dm.v1.PlayerDanmakuBlockcolorful blockcolorful = 10;
  bool has_blockcolorful() const;
  private:
  bool _internal_has_blockcolorful() const;
  public:
  void clear_blockcolorful();
  const ::bilibili::community::service::dm::v1::PlayerDanmakuBlockcolorful& blockcolorful() const;
  PROTOBUF_NODISCARD ::bilibili::community::service::dm::v1::PlayerDanmakuBlockcolorful* release_blockcolorful();
  ::bilibili::community::service::dm::v1::PlayerDanmakuBlockcolorful* mutable_blockcolorful();
  void set_allocated_blockcolorful(::bilibili::community::service::dm::v1::PlayerDanmakuBlockcolorful* blockcolorful);
  private:
  const ::bilibili::community::service::dm::v1::PlayerDanmakuBlockcolorful& _internal_blockcolorful() const;
  ::bilibili::community::service::dm::v1::PlayerDanmakuBlockcolorful* _internal_mutable_blockcolorful();
  public:
  void unsafe_arena_set_allocated_blockcolorful(
      ::bilibili::community::service::dm::v1::PlayerDanmakuBlockcolorful* blockcolorful);
  ::bilibili::community::service::dm::v1::PlayerDanmakuBlockcolorful* unsafe_arena_release_blockcolorful();

  // .bilibili.community.service.dm.v1.PlayerDanmakuBlockrepeat blockrepeat = 11;
  bool has_blockrepeat() const;
  private:
  bool _internal_has_blockrepeat() const;
  public:
  void clear_blockrepeat();
  const ::bilibili::community::service::dm::v1::PlayerDanmakuBlockrepeat& blockrepeat() const;
  PROTOBUF_NODISCARD ::bilibili::community::service::dm::v1::PlayerDanmakuBlockrepeat* release_blockrepeat();
  ::bilibili::community::service::dm::v1::PlayerDanmakuBlockrepeat* mutable_blockrepeat();
  void set_allocated_blockrepeat(::bilibili::community::service::dm::v1::PlayerDanmakuBlockrepeat* blockrepeat);
  private:
  const ::bilibili::community::service::dm::v1::PlayerDanmakuBlockrepeat& _internal_blockrepeat() const;
  ::bilibili::community::service::dm::v1::PlayerDanmakuBlockrepeat* _internal_mutable_blockrepeat();
  public:
  void unsafe_arena_set_allocated_blockrepeat(
      ::bilibili::community::service::dm::v1::PlayerDanmakuBlockrepeat* blockrepeat);
  ::bilibili::community::service::dm::v1::PlayerDanmakuBlockrepeat* unsafe_arena_release_blockrepeat();

  // .bilibili.community.service.dm.v1.PlayerDanmakuBlockspecial blockspecial = 12;
  bool has_blockspecial() const;
  private:
  bool _internal_has_blockspecial() const;
  public:
  void clear_blockspecial();
  const ::bilibili::community::service::dm::v1::PlayerDanmakuBlockspecial& blockspecial() const;
  PROTOBUF_NODISCARD ::bilibili::community::service::dm::v1::PlayerDanmakuBlockspecial* release_blockspecial();
  ::bilibili::community::service::dm::v1::PlayerDanmakuBlockspecial* mutable_blockspecial();
  void set_allocated_blockspecial(::bilibili::community::service::dm::v1::PlayerDanmakuBlockspecial* blockspecial);
  private:
  const ::bilibili::community::service::dm::v1::PlayerDanmakuBlockspecial& _internal_blockspecial() const;
  ::bilibili::community::service::dm::v1::PlayerDanmakuBlockspecial* _internal_mutable_blockspecial();
  public:
  void unsafe_arena_set_allocated_blockspecial(
      ::bilibili::community::service::dm::v1::PlayerDanmakuBlockspecial* blockspecial);
  ::bilibili::community::service::dm::v1::PlayerDanmakuBlockspecial* unsafe_arena_release_blockspecial();

  // .bilibili.community.service.dm.v1.PlayerDanmakuOpacity opacity = 13;
  bool has_opacity() const;
  private:
  bool _internal_has_opacity() const;
  public:
  void clear_opacity();
  const ::bilibili::community::service::dm::v1::PlayerDanmakuOpacity& opacity() const;
  PROTOBUF_NODISCARD ::bilibili::community::service::dm::v1::PlayerDanmakuOpacity* release_opacity();
  ::bilibili::community::service::dm::v1::PlayerDanmakuOpacity* mutable_opacity();
  void set_allocated_opacity(::bilibili::community::service::dm::v1::PlayerDanmakuOpacity* opacity);
  private:
  const ::bilibili::community::service::dm::v1::PlayerDanmakuOpacity& _internal_opacity() const;
  ::bilibili::community::service::dm::v1::PlayerDanmakuOpacity* _internal_mutable_opacity();
  public:
  void unsafe_arena_set_allocated_opacity(
      ::bilibili::community::service::dm::v1::PlayerDanmakuOpacity* opacity);
  ::bilibili::community::service::dm::v1::PlayerDanmakuOpacity* unsafe_arena_release_opacity();

  // .bilibili.community.service.dm.v1.PlayerDanmakuScalingfactor scalingfactor = 14;
  bool has_scalingfactor() const;
  private:
  bool _internal_has_scalingfactor() const;
  public:
  void clear_scalingfactor();
  const ::bilibili::community::service::dm::v1::PlayerDanmakuScalingfactor& scalingfactor() const;
  PROTOBUF_NODISCARD ::bilibili::community::service::dm::v1::PlayerDanmakuScalingfactor* release_scalingfactor();
  ::bilibili::community::service::dm::v1::PlayerDanmakuScalingfactor* mutable_scalingfactor();
  void set_allocated_scalingfactor(::bilibili::community::service::dm::v1::PlayerDanmakuScalingfactor* scalingfactor);
  private:
  const ::bilibili::community::service::dm::v1::PlayerDanmakuScalingfactor& _internal_scalingfactor() const;
  ::bilibili::community::service::dm::v1::PlayerDanmakuScalingfactor* _internal_mutable_scalingfactor();
  public:
  void unsafe_arena_set_allocated_scalingfactor(
      ::bilibili::community::service::dm::v1::PlayerDanmakuScalingfactor* scalingfactor);
  ::bilibili::community::service::dm::v1::PlayerDanmakuScalingfactor* unsafe_arena_release_scalingfactor();

  // .bilibili.community.service.dm.v1.PlayerDanmakuDomain domain = 15;
  bool has_domain() const;
  private:
  bool _internal_has_domain() const;
  public:
  void clear_domain();
  const ::bilibili::community::service::dm::v1::PlayerDanmakuDomain& domain() const;
  PROTOBUF_NODISCARD ::bilibili::community::service::dm::v1::PlayerDanmakuDomain* release_domain();
  ::bilibili::community::service::dm::v1::PlayerDanmakuDomain* mutable_domain();
  void set_allocated_domain(::bilibili::community::service::dm::v1::PlayerDanmakuDomain* domain);
  private:
  const ::bilibili::community::service::dm::v1::PlayerDanmakuDomain& _internal_domain() const;
  ::bilibili::community::service::dm::v1::PlayerDanmakuDomain* _internal_mutable_domain();
  public:
  void unsafe_arena_set_allocated_domain(
      ::bilibili::community::service::dm::v1::PlayerDanmakuDomain* domain);
  ::bilibili::community::service::dm::v1::PlayerDanmakuDomain* unsafe_arena_release_domain();

  // .bilibili.community.service.dm.v1.PlayerDanmakuSpeed speed = 16;
  bool has_speed() const;
  private:
  bool _internal_has_speed() const;
  public:
  void clear_speed();
  const ::bilibili::community::service::dm::v1::PlayerDanmakuSpeed& speed() const;
  PROTOBUF_NODISCARD ::bilibili::community::service::dm::v1::PlayerDanmakuSpeed* release_speed();
  ::bilibili::community::service::dm::v1::PlayerDanmakuSpeed* mutable_speed();
  void set_allocated_speed(::bilibili::community::service::dm::v1::PlayerDanmakuSpeed* speed);
  private:
  const ::bilibili::community::service::dm::v1::PlayerDanmakuSpeed& _internal_speed() const;
  ::bilibili::community::service::dm::v1::PlayerDanmakuSpeed* _internal_mutable_speed();
  public:
  void unsafe_arena_set_allocated_speed(
      ::bilibili::community::service::dm::v1::PlayerDanmakuSpeed* speed);
  ::bilibili::community::service::dm::v1::PlayerDanmakuSpeed* unsafe_arena_release_speed();

  // .bilibili.community.service.dm.v1.PlayerDanmakuEnableblocklist enableblocklist = 17;
  bool has_enableblocklist() const;
  private:
  bool _internal_has_enableblocklist() const;
  public:
  void clear_enableblocklist();
  const ::bilibili::community::service::dm::v1::PlayerDanmakuEnableblocklist& enableblocklist() const;
  PROTOBUF_NODISCARD ::bilibili::community::service::dm::v1::PlayerDanmakuEnableblocklist* release_enableblocklist();
  ::bilibili::community::service::dm::v1::PlayerDanmakuEnableblocklist* mutable_enableblocklist();
  void set_allocated_enableblocklist(::bilibili::community::service::dm::v1::PlayerDanmakuEnableblocklist* enableblocklist);
  private:
  const ::bilibili::community::service::dm::v1::PlayerDanmakuEnableblocklist& _internal_enableblocklist() const;
  ::bilibili::community::service::dm::v1::PlayerDanmakuEnableblocklist* _internal_mutable_enableblocklist();
  public:
  void unsafe_arena_set_allocated_enableblocklist(
      ::bilibili::community::service::dm::v1::PlayerDanmakuEnableblocklist* enableblocklist);
  ::bilibili::community::service::dm::v1::PlayerDanmakuEnableblocklist* unsafe_arena_release_enableblocklist();

  // .bilibili.community.service.dm.v1.InlinePlayerDanmakuSwitch inlinePlayerDanmakuSwitch = 18;
  bool has_inlineplayerdanmakuswitch() const;
  private:
  bool _internal_has_inlineplayerdanmakuswitch() const;
  public:
  void clear_inlineplayerdanmakuswitch();
  const ::bilibili::community::service::dm::v1::InlinePlayerDanmakuSwitch& inlineplayerdanmakuswitch() const;
  PROTOBUF_NODISCARD ::bilibili::community::service::dm::v1::InlinePlayerDanmakuSwitch* release_inlineplayerdanmakuswitch();
  ::bilibili::community::service::dm::v1::InlinePlayerDanmakuSwitch* mutable_inlineplayerdanmakuswitch();
  void set_allocated_inlineplayerdanmakuswitch(::bilibili::community::service::dm::v1::InlinePlayerDanmakuSwitch* inlineplayerdanmakuswitch);
  private:
  const ::bilibili::community::service::dm::v1::InlinePlayerDanmakuSwitch& _internal_inlineplayerdanmakuswitch() const;
  ::bilibili::community::service::dm::v1::InlinePlayerDanmakuSwitch* _internal_mutable_inlineplayerdanmakuswitch();
  public:
  void unsafe_arena_set_allocated_inlineplayerdanmakuswitch(
      ::bilibili::community::service::dm::v1::InlinePlayerDanmakuSwitch* inlineplayerdanmakuswitch);
  ::bilibili::community::service::dm::v1::InlinePlayerDanmakuSwitch* unsafe_arena_release_inlineplayerdanmakuswitch();

  // int64 ts = 1;
  void clear_ts();
  int64_t ts() const;
  void set_ts(int64_t value);
  private:
  int64_t _internal_ts() const;
  void _internal_set_ts(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:bilibili.community.service.dm.v1.DmPlayerConfigReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::bilibili::community::service::dm::v1::PlayerDanmakuSwitch* switch__;
    ::bilibili::community::service::dm::v1::PlayerDanmakuSwitchSave* switch_save_;
    ::bilibili::community::service::dm::v1::PlayerDanmakuUseDefaultConfig* use_default_config_;
    ::bilibili::community::service::dm::v1::PlayerDanmakuAiRecommendedSwitch* ai_recommended_switch_;
    ::bilibili::community::service::dm::v1::PlayerDanmakuAiRecommendedLevel* ai_recommended_level_;
    ::bilibili::community::service::dm::v1::PlayerDanmakuBlocktop* blocktop_;
    ::bilibili::community::service::dm::v1::PlayerDanmakuBlockscroll* blockscroll_;
    ::bilibili::community::service::dm::v1::PlayerDanmakuBlockbottom* blockbottom_;
    ::bilibili::community::service::dm::v1::PlayerDanmakuBlockcolorful* blockcolorful_;
    ::bilibili::community::service::dm::v1::PlayerDanmakuBlockrepeat* blockrepeat_;
    ::bilibili::community::service::dm::v1::PlayerDanmakuBlockspecial* blockspecial_;
    ::bilibili::community::service::dm::v1::PlayerDanmakuOpacity* opacity_;
    ::bilibili::community::service::dm::v1::PlayerDanmakuScalingfactor* scalingfactor_;
    ::bilibili::community::service::dm::v1::PlayerDanmakuDomain* domain_;
    ::bilibili::community::service::dm::v1::PlayerDanmakuSpeed* speed_;
    ::bilibili::community::service::dm::v1::PlayerDanmakuEnableblocklist* enableblocklist_;
    ::bilibili::community::service::dm::v1::InlinePlayerDanmakuSwitch* inlineplayerdanmakuswitch_;
    int64_t ts_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_reply_2eproto;
};
// -------------------------------------------------------------------

class Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bilibili.community.service.dm.v1.Response) */ {
 public:
  inline Response() : Response(nullptr) {}
  ~Response() override;
  explicit PROTOBUF_CONSTEXPR Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Response(const Response& from);
  Response(Response&& from) noexcept
    : Response() {
    *this = ::std::move(from);
  }

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response& operator=(Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(Response& a, Response& b) {
    a.Swap(&b);
  }
  inline void Swap(Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Response& from) {
    Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bilibili.community.service.dm.v1.Response";
  }
  protected:
  explicit Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kCodeFieldNumber = 1,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // int32 code = 1;
  void clear_code();
  int32_t code() const;
  void set_code(int32_t value);
  private:
  int32_t _internal_code() const;
  void _internal_set_code(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:bilibili.community.service.dm.v1.Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    int32_t code_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_reply_2eproto;
};
// -------------------------------------------------------------------

class DanmakuFlag final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bilibili.community.service.dm.v1.DanmakuFlag) */ {
 public:
  inline DanmakuFlag() : DanmakuFlag(nullptr) {}
  ~DanmakuFlag() override;
  explicit PROTOBUF_CONSTEXPR DanmakuFlag(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DanmakuFlag(const DanmakuFlag& from);
  DanmakuFlag(DanmakuFlag&& from) noexcept
    : DanmakuFlag() {
    *this = ::std::move(from);
  }

  inline DanmakuFlag& operator=(const DanmakuFlag& from) {
    CopyFrom(from);
    return *this;
  }
  inline DanmakuFlag& operator=(DanmakuFlag&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DanmakuFlag& default_instance() {
    return *internal_default_instance();
  }
  static inline const DanmakuFlag* internal_default_instance() {
    return reinterpret_cast<const DanmakuFlag*>(
               &_DanmakuFlag_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(DanmakuFlag& a, DanmakuFlag& b) {
    a.Swap(&b);
  }
  inline void Swap(DanmakuFlag* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DanmakuFlag* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DanmakuFlag* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DanmakuFlag>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DanmakuFlag& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DanmakuFlag& from) {
    DanmakuFlag::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DanmakuFlag* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bilibili.community.service.dm.v1.DanmakuFlag";
  }
  protected:
  explicit DanmakuFlag(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDmidFieldNumber = 1,
    kFlagFieldNumber = 2,
  };
  // int64 dmid = 1;
  void clear_dmid();
  int64_t dmid() const;
  void set_dmid(int64_t value);
  private:
  int64_t _internal_dmid() const;
  void _internal_set_dmid(int64_t value);
  public:

  // uint32 flag = 2;
  void clear_flag();
  uint32_t flag() const;
  void set_flag(uint32_t value);
  private:
  uint32_t _internal_flag() const;
  void _internal_set_flag(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:bilibili.community.service.dm.v1.DanmakuFlag)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t dmid_;
    uint32_t flag_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_reply_2eproto;
};
// -------------------------------------------------------------------

class DanmakuFlagConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bilibili.community.service.dm.v1.DanmakuFlagConfig) */ {
 public:
  inline DanmakuFlagConfig() : DanmakuFlagConfig(nullptr) {}
  ~DanmakuFlagConfig() override;
  explicit PROTOBUF_CONSTEXPR DanmakuFlagConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DanmakuFlagConfig(const DanmakuFlagConfig& from);
  DanmakuFlagConfig(DanmakuFlagConfig&& from) noexcept
    : DanmakuFlagConfig() {
    *this = ::std::move(from);
  }

  inline DanmakuFlagConfig& operator=(const DanmakuFlagConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline DanmakuFlagConfig& operator=(DanmakuFlagConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DanmakuFlagConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const DanmakuFlagConfig* internal_default_instance() {
    return reinterpret_cast<const DanmakuFlagConfig*>(
               &_DanmakuFlagConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(DanmakuFlagConfig& a, DanmakuFlagConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(DanmakuFlagConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DanmakuFlagConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DanmakuFlagConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DanmakuFlagConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DanmakuFlagConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DanmakuFlagConfig& from) {
    DanmakuFlagConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DanmakuFlagConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bilibili.community.service.dm.v1.DanmakuFlagConfig";
  }
  protected:
  explicit DanmakuFlagConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecTextFieldNumber = 2,
    kRecFlagFieldNumber = 1,
    kRecSwitchFieldNumber = 3,
  };
  // string rec_text = 2;
  void clear_rec_text();
  const std::string& rec_text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_rec_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_rec_text();
  PROTOBUF_NODISCARD std::string* release_rec_text();
  void set_allocated_rec_text(std::string* rec_text);
  private:
  const std::string& _internal_rec_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rec_text(const std::string& value);
  std::string* _internal_mutable_rec_text();
  public:

  // int32 rec_flag = 1;
  void clear_rec_flag();
  int32_t rec_flag() const;
  void set_rec_flag(int32_t value);
  private:
  int32_t _internal_rec_flag() const;
  void _internal_set_rec_flag(int32_t value);
  public:

  // int32 rec_switch = 3;
  void clear_rec_switch();
  int32_t rec_switch() const;
  void set_rec_switch(int32_t value);
  private:
  int32_t _internal_rec_switch() const;
  void _internal_set_rec_switch(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:bilibili.community.service.dm.v1.DanmakuFlagConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rec_text_;
    int32_t rec_flag_;
    int32_t rec_switch_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_reply_2eproto;
};
// -------------------------------------------------------------------

class DanmakuAIFlag final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bilibili.community.service.dm.v1.DanmakuAIFlag) */ {
 public:
  inline DanmakuAIFlag() : DanmakuAIFlag(nullptr) {}
  ~DanmakuAIFlag() override;
  explicit PROTOBUF_CONSTEXPR DanmakuAIFlag(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DanmakuAIFlag(const DanmakuAIFlag& from);
  DanmakuAIFlag(DanmakuAIFlag&& from) noexcept
    : DanmakuAIFlag() {
    *this = ::std::move(from);
  }

  inline DanmakuAIFlag& operator=(const DanmakuAIFlag& from) {
    CopyFrom(from);
    return *this;
  }
  inline DanmakuAIFlag& operator=(DanmakuAIFlag&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DanmakuAIFlag& default_instance() {
    return *internal_default_instance();
  }
  static inline const DanmakuAIFlag* internal_default_instance() {
    return reinterpret_cast<const DanmakuAIFlag*>(
               &_DanmakuAIFlag_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(DanmakuAIFlag& a, DanmakuAIFlag& b) {
    a.Swap(&b);
  }
  inline void Swap(DanmakuAIFlag* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DanmakuAIFlag* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DanmakuAIFlag* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DanmakuAIFlag>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DanmakuAIFlag& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DanmakuAIFlag& from) {
    DanmakuAIFlag::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DanmakuAIFlag* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bilibili.community.service.dm.v1.DanmakuAIFlag";
  }
  protected:
  explicit DanmakuAIFlag(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDmFlagsFieldNumber = 1,
  };
  // repeated .bilibili.community.service.dm.v1.DanmakuFlag dm_flags = 1;
  int dm_flags_size() const;
  private:
  int _internal_dm_flags_size() const;
  public:
  void clear_dm_flags();
  ::bilibili::community::service::dm::v1::DanmakuFlag* mutable_dm_flags(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bilibili::community::service::dm::v1::DanmakuFlag >*
      mutable_dm_flags();
  private:
  const ::bilibili::community::service::dm::v1::DanmakuFlag& _internal_dm_flags(int index) const;
  ::bilibili::community::service::dm::v1::DanmakuFlag* _internal_add_dm_flags();
  public:
  const ::bilibili::community::service::dm::v1::DanmakuFlag& dm_flags(int index) const;
  ::bilibili::community::service::dm::v1::DanmakuFlag* add_dm_flags();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bilibili::community::service::dm::v1::DanmakuFlag >&
      dm_flags() const;

  // @@protoc_insertion_point(class_scope:bilibili.community.service.dm.v1.DanmakuAIFlag)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bilibili::community::service::dm::v1::DanmakuFlag > dm_flags_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_reply_2eproto;
};
// -------------------------------------------------------------------

class DanmuPlayerViewConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bilibili.community.service.dm.v1.DanmuPlayerViewConfig) */ {
 public:
  inline DanmuPlayerViewConfig() : DanmuPlayerViewConfig(nullptr) {}
  ~DanmuPlayerViewConfig() override;
  explicit PROTOBUF_CONSTEXPR DanmuPlayerViewConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DanmuPlayerViewConfig(const DanmuPlayerViewConfig& from);
  DanmuPlayerViewConfig(DanmuPlayerViewConfig&& from) noexcept
    : DanmuPlayerViewConfig() {
    *this = ::std::move(from);
  }

  inline DanmuPlayerViewConfig& operator=(const DanmuPlayerViewConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline DanmuPlayerViewConfig& operator=(DanmuPlayerViewConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DanmuPlayerViewConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const DanmuPlayerViewConfig* internal_default_instance() {
    return reinterpret_cast<const DanmuPlayerViewConfig*>(
               &_DanmuPlayerViewConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(DanmuPlayerViewConfig& a, DanmuPlayerViewConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(DanmuPlayerViewConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DanmuPlayerViewConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DanmuPlayerViewConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DanmuPlayerViewConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DanmuPlayerViewConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DanmuPlayerViewConfig& from) {
    DanmuPlayerViewConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DanmuPlayerViewConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bilibili.community.service.dm.v1.DanmuPlayerViewConfig";
  }
  protected:
  explicit DanmuPlayerViewConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDanmukuPlayerDynamicConfigFieldNumber = 3,
    kDanmukuDefaultPlayerConfigFieldNumber = 1,
    kDanmukuPlayerConfigFieldNumber = 2,
  };
  // repeated .bilibili.community.service.dm.v1.DanmuPlayerDynamicConfig danmuku_player_dynamic_config = 3;
  int danmuku_player_dynamic_config_size() const;
  private:
  int _internal_danmuku_player_dynamic_config_size() const;
  public:
  void clear_danmuku_player_dynamic_config();
  ::bilibili::community::service::dm::v1::DanmuPlayerDynamicConfig* mutable_danmuku_player_dynamic_config(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bilibili::community::service::dm::v1::DanmuPlayerDynamicConfig >*
      mutable_danmuku_player_dynamic_config();
  private:
  const ::bilibili::community::service::dm::v1::DanmuPlayerDynamicConfig& _internal_danmuku_player_dynamic_config(int index) const;
  ::bilibili::community::service::dm::v1::DanmuPlayerDynamicConfig* _internal_add_danmuku_player_dynamic_config();
  public:
  const ::bilibili::community::service::dm::v1::DanmuPlayerDynamicConfig& danmuku_player_dynamic_config(int index) const;
  ::bilibili::community::service::dm::v1::DanmuPlayerDynamicConfig* add_danmuku_player_dynamic_config();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bilibili::community::service::dm::v1::DanmuPlayerDynamicConfig >&
      danmuku_player_dynamic_config() const;

  // .bilibili.community.service.dm.v1.DanmuDefaultPlayerConfig danmuku_default_player_config = 1;
  bool has_danmuku_default_player_config() const;
  private:
  bool _internal_has_danmuku_default_player_config() const;
  public:
  void clear_danmuku_default_player_config();
  const ::bilibili::community::service::dm::v1::DanmuDefaultPlayerConfig& danmuku_default_player_config() const;
  PROTOBUF_NODISCARD ::bilibili::community::service::dm::v1::DanmuDefaultPlayerConfig* release_danmuku_default_player_config();
  ::bilibili::community::service::dm::v1::DanmuDefaultPlayerConfig* mutable_danmuku_default_player_config();
  void set_allocated_danmuku_default_player_config(::bilibili::community::service::dm::v1::DanmuDefaultPlayerConfig* danmuku_default_player_config);
  private:
  const ::bilibili::community::service::dm::v1::DanmuDefaultPlayerConfig& _internal_danmuku_default_player_config() const;
  ::bilibili::community::service::dm::v1::DanmuDefaultPlayerConfig* _internal_mutable_danmuku_default_player_config();
  public:
  void unsafe_arena_set_allocated_danmuku_default_player_config(
      ::bilibili::community::service::dm::v1::DanmuDefaultPlayerConfig* danmuku_default_player_config);
  ::bilibili::community::service::dm::v1::DanmuDefaultPlayerConfig* unsafe_arena_release_danmuku_default_player_config();

  // .bilibili.community.service.dm.v1.DanmuPlayerConfig danmuku_player_config = 2;
  bool has_danmuku_player_config() const;
  private:
  bool _internal_has_danmuku_player_config() const;
  public:
  void clear_danmuku_player_config();
  const ::bilibili::community::service::dm::v1::DanmuPlayerConfig& danmuku_player_config() const;
  PROTOBUF_NODISCARD ::bilibili::community::service::dm::v1::DanmuPlayerConfig* release_danmuku_player_config();
  ::bilibili::community::service::dm::v1::DanmuPlayerConfig* mutable_danmuku_player_config();
  void set_allocated_danmuku_player_config(::bilibili::community::service::dm::v1::DanmuPlayerConfig* danmuku_player_config);
  private:
  const ::bilibili::community::service::dm::v1::DanmuPlayerConfig& _internal_danmuku_player_config() const;
  ::bilibili::community::service::dm::v1::DanmuPlayerConfig* _internal_mutable_danmuku_player_config();
  public:
  void unsafe_arena_set_allocated_danmuku_player_config(
      ::bilibili::community::service::dm::v1::DanmuPlayerConfig* danmuku_player_config);
  ::bilibili::community::service::dm::v1::DanmuPlayerConfig* unsafe_arena_release_danmuku_player_config();

  // @@protoc_insertion_point(class_scope:bilibili.community.service.dm.v1.DanmuPlayerViewConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bilibili::community::service::dm::v1::DanmuPlayerDynamicConfig > danmuku_player_dynamic_config_;
    ::bilibili::community::service::dm::v1::DanmuDefaultPlayerConfig* danmuku_default_player_config_;
    ::bilibili::community::service::dm::v1::DanmuPlayerConfig* danmuku_player_config_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_reply_2eproto;
};
// -------------------------------------------------------------------

class DanmuDefaultPlayerConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bilibili.community.service.dm.v1.DanmuDefaultPlayerConfig) */ {
 public:
  inline DanmuDefaultPlayerConfig() : DanmuDefaultPlayerConfig(nullptr) {}
  ~DanmuDefaultPlayerConfig() override;
  explicit PROTOBUF_CONSTEXPR DanmuDefaultPlayerConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DanmuDefaultPlayerConfig(const DanmuDefaultPlayerConfig& from);
  DanmuDefaultPlayerConfig(DanmuDefaultPlayerConfig&& from) noexcept
    : DanmuDefaultPlayerConfig() {
    *this = ::std::move(from);
  }

  inline DanmuDefaultPlayerConfig& operator=(const DanmuDefaultPlayerConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline DanmuDefaultPlayerConfig& operator=(DanmuDefaultPlayerConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DanmuDefaultPlayerConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const DanmuDefaultPlayerConfig* internal_default_instance() {
    return reinterpret_cast<const DanmuDefaultPlayerConfig*>(
               &_DanmuDefaultPlayerConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(DanmuDefaultPlayerConfig& a, DanmuDefaultPlayerConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(DanmuDefaultPlayerConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DanmuDefaultPlayerConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DanmuDefaultPlayerConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DanmuDefaultPlayerConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DanmuDefaultPlayerConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DanmuDefaultPlayerConfig& from) {
    DanmuDefaultPlayerConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DanmuDefaultPlayerConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bilibili.community.service.dm.v1.DanmuDefaultPlayerConfig";
  }
  protected:
  explicit DanmuDefaultPlayerConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerDanmakuUseDefaultConfigFieldNumber = 1,
    kPlayerDanmakuAiRecommendedSwitchFieldNumber = 4,
    kPlayerDanmakuBlocktopFieldNumber = 6,
    kPlayerDanmakuBlockscrollFieldNumber = 7,
    kPlayerDanmakuAiRecommendedLevelFieldNumber = 5,
    kPlayerDanmakuBlockbottomFieldNumber = 8,
    kPlayerDanmakuBlockcolorfulFieldNumber = 9,
    kPlayerDanmakuBlockrepeatFieldNumber = 10,
    kPlayerDanmakuBlockspecialFieldNumber = 11,
    kPlayerDanmakuOpacityFieldNumber = 12,
    kPlayerDanmakuScalingfactorFieldNumber = 13,
    kPlayerDanmakuDomainFieldNumber = 14,
    kPlayerDanmakuSpeedFieldNumber = 15,
    kInlinePlayerDanmakuSwitchFieldNumber = 16,
  };
  // bool player_danmaku_use_default_config = 1;
  void clear_player_danmaku_use_default_config();
  bool player_danmaku_use_default_config() const;
  void set_player_danmaku_use_default_config(bool value);
  private:
  bool _internal_player_danmaku_use_default_config() const;
  void _internal_set_player_danmaku_use_default_config(bool value);
  public:

  // bool player_danmaku_ai_recommended_switch = 4;
  void clear_player_danmaku_ai_recommended_switch();
  bool player_danmaku_ai_recommended_switch() const;
  void set_player_danmaku_ai_recommended_switch(bool value);
  private:
  bool _internal_player_danmaku_ai_recommended_switch() const;
  void _internal_set_player_danmaku_ai_recommended_switch(bool value);
  public:

  // bool player_danmaku_blocktop = 6;
  void clear_player_danmaku_blocktop();
  bool player_danmaku_blocktop() const;
  void set_player_danmaku_blocktop(bool value);
  private:
  bool _internal_player_danmaku_blocktop() const;
  void _internal_set_player_danmaku_blocktop(bool value);
  public:

  // bool player_danmaku_blockscroll = 7;
  void clear_player_danmaku_blockscroll();
  bool player_danmaku_blockscroll() const;
  void set_player_danmaku_blockscroll(bool value);
  private:
  bool _internal_player_danmaku_blockscroll() const;
  void _internal_set_player_danmaku_blockscroll(bool value);
  public:

  // int32 player_danmaku_ai_recommended_level = 5;
  void clear_player_danmaku_ai_recommended_level();
  int32_t player_danmaku_ai_recommended_level() const;
  void set_player_danmaku_ai_recommended_level(int32_t value);
  private:
  int32_t _internal_player_danmaku_ai_recommended_level() const;
  void _internal_set_player_danmaku_ai_recommended_level(int32_t value);
  public:

  // bool player_danmaku_blockbottom = 8;
  void clear_player_danmaku_blockbottom();
  bool player_danmaku_blockbottom() const;
  void set_player_danmaku_blockbottom(bool value);
  private:
  bool _internal_player_danmaku_blockbottom() const;
  void _internal_set_player_danmaku_blockbottom(bool value);
  public:

  // bool player_danmaku_blockcolorful = 9;
  void clear_player_danmaku_blockcolorful();
  bool player_danmaku_blockcolorful() const;
  void set_player_danmaku_blockcolorful(bool value);
  private:
  bool _internal_player_danmaku_blockcolorful() const;
  void _internal_set_player_danmaku_blockcolorful(bool value);
  public:

  // bool player_danmaku_blockrepeat = 10;
  void clear_player_danmaku_blockrepeat();
  bool player_danmaku_blockrepeat() const;
  void set_player_danmaku_blockrepeat(bool value);
  private:
  bool _internal_player_danmaku_blockrepeat() const;
  void _internal_set_player_danmaku_blockrepeat(bool value);
  public:

  // bool player_danmaku_blockspecial = 11;
  void clear_player_danmaku_blockspecial();
  bool player_danmaku_blockspecial() const;
  void set_player_danmaku_blockspecial(bool value);
  private:
  bool _internal_player_danmaku_blockspecial() const;
  void _internal_set_player_danmaku_blockspecial(bool value);
  public:

  // float player_danmaku_opacity = 12;
  void clear_player_danmaku_opacity();
  float player_danmaku_opacity() const;
  void set_player_danmaku_opacity(float value);
  private:
  float _internal_player_danmaku_opacity() const;
  void _internal_set_player_danmaku_opacity(float value);
  public:

  // float player_danmaku_scalingfactor = 13;
  void clear_player_danmaku_scalingfactor();
  float player_danmaku_scalingfactor() const;
  void set_player_danmaku_scalingfactor(float value);
  private:
  float _internal_player_danmaku_scalingfactor() const;
  void _internal_set_player_danmaku_scalingfactor(float value);
  public:

  // float player_danmaku_domain = 14;
  void clear_player_danmaku_domain();
  float player_danmaku_domain() const;
  void set_player_danmaku_domain(float value);
  private:
  float _internal_player_danmaku_domain() const;
  void _internal_set_player_danmaku_domain(float value);
  public:

  // int32 player_danmaku_speed = 15;
  void clear_player_danmaku_speed();
  int32_t player_danmaku_speed() const;
  void set_player_danmaku_speed(int32_t value);
  private:
  int32_t _internal_player_danmaku_speed() const;
  void _internal_set_player_danmaku_speed(int32_t value);
  public:

  // bool inline_player_danmaku_switch = 16;
  void clear_inline_player_danmaku_switch();
  bool inline_player_danmaku_switch() const;
  void set_inline_player_danmaku_switch(bool value);
  private:
  bool _internal_inline_player_danmaku_switch() const;
  void _internal_set_inline_player_danmaku_switch(bool value);
  public:

  // @@protoc_insertion_point(class_scope:bilibili.community.service.dm.v1.DanmuDefaultPlayerConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool player_danmaku_use_default_config_;
    bool player_danmaku_ai_recommended_switch_;
    bool player_danmaku_blocktop_;
    bool player_danmaku_blockscroll_;
    int32_t player_danmaku_ai_recommended_level_;
    bool player_danmaku_blockbottom_;
    bool player_danmaku_blockcolorful_;
    bool player_danmaku_blockrepeat_;
    bool player_danmaku_blockspecial_;
    float player_danmaku_opacity_;
    float player_danmaku_scalingfactor_;
    float player_danmaku_domain_;
    int32_t player_danmaku_speed_;
    bool inline_player_danmaku_switch_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_reply_2eproto;
};
// -------------------------------------------------------------------

class DanmuPlayerConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bilibili.community.service.dm.v1.DanmuPlayerConfig) */ {
 public:
  inline DanmuPlayerConfig() : DanmuPlayerConfig(nullptr) {}
  ~DanmuPlayerConfig() override;
  explicit PROTOBUF_CONSTEXPR DanmuPlayerConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DanmuPlayerConfig(const DanmuPlayerConfig& from);
  DanmuPlayerConfig(DanmuPlayerConfig&& from) noexcept
    : DanmuPlayerConfig() {
    *this = ::std::move(from);
  }

  inline DanmuPlayerConfig& operator=(const DanmuPlayerConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline DanmuPlayerConfig& operator=(DanmuPlayerConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DanmuPlayerConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const DanmuPlayerConfig* internal_default_instance() {
    return reinterpret_cast<const DanmuPlayerConfig*>(
               &_DanmuPlayerConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(DanmuPlayerConfig& a, DanmuPlayerConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(DanmuPlayerConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DanmuPlayerConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DanmuPlayerConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DanmuPlayerConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DanmuPlayerConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DanmuPlayerConfig& from) {
    DanmuPlayerConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DanmuPlayerConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bilibili.community.service.dm.v1.DanmuPlayerConfig";
  }
  protected:
  explicit DanmuPlayerConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerDanmakuSwitchFieldNumber = 1,
    kPlayerDanmakuSwitchSaveFieldNumber = 2,
    kPlayerDanmakuUseDefaultConfigFieldNumber = 3,
    kPlayerDanmakuAiRecommendedSwitchFieldNumber = 4,
    kPlayerDanmakuAiRecommendedLevelFieldNumber = 5,
    kPlayerDanmakuBlocktopFieldNumber = 6,
    kPlayerDanmakuBlockscrollFieldNumber = 7,
    kPlayerDanmakuBlockbottomFieldNumber = 8,
    kPlayerDanmakuBlockcolorfulFieldNumber = 9,
    kPlayerDanmakuOpacityFieldNumber = 12,
    kPlayerDanmakuScalingfactorFieldNumber = 13,
    kPlayerDanmakuBlockrepeatFieldNumber = 10,
    kPlayerDanmakuBlockspecialFieldNumber = 11,
    kPlayerDanmakuEnableblocklistFieldNumber = 16,
    kInlinePlayerDanmakuSwitchFieldNumber = 17,
    kPlayerDanmakuDomainFieldNumber = 14,
    kPlayerDanmakuSpeedFieldNumber = 15,
    kInlinePlayerDanmakuConfigFieldNumber = 18,
  };
  // bool player_danmaku_switch = 1;
  void clear_player_danmaku_switch();
  bool player_danmaku_switch() const;
  void set_player_danmaku_switch(bool value);
  private:
  bool _internal_player_danmaku_switch() const;
  void _internal_set_player_danmaku_switch(bool value);
  public:

  // bool player_danmaku_switch_save = 2;
  void clear_player_danmaku_switch_save();
  bool player_danmaku_switch_save() const;
  void set_player_danmaku_switch_save(bool value);
  private:
  bool _internal_player_danmaku_switch_save() const;
  void _internal_set_player_danmaku_switch_save(bool value);
  public:

  // bool player_danmaku_use_default_config = 3;
  void clear_player_danmaku_use_default_config();
  bool player_danmaku_use_default_config() const;
  void set_player_danmaku_use_default_config(bool value);
  private:
  bool _internal_player_danmaku_use_default_config() const;
  void _internal_set_player_danmaku_use_default_config(bool value);
  public:

  // bool player_danmaku_ai_recommended_switch = 4;
  void clear_player_danmaku_ai_recommended_switch();
  bool player_danmaku_ai_recommended_switch() const;
  void set_player_danmaku_ai_recommended_switch(bool value);
  private:
  bool _internal_player_danmaku_ai_recommended_switch() const;
  void _internal_set_player_danmaku_ai_recommended_switch(bool value);
  public:

  // int32 player_danmaku_ai_recommended_level = 5;
  void clear_player_danmaku_ai_recommended_level();
  int32_t player_danmaku_ai_recommended_level() const;
  void set_player_danmaku_ai_recommended_level(int32_t value);
  private:
  int32_t _internal_player_danmaku_ai_recommended_level() const;
  void _internal_set_player_danmaku_ai_recommended_level(int32_t value);
  public:

  // bool player_danmaku_blocktop = 6;
  void clear_player_danmaku_blocktop();
  bool player_danmaku_blocktop() const;
  void set_player_danmaku_blocktop(bool value);
  private:
  bool _internal_player_danmaku_blocktop() const;
  void _internal_set_player_danmaku_blocktop(bool value);
  public:

  // bool player_danmaku_blockscroll = 7;
  void clear_player_danmaku_blockscroll();
  bool player_danmaku_blockscroll() const;
  void set_player_danmaku_blockscroll(bool value);
  private:
  bool _internal_player_danmaku_blockscroll() const;
  void _internal_set_player_danmaku_blockscroll(bool value);
  public:

  // bool player_danmaku_blockbottom = 8;
  void clear_player_danmaku_blockbottom();
  bool player_danmaku_blockbottom() const;
  void set_player_danmaku_blockbottom(bool value);
  private:
  bool _internal_player_danmaku_blockbottom() const;
  void _internal_set_player_danmaku_blockbottom(bool value);
  public:

  // bool player_danmaku_blockcolorful = 9;
  void clear_player_danmaku_blockcolorful();
  bool player_danmaku_blockcolorful() const;
  void set_player_danmaku_blockcolorful(bool value);
  private:
  bool _internal_player_danmaku_blockcolorful() const;
  void _internal_set_player_danmaku_blockcolorful(bool value);
  public:

  // float player_danmaku_opacity = 12;
  void clear_player_danmaku_opacity();
  float player_danmaku_opacity() const;
  void set_player_danmaku_opacity(float value);
  private:
  float _internal_player_danmaku_opacity() const;
  void _internal_set_player_danmaku_opacity(float value);
  public:

  // float player_danmaku_scalingfactor = 13;
  void clear_player_danmaku_scalingfactor();
  float player_danmaku_scalingfactor() const;
  void set_player_danmaku_scalingfactor(float value);
  private:
  float _internal_player_danmaku_scalingfactor() const;
  void _internal_set_player_danmaku_scalingfactor(float value);
  public:

  // bool player_danmaku_blockrepeat = 10;
  void clear_player_danmaku_blockrepeat();
  bool player_danmaku_blockrepeat() const;
  void set_player_danmaku_blockrepeat(bool value);
  private:
  bool _internal_player_danmaku_blockrepeat() const;
  void _internal_set_player_danmaku_blockrepeat(bool value);
  public:

  // bool player_danmaku_blockspecial = 11;
  void clear_player_danmaku_blockspecial();
  bool player_danmaku_blockspecial() const;
  void set_player_danmaku_blockspecial(bool value);
  private:
  bool _internal_player_danmaku_blockspecial() const;
  void _internal_set_player_danmaku_blockspecial(bool value);
  public:

  // bool player_danmaku_enableblocklist = 16;
  void clear_player_danmaku_enableblocklist();
  bool player_danmaku_enableblocklist() const;
  void set_player_danmaku_enableblocklist(bool value);
  private:
  bool _internal_player_danmaku_enableblocklist() const;
  void _internal_set_player_danmaku_enableblocklist(bool value);
  public:

  // bool inline_player_danmaku_switch = 17;
  void clear_inline_player_danmaku_switch();
  bool inline_player_danmaku_switch() const;
  void set_inline_player_danmaku_switch(bool value);
  private:
  bool _internal_inline_player_danmaku_switch() const;
  void _internal_set_inline_player_danmaku_switch(bool value);
  public:

  // float player_danmaku_domain = 14;
  void clear_player_danmaku_domain();
  float player_danmaku_domain() const;
  void set_player_danmaku_domain(float value);
  private:
  float _internal_player_danmaku_domain() const;
  void _internal_set_player_danmaku_domain(float value);
  public:

  // int32 player_danmaku_speed = 15;
  void clear_player_danmaku_speed();
  int32_t player_danmaku_speed() const;
  void set_player_danmaku_speed(int32_t value);
  private:
  int32_t _internal_player_danmaku_speed() const;
  void _internal_set_player_danmaku_speed(int32_t value);
  public:

  // int32 inline_player_danmaku_config = 18;
  void clear_inline_player_danmaku_config();
  int32_t inline_player_danmaku_config() const;
  void set_inline_player_danmaku_config(int32_t value);
  private:
  int32_t _internal_inline_player_danmaku_config() const;
  void _internal_set_inline_player_danmaku_config(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:bilibili.community.service.dm.v1.DanmuPlayerConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool player_danmaku_switch_;
    bool player_danmaku_switch_save_;
    bool player_danmaku_use_default_config_;
    bool player_danmaku_ai_recommended_switch_;
    int32_t player_danmaku_ai_recommended_level_;
    bool player_danmaku_blocktop_;
    bool player_danmaku_blockscroll_;
    bool player_danmaku_blockbottom_;
    bool player_danmaku_blockcolorful_;
    float player_danmaku_opacity_;
    float player_danmaku_scalingfactor_;
    bool player_danmaku_blockrepeat_;
    bool player_danmaku_blockspecial_;
    bool player_danmaku_enableblocklist_;
    bool inline_player_danmaku_switch_;
    float player_danmaku_domain_;
    int32_t player_danmaku_speed_;
    int32_t inline_player_danmaku_config_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_reply_2eproto;
};
// -------------------------------------------------------------------

class DanmuPlayerDynamicConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bilibili.community.service.dm.v1.DanmuPlayerDynamicConfig) */ {
 public:
  inline DanmuPlayerDynamicConfig() : DanmuPlayerDynamicConfig(nullptr) {}
  ~DanmuPlayerDynamicConfig() override;
  explicit PROTOBUF_CONSTEXPR DanmuPlayerDynamicConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DanmuPlayerDynamicConfig(const DanmuPlayerDynamicConfig& from);
  DanmuPlayerDynamicConfig(DanmuPlayerDynamicConfig&& from) noexcept
    : DanmuPlayerDynamicConfig() {
    *this = ::std::move(from);
  }

  inline DanmuPlayerDynamicConfig& operator=(const DanmuPlayerDynamicConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline DanmuPlayerDynamicConfig& operator=(DanmuPlayerDynamicConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DanmuPlayerDynamicConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const DanmuPlayerDynamicConfig* internal_default_instance() {
    return reinterpret_cast<const DanmuPlayerDynamicConfig*>(
               &_DanmuPlayerDynamicConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(DanmuPlayerDynamicConfig& a, DanmuPlayerDynamicConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(DanmuPlayerDynamicConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DanmuPlayerDynamicConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DanmuPlayerDynamicConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DanmuPlayerDynamicConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DanmuPlayerDynamicConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DanmuPlayerDynamicConfig& from) {
    DanmuPlayerDynamicConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DanmuPlayerDynamicConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bilibili.community.service.dm.v1.DanmuPlayerDynamicConfig";
  }
  protected:
  explicit DanmuPlayerDynamicConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProgressFieldNumber = 1,
    kPlayerDanmakuDomainFieldNumber = 2,
  };
  // int32 progress = 1;
  void clear_progress();
  int32_t progress() const;
  void set_progress(int32_t value);
  private:
  int32_t _internal_progress() const;
  void _internal_set_progress(int32_t value);
  public:

  // float player_danmaku_domain = 2;
  void clear_player_danmaku_domain();
  float player_danmaku_domain() const;
  void set_player_danmaku_domain(float value);
  private:
  float _internal_player_danmaku_domain() const;
  void _internal_set_player_danmaku_domain(float value);
  public:

  // @@protoc_insertion_point(class_scope:bilibili.community.service.dm.v1.DanmuPlayerDynamicConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t progress_;
    float player_danmaku_domain_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_reply_2eproto;
};
// -------------------------------------------------------------------

class PlayerDanmakuSwitch final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bilibili.community.service.dm.v1.PlayerDanmakuSwitch) */ {
 public:
  inline PlayerDanmakuSwitch() : PlayerDanmakuSwitch(nullptr) {}
  ~PlayerDanmakuSwitch() override;
  explicit PROTOBUF_CONSTEXPR PlayerDanmakuSwitch(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerDanmakuSwitch(const PlayerDanmakuSwitch& from);
  PlayerDanmakuSwitch(PlayerDanmakuSwitch&& from) noexcept
    : PlayerDanmakuSwitch() {
    *this = ::std::move(from);
  }

  inline PlayerDanmakuSwitch& operator=(const PlayerDanmakuSwitch& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerDanmakuSwitch& operator=(PlayerDanmakuSwitch&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerDanmakuSwitch& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerDanmakuSwitch* internal_default_instance() {
    return reinterpret_cast<const PlayerDanmakuSwitch*>(
               &_PlayerDanmakuSwitch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(PlayerDanmakuSwitch& a, PlayerDanmakuSwitch& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerDanmakuSwitch* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerDanmakuSwitch* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerDanmakuSwitch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerDanmakuSwitch>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerDanmakuSwitch& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlayerDanmakuSwitch& from) {
    PlayerDanmakuSwitch::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerDanmakuSwitch* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bilibili.community.service.dm.v1.PlayerDanmakuSwitch";
  }
  protected:
  explicit PlayerDanmakuSwitch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
    kCanIgnoreFieldNumber = 2,
  };
  // bool value = 1;
  void clear_value();
  bool value() const;
  void set_value(bool value);
  private:
  bool _internal_value() const;
  void _internal_set_value(bool value);
  public:

  // bool canIgnore = 2;
  void clear_canignore();
  bool canignore() const;
  void set_canignore(bool value);
  private:
  bool _internal_canignore() const;
  void _internal_set_canignore(bool value);
  public:

  // @@protoc_insertion_point(class_scope:bilibili.community.service.dm.v1.PlayerDanmakuSwitch)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool value_;
    bool canignore_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_reply_2eproto;
};
// -------------------------------------------------------------------

class PlayerDanmakuSwitchSave final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bilibili.community.service.dm.v1.PlayerDanmakuSwitchSave) */ {
 public:
  inline PlayerDanmakuSwitchSave() : PlayerDanmakuSwitchSave(nullptr) {}
  ~PlayerDanmakuSwitchSave() override;
  explicit PROTOBUF_CONSTEXPR PlayerDanmakuSwitchSave(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerDanmakuSwitchSave(const PlayerDanmakuSwitchSave& from);
  PlayerDanmakuSwitchSave(PlayerDanmakuSwitchSave&& from) noexcept
    : PlayerDanmakuSwitchSave() {
    *this = ::std::move(from);
  }

  inline PlayerDanmakuSwitchSave& operator=(const PlayerDanmakuSwitchSave& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerDanmakuSwitchSave& operator=(PlayerDanmakuSwitchSave&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerDanmakuSwitchSave& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerDanmakuSwitchSave* internal_default_instance() {
    return reinterpret_cast<const PlayerDanmakuSwitchSave*>(
               &_PlayerDanmakuSwitchSave_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(PlayerDanmakuSwitchSave& a, PlayerDanmakuSwitchSave& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerDanmakuSwitchSave* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerDanmakuSwitchSave* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerDanmakuSwitchSave* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerDanmakuSwitchSave>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerDanmakuSwitchSave& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlayerDanmakuSwitchSave& from) {
    PlayerDanmakuSwitchSave::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerDanmakuSwitchSave* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bilibili.community.service.dm.v1.PlayerDanmakuSwitchSave";
  }
  protected:
  explicit PlayerDanmakuSwitchSave(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // bool value = 1;
  void clear_value();
  bool value() const;
  void set_value(bool value);
  private:
  bool _internal_value() const;
  void _internal_set_value(bool value);
  public:

  // @@protoc_insertion_point(class_scope:bilibili.community.service.dm.v1.PlayerDanmakuSwitchSave)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_reply_2eproto;
};
// -------------------------------------------------------------------

class PlayerDanmakuUseDefaultConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bilibili.community.service.dm.v1.PlayerDanmakuUseDefaultConfig) */ {
 public:
  inline PlayerDanmakuUseDefaultConfig() : PlayerDanmakuUseDefaultConfig(nullptr) {}
  ~PlayerDanmakuUseDefaultConfig() override;
  explicit PROTOBUF_CONSTEXPR PlayerDanmakuUseDefaultConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerDanmakuUseDefaultConfig(const PlayerDanmakuUseDefaultConfig& from);
  PlayerDanmakuUseDefaultConfig(PlayerDanmakuUseDefaultConfig&& from) noexcept
    : PlayerDanmakuUseDefaultConfig() {
    *this = ::std::move(from);
  }

  inline PlayerDanmakuUseDefaultConfig& operator=(const PlayerDanmakuUseDefaultConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerDanmakuUseDefaultConfig& operator=(PlayerDanmakuUseDefaultConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerDanmakuUseDefaultConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerDanmakuUseDefaultConfig* internal_default_instance() {
    return reinterpret_cast<const PlayerDanmakuUseDefaultConfig*>(
               &_PlayerDanmakuUseDefaultConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(PlayerDanmakuUseDefaultConfig& a, PlayerDanmakuUseDefaultConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerDanmakuUseDefaultConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerDanmakuUseDefaultConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerDanmakuUseDefaultConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerDanmakuUseDefaultConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerDanmakuUseDefaultConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlayerDanmakuUseDefaultConfig& from) {
    PlayerDanmakuUseDefaultConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerDanmakuUseDefaultConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bilibili.community.service.dm.v1.PlayerDanmakuUseDefaultConfig";
  }
  protected:
  explicit PlayerDanmakuUseDefaultConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // bool value = 1;
  void clear_value();
  bool value() const;
  void set_value(bool value);
  private:
  bool _internal_value() const;
  void _internal_set_value(bool value);
  public:

  // @@protoc_insertion_point(class_scope:bilibili.community.service.dm.v1.PlayerDanmakuUseDefaultConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_reply_2eproto;
};
// -------------------------------------------------------------------

class PlayerDanmakuAiRecommendedSwitch final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedSwitch) */ {
 public:
  inline PlayerDanmakuAiRecommendedSwitch() : PlayerDanmakuAiRecommendedSwitch(nullptr) {}
  ~PlayerDanmakuAiRecommendedSwitch() override;
  explicit PROTOBUF_CONSTEXPR PlayerDanmakuAiRecommendedSwitch(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerDanmakuAiRecommendedSwitch(const PlayerDanmakuAiRecommendedSwitch& from);
  PlayerDanmakuAiRecommendedSwitch(PlayerDanmakuAiRecommendedSwitch&& from) noexcept
    : PlayerDanmakuAiRecommendedSwitch() {
    *this = ::std::move(from);
  }

  inline PlayerDanmakuAiRecommendedSwitch& operator=(const PlayerDanmakuAiRecommendedSwitch& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerDanmakuAiRecommendedSwitch& operator=(PlayerDanmakuAiRecommendedSwitch&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerDanmakuAiRecommendedSwitch& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerDanmakuAiRecommendedSwitch* internal_default_instance() {
    return reinterpret_cast<const PlayerDanmakuAiRecommendedSwitch*>(
               &_PlayerDanmakuAiRecommendedSwitch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(PlayerDanmakuAiRecommendedSwitch& a, PlayerDanmakuAiRecommendedSwitch& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerDanmakuAiRecommendedSwitch* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerDanmakuAiRecommendedSwitch* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerDanmakuAiRecommendedSwitch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerDanmakuAiRecommendedSwitch>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerDanmakuAiRecommendedSwitch& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlayerDanmakuAiRecommendedSwitch& from) {
    PlayerDanmakuAiRecommendedSwitch::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerDanmakuAiRecommendedSwitch* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedSwitch";
  }
  protected:
  explicit PlayerDanmakuAiRecommendedSwitch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // bool value = 1;
  void clear_value();
  bool value() const;
  void set_value(bool value);
  private:
  bool _internal_value() const;
  void _internal_set_value(bool value);
  public:

  // @@protoc_insertion_point(class_scope:bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedSwitch)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_reply_2eproto;
};
// -------------------------------------------------------------------

class PlayerDanmakuAiRecommendedLevel final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedLevel) */ {
 public:
  inline PlayerDanmakuAiRecommendedLevel() : PlayerDanmakuAiRecommendedLevel(nullptr) {}
  ~PlayerDanmakuAiRecommendedLevel() override;
  explicit PROTOBUF_CONSTEXPR PlayerDanmakuAiRecommendedLevel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerDanmakuAiRecommendedLevel(const PlayerDanmakuAiRecommendedLevel& from);
  PlayerDanmakuAiRecommendedLevel(PlayerDanmakuAiRecommendedLevel&& from) noexcept
    : PlayerDanmakuAiRecommendedLevel() {
    *this = ::std::move(from);
  }

  inline PlayerDanmakuAiRecommendedLevel& operator=(const PlayerDanmakuAiRecommendedLevel& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerDanmakuAiRecommendedLevel& operator=(PlayerDanmakuAiRecommendedLevel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerDanmakuAiRecommendedLevel& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerDanmakuAiRecommendedLevel* internal_default_instance() {
    return reinterpret_cast<const PlayerDanmakuAiRecommendedLevel*>(
               &_PlayerDanmakuAiRecommendedLevel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(PlayerDanmakuAiRecommendedLevel& a, PlayerDanmakuAiRecommendedLevel& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerDanmakuAiRecommendedLevel* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerDanmakuAiRecommendedLevel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerDanmakuAiRecommendedLevel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerDanmakuAiRecommendedLevel>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerDanmakuAiRecommendedLevel& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlayerDanmakuAiRecommendedLevel& from) {
    PlayerDanmakuAiRecommendedLevel::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerDanmakuAiRecommendedLevel* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedLevel";
  }
  protected:
  explicit PlayerDanmakuAiRecommendedLevel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // bool value = 1;
  void clear_value();
  bool value() const;
  void set_value(bool value);
  private:
  bool _internal_value() const;
  void _internal_set_value(bool value);
  public:

  // @@protoc_insertion_point(class_scope:bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedLevel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_reply_2eproto;
};
// -------------------------------------------------------------------

class PlayerDanmakuBlocktop final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bilibili.community.service.dm.v1.PlayerDanmakuBlocktop) */ {
 public:
  inline PlayerDanmakuBlocktop() : PlayerDanmakuBlocktop(nullptr) {}
  ~PlayerDanmakuBlocktop() override;
  explicit PROTOBUF_CONSTEXPR PlayerDanmakuBlocktop(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerDanmakuBlocktop(const PlayerDanmakuBlocktop& from);
  PlayerDanmakuBlocktop(PlayerDanmakuBlocktop&& from) noexcept
    : PlayerDanmakuBlocktop() {
    *this = ::std::move(from);
  }

  inline PlayerDanmakuBlocktop& operator=(const PlayerDanmakuBlocktop& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerDanmakuBlocktop& operator=(PlayerDanmakuBlocktop&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerDanmakuBlocktop& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerDanmakuBlocktop* internal_default_instance() {
    return reinterpret_cast<const PlayerDanmakuBlocktop*>(
               &_PlayerDanmakuBlocktop_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(PlayerDanmakuBlocktop& a, PlayerDanmakuBlocktop& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerDanmakuBlocktop* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerDanmakuBlocktop* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerDanmakuBlocktop* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerDanmakuBlocktop>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerDanmakuBlocktop& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlayerDanmakuBlocktop& from) {
    PlayerDanmakuBlocktop::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerDanmakuBlocktop* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bilibili.community.service.dm.v1.PlayerDanmakuBlocktop";
  }
  protected:
  explicit PlayerDanmakuBlocktop(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // bool value = 1;
  void clear_value();
  bool value() const;
  void set_value(bool value);
  private:
  bool _internal_value() const;
  void _internal_set_value(bool value);
  public:

  // @@protoc_insertion_point(class_scope:bilibili.community.service.dm.v1.PlayerDanmakuBlocktop)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_reply_2eproto;
};
// -------------------------------------------------------------------

class PlayerDanmakuBlockscroll final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bilibili.community.service.dm.v1.PlayerDanmakuBlockscroll) */ {
 public:
  inline PlayerDanmakuBlockscroll() : PlayerDanmakuBlockscroll(nullptr) {}
  ~PlayerDanmakuBlockscroll() override;
  explicit PROTOBUF_CONSTEXPR PlayerDanmakuBlockscroll(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerDanmakuBlockscroll(const PlayerDanmakuBlockscroll& from);
  PlayerDanmakuBlockscroll(PlayerDanmakuBlockscroll&& from) noexcept
    : PlayerDanmakuBlockscroll() {
    *this = ::std::move(from);
  }

  inline PlayerDanmakuBlockscroll& operator=(const PlayerDanmakuBlockscroll& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerDanmakuBlockscroll& operator=(PlayerDanmakuBlockscroll&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerDanmakuBlockscroll& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerDanmakuBlockscroll* internal_default_instance() {
    return reinterpret_cast<const PlayerDanmakuBlockscroll*>(
               &_PlayerDanmakuBlockscroll_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(PlayerDanmakuBlockscroll& a, PlayerDanmakuBlockscroll& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerDanmakuBlockscroll* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerDanmakuBlockscroll* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerDanmakuBlockscroll* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerDanmakuBlockscroll>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerDanmakuBlockscroll& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlayerDanmakuBlockscroll& from) {
    PlayerDanmakuBlockscroll::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerDanmakuBlockscroll* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bilibili.community.service.dm.v1.PlayerDanmakuBlockscroll";
  }
  protected:
  explicit PlayerDanmakuBlockscroll(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // bool value = 1;
  void clear_value();
  bool value() const;
  void set_value(bool value);
  private:
  bool _internal_value() const;
  void _internal_set_value(bool value);
  public:

  // @@protoc_insertion_point(class_scope:bilibili.community.service.dm.v1.PlayerDanmakuBlockscroll)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_reply_2eproto;
};
// -------------------------------------------------------------------

class PlayerDanmakuBlockbottom final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bilibili.community.service.dm.v1.PlayerDanmakuBlockbottom) */ {
 public:
  inline PlayerDanmakuBlockbottom() : PlayerDanmakuBlockbottom(nullptr) {}
  ~PlayerDanmakuBlockbottom() override;
  explicit PROTOBUF_CONSTEXPR PlayerDanmakuBlockbottom(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerDanmakuBlockbottom(const PlayerDanmakuBlockbottom& from);
  PlayerDanmakuBlockbottom(PlayerDanmakuBlockbottom&& from) noexcept
    : PlayerDanmakuBlockbottom() {
    *this = ::std::move(from);
  }

  inline PlayerDanmakuBlockbottom& operator=(const PlayerDanmakuBlockbottom& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerDanmakuBlockbottom& operator=(PlayerDanmakuBlockbottom&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerDanmakuBlockbottom& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerDanmakuBlockbottom* internal_default_instance() {
    return reinterpret_cast<const PlayerDanmakuBlockbottom*>(
               &_PlayerDanmakuBlockbottom_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(PlayerDanmakuBlockbottom& a, PlayerDanmakuBlockbottom& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerDanmakuBlockbottom* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerDanmakuBlockbottom* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerDanmakuBlockbottom* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerDanmakuBlockbottom>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerDanmakuBlockbottom& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlayerDanmakuBlockbottom& from) {
    PlayerDanmakuBlockbottom::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerDanmakuBlockbottom* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bilibili.community.service.dm.v1.PlayerDanmakuBlockbottom";
  }
  protected:
  explicit PlayerDanmakuBlockbottom(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // bool value = 1;
  void clear_value();
  bool value() const;
  void set_value(bool value);
  private:
  bool _internal_value() const;
  void _internal_set_value(bool value);
  public:

  // @@protoc_insertion_point(class_scope:bilibili.community.service.dm.v1.PlayerDanmakuBlockbottom)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_reply_2eproto;
};
// -------------------------------------------------------------------

class PlayerDanmakuBlockcolorful final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bilibili.community.service.dm.v1.PlayerDanmakuBlockcolorful) */ {
 public:
  inline PlayerDanmakuBlockcolorful() : PlayerDanmakuBlockcolorful(nullptr) {}
  ~PlayerDanmakuBlockcolorful() override;
  explicit PROTOBUF_CONSTEXPR PlayerDanmakuBlockcolorful(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerDanmakuBlockcolorful(const PlayerDanmakuBlockcolorful& from);
  PlayerDanmakuBlockcolorful(PlayerDanmakuBlockcolorful&& from) noexcept
    : PlayerDanmakuBlockcolorful() {
    *this = ::std::move(from);
  }

  inline PlayerDanmakuBlockcolorful& operator=(const PlayerDanmakuBlockcolorful& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerDanmakuBlockcolorful& operator=(PlayerDanmakuBlockcolorful&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerDanmakuBlockcolorful& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerDanmakuBlockcolorful* internal_default_instance() {
    return reinterpret_cast<const PlayerDanmakuBlockcolorful*>(
               &_PlayerDanmakuBlockcolorful_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(PlayerDanmakuBlockcolorful& a, PlayerDanmakuBlockcolorful& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerDanmakuBlockcolorful* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerDanmakuBlockcolorful* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerDanmakuBlockcolorful* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerDanmakuBlockcolorful>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerDanmakuBlockcolorful& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlayerDanmakuBlockcolorful& from) {
    PlayerDanmakuBlockcolorful::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerDanmakuBlockcolorful* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bilibili.community.service.dm.v1.PlayerDanmakuBlockcolorful";
  }
  protected:
  explicit PlayerDanmakuBlockcolorful(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // bool value = 1;
  void clear_value();
  bool value() const;
  void set_value(bool value);
  private:
  bool _internal_value() const;
  void _internal_set_value(bool value);
  public:

  // @@protoc_insertion_point(class_scope:bilibili.community.service.dm.v1.PlayerDanmakuBlockcolorful)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_reply_2eproto;
};
// -------------------------------------------------------------------

class PlayerDanmakuBlockrepeat final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bilibili.community.service.dm.v1.PlayerDanmakuBlockrepeat) */ {
 public:
  inline PlayerDanmakuBlockrepeat() : PlayerDanmakuBlockrepeat(nullptr) {}
  ~PlayerDanmakuBlockrepeat() override;
  explicit PROTOBUF_CONSTEXPR PlayerDanmakuBlockrepeat(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerDanmakuBlockrepeat(const PlayerDanmakuBlockrepeat& from);
  PlayerDanmakuBlockrepeat(PlayerDanmakuBlockrepeat&& from) noexcept
    : PlayerDanmakuBlockrepeat() {
    *this = ::std::move(from);
  }

  inline PlayerDanmakuBlockrepeat& operator=(const PlayerDanmakuBlockrepeat& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerDanmakuBlockrepeat& operator=(PlayerDanmakuBlockrepeat&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerDanmakuBlockrepeat& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerDanmakuBlockrepeat* internal_default_instance() {
    return reinterpret_cast<const PlayerDanmakuBlockrepeat*>(
               &_PlayerDanmakuBlockrepeat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(PlayerDanmakuBlockrepeat& a, PlayerDanmakuBlockrepeat& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerDanmakuBlockrepeat* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerDanmakuBlockrepeat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerDanmakuBlockrepeat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerDanmakuBlockrepeat>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerDanmakuBlockrepeat& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlayerDanmakuBlockrepeat& from) {
    PlayerDanmakuBlockrepeat::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerDanmakuBlockrepeat* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bilibili.community.service.dm.v1.PlayerDanmakuBlockrepeat";
  }
  protected:
  explicit PlayerDanmakuBlockrepeat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // bool value = 1;
  void clear_value();
  bool value() const;
  void set_value(bool value);
  private:
  bool _internal_value() const;
  void _internal_set_value(bool value);
  public:

  // @@protoc_insertion_point(class_scope:bilibili.community.service.dm.v1.PlayerDanmakuBlockrepeat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_reply_2eproto;
};
// -------------------------------------------------------------------

class PlayerDanmakuBlockspecial final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bilibili.community.service.dm.v1.PlayerDanmakuBlockspecial) */ {
 public:
  inline PlayerDanmakuBlockspecial() : PlayerDanmakuBlockspecial(nullptr) {}
  ~PlayerDanmakuBlockspecial() override;
  explicit PROTOBUF_CONSTEXPR PlayerDanmakuBlockspecial(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerDanmakuBlockspecial(const PlayerDanmakuBlockspecial& from);
  PlayerDanmakuBlockspecial(PlayerDanmakuBlockspecial&& from) noexcept
    : PlayerDanmakuBlockspecial() {
    *this = ::std::move(from);
  }

  inline PlayerDanmakuBlockspecial& operator=(const PlayerDanmakuBlockspecial& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerDanmakuBlockspecial& operator=(PlayerDanmakuBlockspecial&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerDanmakuBlockspecial& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerDanmakuBlockspecial* internal_default_instance() {
    return reinterpret_cast<const PlayerDanmakuBlockspecial*>(
               &_PlayerDanmakuBlockspecial_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(PlayerDanmakuBlockspecial& a, PlayerDanmakuBlockspecial& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerDanmakuBlockspecial* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerDanmakuBlockspecial* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerDanmakuBlockspecial* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerDanmakuBlockspecial>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerDanmakuBlockspecial& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlayerDanmakuBlockspecial& from) {
    PlayerDanmakuBlockspecial::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerDanmakuBlockspecial* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bilibili.community.service.dm.v1.PlayerDanmakuBlockspecial";
  }
  protected:
  explicit PlayerDanmakuBlockspecial(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // bool value = 1;
  void clear_value();
  bool value() const;
  void set_value(bool value);
  private:
  bool _internal_value() const;
  void _internal_set_value(bool value);
  public:

  // @@protoc_insertion_point(class_scope:bilibili.community.service.dm.v1.PlayerDanmakuBlockspecial)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_reply_2eproto;
};
// -------------------------------------------------------------------

class PlayerDanmakuOpacity final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bilibili.community.service.dm.v1.PlayerDanmakuOpacity) */ {
 public:
  inline PlayerDanmakuOpacity() : PlayerDanmakuOpacity(nullptr) {}
  ~PlayerDanmakuOpacity() override;
  explicit PROTOBUF_CONSTEXPR PlayerDanmakuOpacity(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerDanmakuOpacity(const PlayerDanmakuOpacity& from);
  PlayerDanmakuOpacity(PlayerDanmakuOpacity&& from) noexcept
    : PlayerDanmakuOpacity() {
    *this = ::std::move(from);
  }

  inline PlayerDanmakuOpacity& operator=(const PlayerDanmakuOpacity& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerDanmakuOpacity& operator=(PlayerDanmakuOpacity&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerDanmakuOpacity& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerDanmakuOpacity* internal_default_instance() {
    return reinterpret_cast<const PlayerDanmakuOpacity*>(
               &_PlayerDanmakuOpacity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(PlayerDanmakuOpacity& a, PlayerDanmakuOpacity& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerDanmakuOpacity* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerDanmakuOpacity* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerDanmakuOpacity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerDanmakuOpacity>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerDanmakuOpacity& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlayerDanmakuOpacity& from) {
    PlayerDanmakuOpacity::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerDanmakuOpacity* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bilibili.community.service.dm.v1.PlayerDanmakuOpacity";
  }
  protected:
  explicit PlayerDanmakuOpacity(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // float value = 1;
  void clear_value();
  float value() const;
  void set_value(float value);
  private:
  float _internal_value() const;
  void _internal_set_value(float value);
  public:

  // @@protoc_insertion_point(class_scope:bilibili.community.service.dm.v1.PlayerDanmakuOpacity)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_reply_2eproto;
};
// -------------------------------------------------------------------

class PlayerDanmakuScalingfactor final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bilibili.community.service.dm.v1.PlayerDanmakuScalingfactor) */ {
 public:
  inline PlayerDanmakuScalingfactor() : PlayerDanmakuScalingfactor(nullptr) {}
  ~PlayerDanmakuScalingfactor() override;
  explicit PROTOBUF_CONSTEXPR PlayerDanmakuScalingfactor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerDanmakuScalingfactor(const PlayerDanmakuScalingfactor& from);
  PlayerDanmakuScalingfactor(PlayerDanmakuScalingfactor&& from) noexcept
    : PlayerDanmakuScalingfactor() {
    *this = ::std::move(from);
  }

  inline PlayerDanmakuScalingfactor& operator=(const PlayerDanmakuScalingfactor& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerDanmakuScalingfactor& operator=(PlayerDanmakuScalingfactor&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerDanmakuScalingfactor& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerDanmakuScalingfactor* internal_default_instance() {
    return reinterpret_cast<const PlayerDanmakuScalingfactor*>(
               &_PlayerDanmakuScalingfactor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(PlayerDanmakuScalingfactor& a, PlayerDanmakuScalingfactor& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerDanmakuScalingfactor* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerDanmakuScalingfactor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerDanmakuScalingfactor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerDanmakuScalingfactor>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerDanmakuScalingfactor& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlayerDanmakuScalingfactor& from) {
    PlayerDanmakuScalingfactor::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerDanmakuScalingfactor* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bilibili.community.service.dm.v1.PlayerDanmakuScalingfactor";
  }
  protected:
  explicit PlayerDanmakuScalingfactor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // float value = 1;
  void clear_value();
  float value() const;
  void set_value(float value);
  private:
  float _internal_value() const;
  void _internal_set_value(float value);
  public:

  // @@protoc_insertion_point(class_scope:bilibili.community.service.dm.v1.PlayerDanmakuScalingfactor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_reply_2eproto;
};
// -------------------------------------------------------------------

class PlayerDanmakuDomain final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bilibili.community.service.dm.v1.PlayerDanmakuDomain) */ {
 public:
  inline PlayerDanmakuDomain() : PlayerDanmakuDomain(nullptr) {}
  ~PlayerDanmakuDomain() override;
  explicit PROTOBUF_CONSTEXPR PlayerDanmakuDomain(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerDanmakuDomain(const PlayerDanmakuDomain& from);
  PlayerDanmakuDomain(PlayerDanmakuDomain&& from) noexcept
    : PlayerDanmakuDomain() {
    *this = ::std::move(from);
  }

  inline PlayerDanmakuDomain& operator=(const PlayerDanmakuDomain& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerDanmakuDomain& operator=(PlayerDanmakuDomain&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerDanmakuDomain& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerDanmakuDomain* internal_default_instance() {
    return reinterpret_cast<const PlayerDanmakuDomain*>(
               &_PlayerDanmakuDomain_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(PlayerDanmakuDomain& a, PlayerDanmakuDomain& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerDanmakuDomain* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerDanmakuDomain* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerDanmakuDomain* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerDanmakuDomain>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerDanmakuDomain& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlayerDanmakuDomain& from) {
    PlayerDanmakuDomain::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerDanmakuDomain* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bilibili.community.service.dm.v1.PlayerDanmakuDomain";
  }
  protected:
  explicit PlayerDanmakuDomain(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // float value = 1;
  void clear_value();
  float value() const;
  void set_value(float value);
  private:
  float _internal_value() const;
  void _internal_set_value(float value);
  public:

  // @@protoc_insertion_point(class_scope:bilibili.community.service.dm.v1.PlayerDanmakuDomain)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_reply_2eproto;
};
// -------------------------------------------------------------------

class PlayerDanmakuSpeed final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bilibili.community.service.dm.v1.PlayerDanmakuSpeed) */ {
 public:
  inline PlayerDanmakuSpeed() : PlayerDanmakuSpeed(nullptr) {}
  ~PlayerDanmakuSpeed() override;
  explicit PROTOBUF_CONSTEXPR PlayerDanmakuSpeed(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerDanmakuSpeed(const PlayerDanmakuSpeed& from);
  PlayerDanmakuSpeed(PlayerDanmakuSpeed&& from) noexcept
    : PlayerDanmakuSpeed() {
    *this = ::std::move(from);
  }

  inline PlayerDanmakuSpeed& operator=(const PlayerDanmakuSpeed& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerDanmakuSpeed& operator=(PlayerDanmakuSpeed&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerDanmakuSpeed& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerDanmakuSpeed* internal_default_instance() {
    return reinterpret_cast<const PlayerDanmakuSpeed*>(
               &_PlayerDanmakuSpeed_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(PlayerDanmakuSpeed& a, PlayerDanmakuSpeed& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerDanmakuSpeed* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerDanmakuSpeed* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerDanmakuSpeed* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerDanmakuSpeed>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerDanmakuSpeed& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlayerDanmakuSpeed& from) {
    PlayerDanmakuSpeed::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerDanmakuSpeed* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bilibili.community.service.dm.v1.PlayerDanmakuSpeed";
  }
  protected:
  explicit PlayerDanmakuSpeed(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // int32 value = 1;
  void clear_value();
  int32_t value() const;
  void set_value(int32_t value);
  private:
  int32_t _internal_value() const;
  void _internal_set_value(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:bilibili.community.service.dm.v1.PlayerDanmakuSpeed)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_reply_2eproto;
};
// -------------------------------------------------------------------

class PlayerDanmakuEnableblocklist final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bilibili.community.service.dm.v1.PlayerDanmakuEnableblocklist) */ {
 public:
  inline PlayerDanmakuEnableblocklist() : PlayerDanmakuEnableblocklist(nullptr) {}
  ~PlayerDanmakuEnableblocklist() override;
  explicit PROTOBUF_CONSTEXPR PlayerDanmakuEnableblocklist(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerDanmakuEnableblocklist(const PlayerDanmakuEnableblocklist& from);
  PlayerDanmakuEnableblocklist(PlayerDanmakuEnableblocklist&& from) noexcept
    : PlayerDanmakuEnableblocklist() {
    *this = ::std::move(from);
  }

  inline PlayerDanmakuEnableblocklist& operator=(const PlayerDanmakuEnableblocklist& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerDanmakuEnableblocklist& operator=(PlayerDanmakuEnableblocklist&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerDanmakuEnableblocklist& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerDanmakuEnableblocklist* internal_default_instance() {
    return reinterpret_cast<const PlayerDanmakuEnableblocklist*>(
               &_PlayerDanmakuEnableblocklist_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(PlayerDanmakuEnableblocklist& a, PlayerDanmakuEnableblocklist& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerDanmakuEnableblocklist* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerDanmakuEnableblocklist* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerDanmakuEnableblocklist* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerDanmakuEnableblocklist>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerDanmakuEnableblocklist& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlayerDanmakuEnableblocklist& from) {
    PlayerDanmakuEnableblocklist::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerDanmakuEnableblocklist* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bilibili.community.service.dm.v1.PlayerDanmakuEnableblocklist";
  }
  protected:
  explicit PlayerDanmakuEnableblocklist(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // bool value = 1;
  void clear_value();
  bool value() const;
  void set_value(bool value);
  private:
  bool _internal_value() const;
  void _internal_set_value(bool value);
  public:

  // @@protoc_insertion_point(class_scope:bilibili.community.service.dm.v1.PlayerDanmakuEnableblocklist)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_reply_2eproto;
};
// -------------------------------------------------------------------

class InlinePlayerDanmakuSwitch final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bilibili.community.service.dm.v1.InlinePlayerDanmakuSwitch) */ {
 public:
  inline InlinePlayerDanmakuSwitch() : InlinePlayerDanmakuSwitch(nullptr) {}
  ~InlinePlayerDanmakuSwitch() override;
  explicit PROTOBUF_CONSTEXPR InlinePlayerDanmakuSwitch(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InlinePlayerDanmakuSwitch(const InlinePlayerDanmakuSwitch& from);
  InlinePlayerDanmakuSwitch(InlinePlayerDanmakuSwitch&& from) noexcept
    : InlinePlayerDanmakuSwitch() {
    *this = ::std::move(from);
  }

  inline InlinePlayerDanmakuSwitch& operator=(const InlinePlayerDanmakuSwitch& from) {
    CopyFrom(from);
    return *this;
  }
  inline InlinePlayerDanmakuSwitch& operator=(InlinePlayerDanmakuSwitch&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InlinePlayerDanmakuSwitch& default_instance() {
    return *internal_default_instance();
  }
  static inline const InlinePlayerDanmakuSwitch* internal_default_instance() {
    return reinterpret_cast<const InlinePlayerDanmakuSwitch*>(
               &_InlinePlayerDanmakuSwitch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(InlinePlayerDanmakuSwitch& a, InlinePlayerDanmakuSwitch& b) {
    a.Swap(&b);
  }
  inline void Swap(InlinePlayerDanmakuSwitch* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InlinePlayerDanmakuSwitch* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InlinePlayerDanmakuSwitch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InlinePlayerDanmakuSwitch>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InlinePlayerDanmakuSwitch& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const InlinePlayerDanmakuSwitch& from) {
    InlinePlayerDanmakuSwitch::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InlinePlayerDanmakuSwitch* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bilibili.community.service.dm.v1.InlinePlayerDanmakuSwitch";
  }
  protected:
  explicit InlinePlayerDanmakuSwitch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // bool value = 1;
  void clear_value();
  bool value() const;
  void set_value(bool value);
  private:
  bool _internal_value() const;
  void _internal_set_value(bool value);
  public:

  // @@protoc_insertion_point(class_scope:bilibili.community.service.dm.v1.InlinePlayerDanmakuSwitch)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_reply_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DmSegSDKReq

// int64 pid = 1;
inline void DmSegSDKReq::clear_pid() {
  _impl_.pid_ = int64_t{0};
}
inline int64_t DmSegSDKReq::_internal_pid() const {
  return _impl_.pid_;
}
inline int64_t DmSegSDKReq::pid() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DmSegSDKReq.pid)
  return _internal_pid();
}
inline void DmSegSDKReq::_internal_set_pid(int64_t value) {
  
  _impl_.pid_ = value;
}
inline void DmSegSDKReq::set_pid(int64_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.DmSegSDKReq.pid)
}

// int64 oid = 2;
inline void DmSegSDKReq::clear_oid() {
  _impl_.oid_ = int64_t{0};
}
inline int64_t DmSegSDKReq::_internal_oid() const {
  return _impl_.oid_;
}
inline int64_t DmSegSDKReq::oid() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DmSegSDKReq.oid)
  return _internal_oid();
}
inline void DmSegSDKReq::_internal_set_oid(int64_t value) {
  
  _impl_.oid_ = value;
}
inline void DmSegSDKReq::set_oid(int64_t value) {
  _internal_set_oid(value);
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.DmSegSDKReq.oid)
}

// int32 type = 3;
inline void DmSegSDKReq::clear_type() {
  _impl_.type_ = 0;
}
inline int32_t DmSegSDKReq::_internal_type() const {
  return _impl_.type_;
}
inline int32_t DmSegSDKReq::type() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DmSegSDKReq.type)
  return _internal_type();
}
inline void DmSegSDKReq::_internal_set_type(int32_t value) {
  
  _impl_.type_ = value;
}
inline void DmSegSDKReq::set_type(int32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.DmSegSDKReq.type)
}

// int64 segment_index = 4;
inline void DmSegSDKReq::clear_segment_index() {
  _impl_.segment_index_ = int64_t{0};
}
inline int64_t DmSegSDKReq::_internal_segment_index() const {
  return _impl_.segment_index_;
}
inline int64_t DmSegSDKReq::segment_index() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DmSegSDKReq.segment_index)
  return _internal_segment_index();
}
inline void DmSegSDKReq::_internal_set_segment_index(int64_t value) {
  
  _impl_.segment_index_ = value;
}
inline void DmSegSDKReq::set_segment_index(int64_t value) {
  _internal_set_segment_index(value);
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.DmSegSDKReq.segment_index)
}

// -------------------------------------------------------------------

// DmSegSDKReply

// bool closed = 1;
inline void DmSegSDKReply::clear_closed() {
  _impl_.closed_ = false;
}
inline bool DmSegSDKReply::_internal_closed() const {
  return _impl_.closed_;
}
inline bool DmSegSDKReply::closed() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DmSegSDKReply.closed)
  return _internal_closed();
}
inline void DmSegSDKReply::_internal_set_closed(bool value) {
  
  _impl_.closed_ = value;
}
inline void DmSegSDKReply::set_closed(bool value) {
  _internal_set_closed(value);
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.DmSegSDKReply.closed)
}

// repeated .bilibili.community.service.dm.v1.DanmakuElem elems = 2;
inline int DmSegSDKReply::_internal_elems_size() const {
  return _impl_.elems_.size();
}
inline int DmSegSDKReply::elems_size() const {
  return _internal_elems_size();
}
inline void DmSegSDKReply::clear_elems() {
  _impl_.elems_.Clear();
}
inline ::bilibili::community::service::dm::v1::DanmakuElem* DmSegSDKReply::mutable_elems(int index) {
  // @@protoc_insertion_point(field_mutable:bilibili.community.service.dm.v1.DmSegSDKReply.elems)
  return _impl_.elems_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bilibili::community::service::dm::v1::DanmakuElem >*
DmSegSDKReply::mutable_elems() {
  // @@protoc_insertion_point(field_mutable_list:bilibili.community.service.dm.v1.DmSegSDKReply.elems)
  return &_impl_.elems_;
}
inline const ::bilibili::community::service::dm::v1::DanmakuElem& DmSegSDKReply::_internal_elems(int index) const {
  return _impl_.elems_.Get(index);
}
inline const ::bilibili::community::service::dm::v1::DanmakuElem& DmSegSDKReply::elems(int index) const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DmSegSDKReply.elems)
  return _internal_elems(index);
}
inline ::bilibili::community::service::dm::v1::DanmakuElem* DmSegSDKReply::_internal_add_elems() {
  return _impl_.elems_.Add();
}
inline ::bilibili::community::service::dm::v1::DanmakuElem* DmSegSDKReply::add_elems() {
  ::bilibili::community::service::dm::v1::DanmakuElem* _add = _internal_add_elems();
  // @@protoc_insertion_point(field_add:bilibili.community.service.dm.v1.DmSegSDKReply.elems)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bilibili::community::service::dm::v1::DanmakuElem >&
DmSegSDKReply::elems() const {
  // @@protoc_insertion_point(field_list:bilibili.community.service.dm.v1.DmSegSDKReply.elems)
  return _impl_.elems_;
}

// -------------------------------------------------------------------

// DmSegOttReq

// int64 pid = 1;
inline void DmSegOttReq::clear_pid() {
  _impl_.pid_ = int64_t{0};
}
inline int64_t DmSegOttReq::_internal_pid() const {
  return _impl_.pid_;
}
inline int64_t DmSegOttReq::pid() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DmSegOttReq.pid)
  return _internal_pid();
}
inline void DmSegOttReq::_internal_set_pid(int64_t value) {
  
  _impl_.pid_ = value;
}
inline void DmSegOttReq::set_pid(int64_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.DmSegOttReq.pid)
}

// int64 oid = 2;
inline void DmSegOttReq::clear_oid() {
  _impl_.oid_ = int64_t{0};
}
inline int64_t DmSegOttReq::_internal_oid() const {
  return _impl_.oid_;
}
inline int64_t DmSegOttReq::oid() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DmSegOttReq.oid)
  return _internal_oid();
}
inline void DmSegOttReq::_internal_set_oid(int64_t value) {
  
  _impl_.oid_ = value;
}
inline void DmSegOttReq::set_oid(int64_t value) {
  _internal_set_oid(value);
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.DmSegOttReq.oid)
}

// int32 type = 3;
inline void DmSegOttReq::clear_type() {
  _impl_.type_ = 0;
}
inline int32_t DmSegOttReq::_internal_type() const {
  return _impl_.type_;
}
inline int32_t DmSegOttReq::type() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DmSegOttReq.type)
  return _internal_type();
}
inline void DmSegOttReq::_internal_set_type(int32_t value) {
  
  _impl_.type_ = value;
}
inline void DmSegOttReq::set_type(int32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.DmSegOttReq.type)
}

// int64 segment_index = 4;
inline void DmSegOttReq::clear_segment_index() {
  _impl_.segment_index_ = int64_t{0};
}
inline int64_t DmSegOttReq::_internal_segment_index() const {
  return _impl_.segment_index_;
}
inline int64_t DmSegOttReq::segment_index() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DmSegOttReq.segment_index)
  return _internal_segment_index();
}
inline void DmSegOttReq::_internal_set_segment_index(int64_t value) {
  
  _impl_.segment_index_ = value;
}
inline void DmSegOttReq::set_segment_index(int64_t value) {
  _internal_set_segment_index(value);
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.DmSegOttReq.segment_index)
}

// -------------------------------------------------------------------

// DmSegOttReply

// bool closed = 1;
inline void DmSegOttReply::clear_closed() {
  _impl_.closed_ = false;
}
inline bool DmSegOttReply::_internal_closed() const {
  return _impl_.closed_;
}
inline bool DmSegOttReply::closed() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DmSegOttReply.closed)
  return _internal_closed();
}
inline void DmSegOttReply::_internal_set_closed(bool value) {
  
  _impl_.closed_ = value;
}
inline void DmSegOttReply::set_closed(bool value) {
  _internal_set_closed(value);
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.DmSegOttReply.closed)
}

// repeated .bilibili.community.service.dm.v1.DanmakuElem elems = 2;
inline int DmSegOttReply::_internal_elems_size() const {
  return _impl_.elems_.size();
}
inline int DmSegOttReply::elems_size() const {
  return _internal_elems_size();
}
inline void DmSegOttReply::clear_elems() {
  _impl_.elems_.Clear();
}
inline ::bilibili::community::service::dm::v1::DanmakuElem* DmSegOttReply::mutable_elems(int index) {
  // @@protoc_insertion_point(field_mutable:bilibili.community.service.dm.v1.DmSegOttReply.elems)
  return _impl_.elems_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bilibili::community::service::dm::v1::DanmakuElem >*
DmSegOttReply::mutable_elems() {
  // @@protoc_insertion_point(field_mutable_list:bilibili.community.service.dm.v1.DmSegOttReply.elems)
  return &_impl_.elems_;
}
inline const ::bilibili::community::service::dm::v1::DanmakuElem& DmSegOttReply::_internal_elems(int index) const {
  return _impl_.elems_.Get(index);
}
inline const ::bilibili::community::service::dm::v1::DanmakuElem& DmSegOttReply::elems(int index) const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DmSegOttReply.elems)
  return _internal_elems(index);
}
inline ::bilibili::community::service::dm::v1::DanmakuElem* DmSegOttReply::_internal_add_elems() {
  return _impl_.elems_.Add();
}
inline ::bilibili::community::service::dm::v1::DanmakuElem* DmSegOttReply::add_elems() {
  ::bilibili::community::service::dm::v1::DanmakuElem* _add = _internal_add_elems();
  // @@protoc_insertion_point(field_add:bilibili.community.service.dm.v1.DmSegOttReply.elems)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bilibili::community::service::dm::v1::DanmakuElem >&
DmSegOttReply::elems() const {
  // @@protoc_insertion_point(field_list:bilibili.community.service.dm.v1.DmSegOttReply.elems)
  return _impl_.elems_;
}

// -------------------------------------------------------------------

// DmSegMobileReq

// int64 pid = 1;
inline void DmSegMobileReq::clear_pid() {
  _impl_.pid_ = int64_t{0};
}
inline int64_t DmSegMobileReq::_internal_pid() const {
  return _impl_.pid_;
}
inline int64_t DmSegMobileReq::pid() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DmSegMobileReq.pid)
  return _internal_pid();
}
inline void DmSegMobileReq::_internal_set_pid(int64_t value) {
  
  _impl_.pid_ = value;
}
inline void DmSegMobileReq::set_pid(int64_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.DmSegMobileReq.pid)
}

// int64 oid = 2;
inline void DmSegMobileReq::clear_oid() {
  _impl_.oid_ = int64_t{0};
}
inline int64_t DmSegMobileReq::_internal_oid() const {
  return _impl_.oid_;
}
inline int64_t DmSegMobileReq::oid() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DmSegMobileReq.oid)
  return _internal_oid();
}
inline void DmSegMobileReq::_internal_set_oid(int64_t value) {
  
  _impl_.oid_ = value;
}
inline void DmSegMobileReq::set_oid(int64_t value) {
  _internal_set_oid(value);
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.DmSegMobileReq.oid)
}

// int32 type = 3;
inline void DmSegMobileReq::clear_type() {
  _impl_.type_ = 0;
}
inline int32_t DmSegMobileReq::_internal_type() const {
  return _impl_.type_;
}
inline int32_t DmSegMobileReq::type() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DmSegMobileReq.type)
  return _internal_type();
}
inline void DmSegMobileReq::_internal_set_type(int32_t value) {
  
  _impl_.type_ = value;
}
inline void DmSegMobileReq::set_type(int32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.DmSegMobileReq.type)
}

// int64 segment_index = 4;
inline void DmSegMobileReq::clear_segment_index() {
  _impl_.segment_index_ = int64_t{0};
}
inline int64_t DmSegMobileReq::_internal_segment_index() const {
  return _impl_.segment_index_;
}
inline int64_t DmSegMobileReq::segment_index() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DmSegMobileReq.segment_index)
  return _internal_segment_index();
}
inline void DmSegMobileReq::_internal_set_segment_index(int64_t value) {
  
  _impl_.segment_index_ = value;
}
inline void DmSegMobileReq::set_segment_index(int64_t value) {
  _internal_set_segment_index(value);
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.DmSegMobileReq.segment_index)
}

// int32 teenagers_mode = 5;
inline void DmSegMobileReq::clear_teenagers_mode() {
  _impl_.teenagers_mode_ = 0;
}
inline int32_t DmSegMobileReq::_internal_teenagers_mode() const {
  return _impl_.teenagers_mode_;
}
inline int32_t DmSegMobileReq::teenagers_mode() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DmSegMobileReq.teenagers_mode)
  return _internal_teenagers_mode();
}
inline void DmSegMobileReq::_internal_set_teenagers_mode(int32_t value) {
  
  _impl_.teenagers_mode_ = value;
}
inline void DmSegMobileReq::set_teenagers_mode(int32_t value) {
  _internal_set_teenagers_mode(value);
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.DmSegMobileReq.teenagers_mode)
}

// -------------------------------------------------------------------

// DmSegMobileReply

// repeated .bilibili.community.service.dm.v1.DanmakuElem elems = 1;
inline int DmSegMobileReply::_internal_elems_size() const {
  return _impl_.elems_.size();
}
inline int DmSegMobileReply::elems_size() const {
  return _internal_elems_size();
}
inline void DmSegMobileReply::clear_elems() {
  _impl_.elems_.Clear();
}
inline ::bilibili::community::service::dm::v1::DanmakuElem* DmSegMobileReply::mutable_elems(int index) {
  // @@protoc_insertion_point(field_mutable:bilibili.community.service.dm.v1.DmSegMobileReply.elems)
  return _impl_.elems_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bilibili::community::service::dm::v1::DanmakuElem >*
DmSegMobileReply::mutable_elems() {
  // @@protoc_insertion_point(field_mutable_list:bilibili.community.service.dm.v1.DmSegMobileReply.elems)
  return &_impl_.elems_;
}
inline const ::bilibili::community::service::dm::v1::DanmakuElem& DmSegMobileReply::_internal_elems(int index) const {
  return _impl_.elems_.Get(index);
}
inline const ::bilibili::community::service::dm::v1::DanmakuElem& DmSegMobileReply::elems(int index) const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DmSegMobileReply.elems)
  return _internal_elems(index);
}
inline ::bilibili::community::service::dm::v1::DanmakuElem* DmSegMobileReply::_internal_add_elems() {
  return _impl_.elems_.Add();
}
inline ::bilibili::community::service::dm::v1::DanmakuElem* DmSegMobileReply::add_elems() {
  ::bilibili::community::service::dm::v1::DanmakuElem* _add = _internal_add_elems();
  // @@protoc_insertion_point(field_add:bilibili.community.service.dm.v1.DmSegMobileReply.elems)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bilibili::community::service::dm::v1::DanmakuElem >&
DmSegMobileReply::elems() const {
  // @@protoc_insertion_point(field_list:bilibili.community.service.dm.v1.DmSegMobileReply.elems)
  return _impl_.elems_;
}

// int32 state = 2;
inline void DmSegMobileReply::clear_state() {
  _impl_.state_ = 0;
}
inline int32_t DmSegMobileReply::_internal_state() const {
  return _impl_.state_;
}
inline int32_t DmSegMobileReply::state() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DmSegMobileReply.state)
  return _internal_state();
}
inline void DmSegMobileReply::_internal_set_state(int32_t value) {
  
  _impl_.state_ = value;
}
inline void DmSegMobileReply::set_state(int32_t value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.DmSegMobileReply.state)
}

// .bilibili.community.service.dm.v1.DanmakuAIFlag ai_flag = 3;
inline bool DmSegMobileReply::_internal_has_ai_flag() const {
  return this != internal_default_instance() && _impl_.ai_flag_ != nullptr;
}
inline bool DmSegMobileReply::has_ai_flag() const {
  return _internal_has_ai_flag();
}
inline void DmSegMobileReply::clear_ai_flag() {
  if (GetArenaForAllocation() == nullptr && _impl_.ai_flag_ != nullptr) {
    delete _impl_.ai_flag_;
  }
  _impl_.ai_flag_ = nullptr;
}
inline const ::bilibili::community::service::dm::v1::DanmakuAIFlag& DmSegMobileReply::_internal_ai_flag() const {
  const ::bilibili::community::service::dm::v1::DanmakuAIFlag* p = _impl_.ai_flag_;
  return p != nullptr ? *p : reinterpret_cast<const ::bilibili::community::service::dm::v1::DanmakuAIFlag&>(
      ::bilibili::community::service::dm::v1::_DanmakuAIFlag_default_instance_);
}
inline const ::bilibili::community::service::dm::v1::DanmakuAIFlag& DmSegMobileReply::ai_flag() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DmSegMobileReply.ai_flag)
  return _internal_ai_flag();
}
inline void DmSegMobileReply::unsafe_arena_set_allocated_ai_flag(
    ::bilibili::community::service::dm::v1::DanmakuAIFlag* ai_flag) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ai_flag_);
  }
  _impl_.ai_flag_ = ai_flag;
  if (ai_flag) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bilibili.community.service.dm.v1.DmSegMobileReply.ai_flag)
}
inline ::bilibili::community::service::dm::v1::DanmakuAIFlag* DmSegMobileReply::release_ai_flag() {
  
  ::bilibili::community::service::dm::v1::DanmakuAIFlag* temp = _impl_.ai_flag_;
  _impl_.ai_flag_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bilibili::community::service::dm::v1::DanmakuAIFlag* DmSegMobileReply::unsafe_arena_release_ai_flag() {
  // @@protoc_insertion_point(field_release:bilibili.community.service.dm.v1.DmSegMobileReply.ai_flag)
  
  ::bilibili::community::service::dm::v1::DanmakuAIFlag* temp = _impl_.ai_flag_;
  _impl_.ai_flag_ = nullptr;
  return temp;
}
inline ::bilibili::community::service::dm::v1::DanmakuAIFlag* DmSegMobileReply::_internal_mutable_ai_flag() {
  
  if (_impl_.ai_flag_ == nullptr) {
    auto* p = CreateMaybeMessage<::bilibili::community::service::dm::v1::DanmakuAIFlag>(GetArenaForAllocation());
    _impl_.ai_flag_ = p;
  }
  return _impl_.ai_flag_;
}
inline ::bilibili::community::service::dm::v1::DanmakuAIFlag* DmSegMobileReply::mutable_ai_flag() {
  ::bilibili::community::service::dm::v1::DanmakuAIFlag* _msg = _internal_mutable_ai_flag();
  // @@protoc_insertion_point(field_mutable:bilibili.community.service.dm.v1.DmSegMobileReply.ai_flag)
  return _msg;
}
inline void DmSegMobileReply::set_allocated_ai_flag(::bilibili::community::service::dm::v1::DanmakuAIFlag* ai_flag) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.ai_flag_;
  }
  if (ai_flag) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(ai_flag);
    if (message_arena != submessage_arena) {
      ai_flag = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ai_flag, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.ai_flag_ = ai_flag;
  // @@protoc_insertion_point(field_set_allocated:bilibili.community.service.dm.v1.DmSegMobileReply.ai_flag)
}

// -------------------------------------------------------------------

// DmViewReq

// int64 pid = 1;
inline void DmViewReq::clear_pid() {
  _impl_.pid_ = int64_t{0};
}
inline int64_t DmViewReq::_internal_pid() const {
  return _impl_.pid_;
}
inline int64_t DmViewReq::pid() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DmViewReq.pid)
  return _internal_pid();
}
inline void DmViewReq::_internal_set_pid(int64_t value) {
  
  _impl_.pid_ = value;
}
inline void DmViewReq::set_pid(int64_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.DmViewReq.pid)
}

// int64 oid = 2;
inline void DmViewReq::clear_oid() {
  _impl_.oid_ = int64_t{0};
}
inline int64_t DmViewReq::_internal_oid() const {
  return _impl_.oid_;
}
inline int64_t DmViewReq::oid() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DmViewReq.oid)
  return _internal_oid();
}
inline void DmViewReq::_internal_set_oid(int64_t value) {
  
  _impl_.oid_ = value;
}
inline void DmViewReq::set_oid(int64_t value) {
  _internal_set_oid(value);
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.DmViewReq.oid)
}

// int32 type = 3;
inline void DmViewReq::clear_type() {
  _impl_.type_ = 0;
}
inline int32_t DmViewReq::_internal_type() const {
  return _impl_.type_;
}
inline int32_t DmViewReq::type() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DmViewReq.type)
  return _internal_type();
}
inline void DmViewReq::_internal_set_type(int32_t value) {
  
  _impl_.type_ = value;
}
inline void DmViewReq::set_type(int32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.DmViewReq.type)
}

// string spmid = 4;
inline void DmViewReq::clear_spmid() {
  _impl_.spmid_.ClearToEmpty();
}
inline const std::string& DmViewReq::spmid() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DmViewReq.spmid)
  return _internal_spmid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DmViewReq::set_spmid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.spmid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.DmViewReq.spmid)
}
inline std::string* DmViewReq::mutable_spmid() {
  std::string* _s = _internal_mutable_spmid();
  // @@protoc_insertion_point(field_mutable:bilibili.community.service.dm.v1.DmViewReq.spmid)
  return _s;
}
inline const std::string& DmViewReq::_internal_spmid() const {
  return _impl_.spmid_.Get();
}
inline void DmViewReq::_internal_set_spmid(const std::string& value) {
  
  _impl_.spmid_.Set(value, GetArenaForAllocation());
}
inline std::string* DmViewReq::_internal_mutable_spmid() {
  
  return _impl_.spmid_.Mutable(GetArenaForAllocation());
}
inline std::string* DmViewReq::release_spmid() {
  // @@protoc_insertion_point(field_release:bilibili.community.service.dm.v1.DmViewReq.spmid)
  return _impl_.spmid_.Release();
}
inline void DmViewReq::set_allocated_spmid(std::string* spmid) {
  if (spmid != nullptr) {
    
  } else {
    
  }
  _impl_.spmid_.SetAllocated(spmid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.spmid_.IsDefault()) {
    _impl_.spmid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bilibili.community.service.dm.v1.DmViewReq.spmid)
}

// int32 is_hard_boot = 5;
inline void DmViewReq::clear_is_hard_boot() {
  _impl_.is_hard_boot_ = 0;
}
inline int32_t DmViewReq::_internal_is_hard_boot() const {
  return _impl_.is_hard_boot_;
}
inline int32_t DmViewReq::is_hard_boot() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DmViewReq.is_hard_boot)
  return _internal_is_hard_boot();
}
inline void DmViewReq::_internal_set_is_hard_boot(int32_t value) {
  
  _impl_.is_hard_boot_ = value;
}
inline void DmViewReq::set_is_hard_boot(int32_t value) {
  _internal_set_is_hard_boot(value);
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.DmViewReq.is_hard_boot)
}

// -------------------------------------------------------------------

// DmViewReply

// bool closed = 1;
inline void DmViewReply::clear_closed() {
  _impl_.closed_ = false;
}
inline bool DmViewReply::_internal_closed() const {
  return _impl_.closed_;
}
inline bool DmViewReply::closed() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DmViewReply.closed)
  return _internal_closed();
}
inline void DmViewReply::_internal_set_closed(bool value) {
  
  _impl_.closed_ = value;
}
inline void DmViewReply::set_closed(bool value) {
  _internal_set_closed(value);
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.DmViewReply.closed)
}

// .bilibili.community.service.dm.v1.VideoMask mask = 2;
inline bool DmViewReply::_internal_has_mask() const {
  return this != internal_default_instance() && _impl_.mask_ != nullptr;
}
inline bool DmViewReply::has_mask() const {
  return _internal_has_mask();
}
inline void DmViewReply::clear_mask() {
  if (GetArenaForAllocation() == nullptr && _impl_.mask_ != nullptr) {
    delete _impl_.mask_;
  }
  _impl_.mask_ = nullptr;
}
inline const ::bilibili::community::service::dm::v1::VideoMask& DmViewReply::_internal_mask() const {
  const ::bilibili::community::service::dm::v1::VideoMask* p = _impl_.mask_;
  return p != nullptr ? *p : reinterpret_cast<const ::bilibili::community::service::dm::v1::VideoMask&>(
      ::bilibili::community::service::dm::v1::_VideoMask_default_instance_);
}
inline const ::bilibili::community::service::dm::v1::VideoMask& DmViewReply::mask() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DmViewReply.mask)
  return _internal_mask();
}
inline void DmViewReply::unsafe_arena_set_allocated_mask(
    ::bilibili::community::service::dm::v1::VideoMask* mask) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mask_);
  }
  _impl_.mask_ = mask;
  if (mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bilibili.community.service.dm.v1.DmViewReply.mask)
}
inline ::bilibili::community::service::dm::v1::VideoMask* DmViewReply::release_mask() {
  
  ::bilibili::community::service::dm::v1::VideoMask* temp = _impl_.mask_;
  _impl_.mask_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bilibili::community::service::dm::v1::VideoMask* DmViewReply::unsafe_arena_release_mask() {
  // @@protoc_insertion_point(field_release:bilibili.community.service.dm.v1.DmViewReply.mask)
  
  ::bilibili::community::service::dm::v1::VideoMask* temp = _impl_.mask_;
  _impl_.mask_ = nullptr;
  return temp;
}
inline ::bilibili::community::service::dm::v1::VideoMask* DmViewReply::_internal_mutable_mask() {
  
  if (_impl_.mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::bilibili::community::service::dm::v1::VideoMask>(GetArenaForAllocation());
    _impl_.mask_ = p;
  }
  return _impl_.mask_;
}
inline ::bilibili::community::service::dm::v1::VideoMask* DmViewReply::mutable_mask() {
  ::bilibili::community::service::dm::v1::VideoMask* _msg = _internal_mutable_mask();
  // @@protoc_insertion_point(field_mutable:bilibili.community.service.dm.v1.DmViewReply.mask)
  return _msg;
}
inline void DmViewReply::set_allocated_mask(::bilibili::community::service::dm::v1::VideoMask* mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.mask_;
  }
  if (mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(mask);
    if (message_arena != submessage_arena) {
      mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mask, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.mask_ = mask;
  // @@protoc_insertion_point(field_set_allocated:bilibili.community.service.dm.v1.DmViewReply.mask)
}

// .bilibili.community.service.dm.v1.VideoSubtitle subtitle = 3;
inline bool DmViewReply::_internal_has_subtitle() const {
  return this != internal_default_instance() && _impl_.subtitle_ != nullptr;
}
inline bool DmViewReply::has_subtitle() const {
  return _internal_has_subtitle();
}
inline void DmViewReply::clear_subtitle() {
  if (GetArenaForAllocation() == nullptr && _impl_.subtitle_ != nullptr) {
    delete _impl_.subtitle_;
  }
  _impl_.subtitle_ = nullptr;
}
inline const ::bilibili::community::service::dm::v1::VideoSubtitle& DmViewReply::_internal_subtitle() const {
  const ::bilibili::community::service::dm::v1::VideoSubtitle* p = _impl_.subtitle_;
  return p != nullptr ? *p : reinterpret_cast<const ::bilibili::community::service::dm::v1::VideoSubtitle&>(
      ::bilibili::community::service::dm::v1::_VideoSubtitle_default_instance_);
}
inline const ::bilibili::community::service::dm::v1::VideoSubtitle& DmViewReply::subtitle() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DmViewReply.subtitle)
  return _internal_subtitle();
}
inline void DmViewReply::unsafe_arena_set_allocated_subtitle(
    ::bilibili::community::service::dm::v1::VideoSubtitle* subtitle) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.subtitle_);
  }
  _impl_.subtitle_ = subtitle;
  if (subtitle) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bilibili.community.service.dm.v1.DmViewReply.subtitle)
}
inline ::bilibili::community::service::dm::v1::VideoSubtitle* DmViewReply::release_subtitle() {
  
  ::bilibili::community::service::dm::v1::VideoSubtitle* temp = _impl_.subtitle_;
  _impl_.subtitle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bilibili::community::service::dm::v1::VideoSubtitle* DmViewReply::unsafe_arena_release_subtitle() {
  // @@protoc_insertion_point(field_release:bilibili.community.service.dm.v1.DmViewReply.subtitle)
  
  ::bilibili::community::service::dm::v1::VideoSubtitle* temp = _impl_.subtitle_;
  _impl_.subtitle_ = nullptr;
  return temp;
}
inline ::bilibili::community::service::dm::v1::VideoSubtitle* DmViewReply::_internal_mutable_subtitle() {
  
  if (_impl_.subtitle_ == nullptr) {
    auto* p = CreateMaybeMessage<::bilibili::community::service::dm::v1::VideoSubtitle>(GetArenaForAllocation());
    _impl_.subtitle_ = p;
  }
  return _impl_.subtitle_;
}
inline ::bilibili::community::service::dm::v1::VideoSubtitle* DmViewReply::mutable_subtitle() {
  ::bilibili::community::service::dm::v1::VideoSubtitle* _msg = _internal_mutable_subtitle();
  // @@protoc_insertion_point(field_mutable:bilibili.community.service.dm.v1.DmViewReply.subtitle)
  return _msg;
}
inline void DmViewReply::set_allocated_subtitle(::bilibili::community::service::dm::v1::VideoSubtitle* subtitle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.subtitle_;
  }
  if (subtitle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(subtitle);
    if (message_arena != submessage_arena) {
      subtitle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, subtitle, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.subtitle_ = subtitle;
  // @@protoc_insertion_point(field_set_allocated:bilibili.community.service.dm.v1.DmViewReply.subtitle)
}

// repeated string special_dms = 4;
inline int DmViewReply::_internal_special_dms_size() const {
  return _impl_.special_dms_.size();
}
inline int DmViewReply::special_dms_size() const {
  return _internal_special_dms_size();
}
inline void DmViewReply::clear_special_dms() {
  _impl_.special_dms_.Clear();
}
inline std::string* DmViewReply::add_special_dms() {
  std::string* _s = _internal_add_special_dms();
  // @@protoc_insertion_point(field_add_mutable:bilibili.community.service.dm.v1.DmViewReply.special_dms)
  return _s;
}
inline const std::string& DmViewReply::_internal_special_dms(int index) const {
  return _impl_.special_dms_.Get(index);
}
inline const std::string& DmViewReply::special_dms(int index) const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DmViewReply.special_dms)
  return _internal_special_dms(index);
}
inline std::string* DmViewReply::mutable_special_dms(int index) {
  // @@protoc_insertion_point(field_mutable:bilibili.community.service.dm.v1.DmViewReply.special_dms)
  return _impl_.special_dms_.Mutable(index);
}
inline void DmViewReply::set_special_dms(int index, const std::string& value) {
  _impl_.special_dms_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.DmViewReply.special_dms)
}
inline void DmViewReply::set_special_dms(int index, std::string&& value) {
  _impl_.special_dms_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.DmViewReply.special_dms)
}
inline void DmViewReply::set_special_dms(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.special_dms_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:bilibili.community.service.dm.v1.DmViewReply.special_dms)
}
inline void DmViewReply::set_special_dms(int index, const char* value, size_t size) {
  _impl_.special_dms_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:bilibili.community.service.dm.v1.DmViewReply.special_dms)
}
inline std::string* DmViewReply::_internal_add_special_dms() {
  return _impl_.special_dms_.Add();
}
inline void DmViewReply::add_special_dms(const std::string& value) {
  _impl_.special_dms_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:bilibili.community.service.dm.v1.DmViewReply.special_dms)
}
inline void DmViewReply::add_special_dms(std::string&& value) {
  _impl_.special_dms_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:bilibili.community.service.dm.v1.DmViewReply.special_dms)
}
inline void DmViewReply::add_special_dms(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.special_dms_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:bilibili.community.service.dm.v1.DmViewReply.special_dms)
}
inline void DmViewReply::add_special_dms(const char* value, size_t size) {
  _impl_.special_dms_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:bilibili.community.service.dm.v1.DmViewReply.special_dms)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DmViewReply::special_dms() const {
  // @@protoc_insertion_point(field_list:bilibili.community.service.dm.v1.DmViewReply.special_dms)
  return _impl_.special_dms_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DmViewReply::mutable_special_dms() {
  // @@protoc_insertion_point(field_mutable_list:bilibili.community.service.dm.v1.DmViewReply.special_dms)
  return &_impl_.special_dms_;
}

// .bilibili.community.service.dm.v1.DanmakuFlagConfig ai_flag = 5;
inline bool DmViewReply::_internal_has_ai_flag() const {
  return this != internal_default_instance() && _impl_.ai_flag_ != nullptr;
}
inline bool DmViewReply::has_ai_flag() const {
  return _internal_has_ai_flag();
}
inline void DmViewReply::clear_ai_flag() {
  if (GetArenaForAllocation() == nullptr && _impl_.ai_flag_ != nullptr) {
    delete _impl_.ai_flag_;
  }
  _impl_.ai_flag_ = nullptr;
}
inline const ::bilibili::community::service::dm::v1::DanmakuFlagConfig& DmViewReply::_internal_ai_flag() const {
  const ::bilibili::community::service::dm::v1::DanmakuFlagConfig* p = _impl_.ai_flag_;
  return p != nullptr ? *p : reinterpret_cast<const ::bilibili::community::service::dm::v1::DanmakuFlagConfig&>(
      ::bilibili::community::service::dm::v1::_DanmakuFlagConfig_default_instance_);
}
inline const ::bilibili::community::service::dm::v1::DanmakuFlagConfig& DmViewReply::ai_flag() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DmViewReply.ai_flag)
  return _internal_ai_flag();
}
inline void DmViewReply::unsafe_arena_set_allocated_ai_flag(
    ::bilibili::community::service::dm::v1::DanmakuFlagConfig* ai_flag) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ai_flag_);
  }
  _impl_.ai_flag_ = ai_flag;
  if (ai_flag) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bilibili.community.service.dm.v1.DmViewReply.ai_flag)
}
inline ::bilibili::community::service::dm::v1::DanmakuFlagConfig* DmViewReply::release_ai_flag() {
  
  ::bilibili::community::service::dm::v1::DanmakuFlagConfig* temp = _impl_.ai_flag_;
  _impl_.ai_flag_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bilibili::community::service::dm::v1::DanmakuFlagConfig* DmViewReply::unsafe_arena_release_ai_flag() {
  // @@protoc_insertion_point(field_release:bilibili.community.service.dm.v1.DmViewReply.ai_flag)
  
  ::bilibili::community::service::dm::v1::DanmakuFlagConfig* temp = _impl_.ai_flag_;
  _impl_.ai_flag_ = nullptr;
  return temp;
}
inline ::bilibili::community::service::dm::v1::DanmakuFlagConfig* DmViewReply::_internal_mutable_ai_flag() {
  
  if (_impl_.ai_flag_ == nullptr) {
    auto* p = CreateMaybeMessage<::bilibili::community::service::dm::v1::DanmakuFlagConfig>(GetArenaForAllocation());
    _impl_.ai_flag_ = p;
  }
  return _impl_.ai_flag_;
}
inline ::bilibili::community::service::dm::v1::DanmakuFlagConfig* DmViewReply::mutable_ai_flag() {
  ::bilibili::community::service::dm::v1::DanmakuFlagConfig* _msg = _internal_mutable_ai_flag();
  // @@protoc_insertion_point(field_mutable:bilibili.community.service.dm.v1.DmViewReply.ai_flag)
  return _msg;
}
inline void DmViewReply::set_allocated_ai_flag(::bilibili::community::service::dm::v1::DanmakuFlagConfig* ai_flag) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.ai_flag_;
  }
  if (ai_flag) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(ai_flag);
    if (message_arena != submessage_arena) {
      ai_flag = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ai_flag, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.ai_flag_ = ai_flag;
  // @@protoc_insertion_point(field_set_allocated:bilibili.community.service.dm.v1.DmViewReply.ai_flag)
}

// .bilibili.community.service.dm.v1.DanmuPlayerViewConfig player_config = 6;
inline bool DmViewReply::_internal_has_player_config() const {
  return this != internal_default_instance() && _impl_.player_config_ != nullptr;
}
inline bool DmViewReply::has_player_config() const {
  return _internal_has_player_config();
}
inline void DmViewReply::clear_player_config() {
  if (GetArenaForAllocation() == nullptr && _impl_.player_config_ != nullptr) {
    delete _impl_.player_config_;
  }
  _impl_.player_config_ = nullptr;
}
inline const ::bilibili::community::service::dm::v1::DanmuPlayerViewConfig& DmViewReply::_internal_player_config() const {
  const ::bilibili::community::service::dm::v1::DanmuPlayerViewConfig* p = _impl_.player_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::bilibili::community::service::dm::v1::DanmuPlayerViewConfig&>(
      ::bilibili::community::service::dm::v1::_DanmuPlayerViewConfig_default_instance_);
}
inline const ::bilibili::community::service::dm::v1::DanmuPlayerViewConfig& DmViewReply::player_config() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DmViewReply.player_config)
  return _internal_player_config();
}
inline void DmViewReply::unsafe_arena_set_allocated_player_config(
    ::bilibili::community::service::dm::v1::DanmuPlayerViewConfig* player_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.player_config_);
  }
  _impl_.player_config_ = player_config;
  if (player_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bilibili.community.service.dm.v1.DmViewReply.player_config)
}
inline ::bilibili::community::service::dm::v1::DanmuPlayerViewConfig* DmViewReply::release_player_config() {
  
  ::bilibili::community::service::dm::v1::DanmuPlayerViewConfig* temp = _impl_.player_config_;
  _impl_.player_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bilibili::community::service::dm::v1::DanmuPlayerViewConfig* DmViewReply::unsafe_arena_release_player_config() {
  // @@protoc_insertion_point(field_release:bilibili.community.service.dm.v1.DmViewReply.player_config)
  
  ::bilibili::community::service::dm::v1::DanmuPlayerViewConfig* temp = _impl_.player_config_;
  _impl_.player_config_ = nullptr;
  return temp;
}
inline ::bilibili::community::service::dm::v1::DanmuPlayerViewConfig* DmViewReply::_internal_mutable_player_config() {
  
  if (_impl_.player_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::bilibili::community::service::dm::v1::DanmuPlayerViewConfig>(GetArenaForAllocation());
    _impl_.player_config_ = p;
  }
  return _impl_.player_config_;
}
inline ::bilibili::community::service::dm::v1::DanmuPlayerViewConfig* DmViewReply::mutable_player_config() {
  ::bilibili::community::service::dm::v1::DanmuPlayerViewConfig* _msg = _internal_mutable_player_config();
  // @@protoc_insertion_point(field_mutable:bilibili.community.service.dm.v1.DmViewReply.player_config)
  return _msg;
}
inline void DmViewReply::set_allocated_player_config(::bilibili::community::service::dm::v1::DanmuPlayerViewConfig* player_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.player_config_;
  }
  if (player_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(player_config);
    if (message_arena != submessage_arena) {
      player_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_config, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.player_config_ = player_config;
  // @@protoc_insertion_point(field_set_allocated:bilibili.community.service.dm.v1.DmViewReply.player_config)
}

// int32 send_box_style = 7;
inline void DmViewReply::clear_send_box_style() {
  _impl_.send_box_style_ = 0;
}
inline int32_t DmViewReply::_internal_send_box_style() const {
  return _impl_.send_box_style_;
}
inline int32_t DmViewReply::send_box_style() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DmViewReply.send_box_style)
  return _internal_send_box_style();
}
inline void DmViewReply::_internal_set_send_box_style(int32_t value) {
  
  _impl_.send_box_style_ = value;
}
inline void DmViewReply::set_send_box_style(int32_t value) {
  _internal_set_send_box_style(value);
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.DmViewReply.send_box_style)
}

// bool allow = 8;
inline void DmViewReply::clear_allow() {
  _impl_.allow_ = false;
}
inline bool DmViewReply::_internal_allow() const {
  return _impl_.allow_;
}
inline bool DmViewReply::allow() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DmViewReply.allow)
  return _internal_allow();
}
inline void DmViewReply::_internal_set_allow(bool value) {
  
  _impl_.allow_ = value;
}
inline void DmViewReply::set_allow(bool value) {
  _internal_set_allow(value);
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.DmViewReply.allow)
}

// string check_box = 9;
inline void DmViewReply::clear_check_box() {
  _impl_.check_box_.ClearToEmpty();
}
inline const std::string& DmViewReply::check_box() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DmViewReply.check_box)
  return _internal_check_box();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DmViewReply::set_check_box(ArgT0&& arg0, ArgT... args) {
 
 _impl_.check_box_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.DmViewReply.check_box)
}
inline std::string* DmViewReply::mutable_check_box() {
  std::string* _s = _internal_mutable_check_box();
  // @@protoc_insertion_point(field_mutable:bilibili.community.service.dm.v1.DmViewReply.check_box)
  return _s;
}
inline const std::string& DmViewReply::_internal_check_box() const {
  return _impl_.check_box_.Get();
}
inline void DmViewReply::_internal_set_check_box(const std::string& value) {
  
  _impl_.check_box_.Set(value, GetArenaForAllocation());
}
inline std::string* DmViewReply::_internal_mutable_check_box() {
  
  return _impl_.check_box_.Mutable(GetArenaForAllocation());
}
inline std::string* DmViewReply::release_check_box() {
  // @@protoc_insertion_point(field_release:bilibili.community.service.dm.v1.DmViewReply.check_box)
  return _impl_.check_box_.Release();
}
inline void DmViewReply::set_allocated_check_box(std::string* check_box) {
  if (check_box != nullptr) {
    
  } else {
    
  }
  _impl_.check_box_.SetAllocated(check_box, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.check_box_.IsDefault()) {
    _impl_.check_box_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bilibili.community.service.dm.v1.DmViewReply.check_box)
}

// string check_box_show_msg = 10;
inline void DmViewReply::clear_check_box_show_msg() {
  _impl_.check_box_show_msg_.ClearToEmpty();
}
inline const std::string& DmViewReply::check_box_show_msg() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DmViewReply.check_box_show_msg)
  return _internal_check_box_show_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DmViewReply::set_check_box_show_msg(ArgT0&& arg0, ArgT... args) {
 
 _impl_.check_box_show_msg_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.DmViewReply.check_box_show_msg)
}
inline std::string* DmViewReply::mutable_check_box_show_msg() {
  std::string* _s = _internal_mutable_check_box_show_msg();
  // @@protoc_insertion_point(field_mutable:bilibili.community.service.dm.v1.DmViewReply.check_box_show_msg)
  return _s;
}
inline const std::string& DmViewReply::_internal_check_box_show_msg() const {
  return _impl_.check_box_show_msg_.Get();
}
inline void DmViewReply::_internal_set_check_box_show_msg(const std::string& value) {
  
  _impl_.check_box_show_msg_.Set(value, GetArenaForAllocation());
}
inline std::string* DmViewReply::_internal_mutable_check_box_show_msg() {
  
  return _impl_.check_box_show_msg_.Mutable(GetArenaForAllocation());
}
inline std::string* DmViewReply::release_check_box_show_msg() {
  // @@protoc_insertion_point(field_release:bilibili.community.service.dm.v1.DmViewReply.check_box_show_msg)
  return _impl_.check_box_show_msg_.Release();
}
inline void DmViewReply::set_allocated_check_box_show_msg(std::string* check_box_show_msg) {
  if (check_box_show_msg != nullptr) {
    
  } else {
    
  }
  _impl_.check_box_show_msg_.SetAllocated(check_box_show_msg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.check_box_show_msg_.IsDefault()) {
    _impl_.check_box_show_msg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bilibili.community.service.dm.v1.DmViewReply.check_box_show_msg)
}

// string text_placeholder = 11;
inline void DmViewReply::clear_text_placeholder() {
  _impl_.text_placeholder_.ClearToEmpty();
}
inline const std::string& DmViewReply::text_placeholder() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DmViewReply.text_placeholder)
  return _internal_text_placeholder();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DmViewReply::set_text_placeholder(ArgT0&& arg0, ArgT... args) {
 
 _impl_.text_placeholder_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.DmViewReply.text_placeholder)
}
inline std::string* DmViewReply::mutable_text_placeholder() {
  std::string* _s = _internal_mutable_text_placeholder();
  // @@protoc_insertion_point(field_mutable:bilibili.community.service.dm.v1.DmViewReply.text_placeholder)
  return _s;
}
inline const std::string& DmViewReply::_internal_text_placeholder() const {
  return _impl_.text_placeholder_.Get();
}
inline void DmViewReply::_internal_set_text_placeholder(const std::string& value) {
  
  _impl_.text_placeholder_.Set(value, GetArenaForAllocation());
}
inline std::string* DmViewReply::_internal_mutable_text_placeholder() {
  
  return _impl_.text_placeholder_.Mutable(GetArenaForAllocation());
}
inline std::string* DmViewReply::release_text_placeholder() {
  // @@protoc_insertion_point(field_release:bilibili.community.service.dm.v1.DmViewReply.text_placeholder)
  return _impl_.text_placeholder_.Release();
}
inline void DmViewReply::set_allocated_text_placeholder(std::string* text_placeholder) {
  if (text_placeholder != nullptr) {
    
  } else {
    
  }
  _impl_.text_placeholder_.SetAllocated(text_placeholder, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.text_placeholder_.IsDefault()) {
    _impl_.text_placeholder_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bilibili.community.service.dm.v1.DmViewReply.text_placeholder)
}

// string input_placeholder = 12;
inline void DmViewReply::clear_input_placeholder() {
  _impl_.input_placeholder_.ClearToEmpty();
}
inline const std::string& DmViewReply::input_placeholder() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DmViewReply.input_placeholder)
  return _internal_input_placeholder();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DmViewReply::set_input_placeholder(ArgT0&& arg0, ArgT... args) {
 
 _impl_.input_placeholder_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.DmViewReply.input_placeholder)
}
inline std::string* DmViewReply::mutable_input_placeholder() {
  std::string* _s = _internal_mutable_input_placeholder();
  // @@protoc_insertion_point(field_mutable:bilibili.community.service.dm.v1.DmViewReply.input_placeholder)
  return _s;
}
inline const std::string& DmViewReply::_internal_input_placeholder() const {
  return _impl_.input_placeholder_.Get();
}
inline void DmViewReply::_internal_set_input_placeholder(const std::string& value) {
  
  _impl_.input_placeholder_.Set(value, GetArenaForAllocation());
}
inline std::string* DmViewReply::_internal_mutable_input_placeholder() {
  
  return _impl_.input_placeholder_.Mutable(GetArenaForAllocation());
}
inline std::string* DmViewReply::release_input_placeholder() {
  // @@protoc_insertion_point(field_release:bilibili.community.service.dm.v1.DmViewReply.input_placeholder)
  return _impl_.input_placeholder_.Release();
}
inline void DmViewReply::set_allocated_input_placeholder(std::string* input_placeholder) {
  if (input_placeholder != nullptr) {
    
  } else {
    
  }
  _impl_.input_placeholder_.SetAllocated(input_placeholder, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.input_placeholder_.IsDefault()) {
    _impl_.input_placeholder_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bilibili.community.service.dm.v1.DmViewReply.input_placeholder)
}

// repeated string report_filter_content = 13;
inline int DmViewReply::_internal_report_filter_content_size() const {
  return _impl_.report_filter_content_.size();
}
inline int DmViewReply::report_filter_content_size() const {
  return _internal_report_filter_content_size();
}
inline void DmViewReply::clear_report_filter_content() {
  _impl_.report_filter_content_.Clear();
}
inline std::string* DmViewReply::add_report_filter_content() {
  std::string* _s = _internal_add_report_filter_content();
  // @@protoc_insertion_point(field_add_mutable:bilibili.community.service.dm.v1.DmViewReply.report_filter_content)
  return _s;
}
inline const std::string& DmViewReply::_internal_report_filter_content(int index) const {
  return _impl_.report_filter_content_.Get(index);
}
inline const std::string& DmViewReply::report_filter_content(int index) const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DmViewReply.report_filter_content)
  return _internal_report_filter_content(index);
}
inline std::string* DmViewReply::mutable_report_filter_content(int index) {
  // @@protoc_insertion_point(field_mutable:bilibili.community.service.dm.v1.DmViewReply.report_filter_content)
  return _impl_.report_filter_content_.Mutable(index);
}
inline void DmViewReply::set_report_filter_content(int index, const std::string& value) {
  _impl_.report_filter_content_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.DmViewReply.report_filter_content)
}
inline void DmViewReply::set_report_filter_content(int index, std::string&& value) {
  _impl_.report_filter_content_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.DmViewReply.report_filter_content)
}
inline void DmViewReply::set_report_filter_content(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.report_filter_content_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:bilibili.community.service.dm.v1.DmViewReply.report_filter_content)
}
inline void DmViewReply::set_report_filter_content(int index, const char* value, size_t size) {
  _impl_.report_filter_content_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:bilibili.community.service.dm.v1.DmViewReply.report_filter_content)
}
inline std::string* DmViewReply::_internal_add_report_filter_content() {
  return _impl_.report_filter_content_.Add();
}
inline void DmViewReply::add_report_filter_content(const std::string& value) {
  _impl_.report_filter_content_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:bilibili.community.service.dm.v1.DmViewReply.report_filter_content)
}
inline void DmViewReply::add_report_filter_content(std::string&& value) {
  _impl_.report_filter_content_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:bilibili.community.service.dm.v1.DmViewReply.report_filter_content)
}
inline void DmViewReply::add_report_filter_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.report_filter_content_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:bilibili.community.service.dm.v1.DmViewReply.report_filter_content)
}
inline void DmViewReply::add_report_filter_content(const char* value, size_t size) {
  _impl_.report_filter_content_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:bilibili.community.service.dm.v1.DmViewReply.report_filter_content)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DmViewReply::report_filter_content() const {
  // @@protoc_insertion_point(field_list:bilibili.community.service.dm.v1.DmViewReply.report_filter_content)
  return _impl_.report_filter_content_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DmViewReply::mutable_report_filter_content() {
  // @@protoc_insertion_point(field_mutable_list:bilibili.community.service.dm.v1.DmViewReply.report_filter_content)
  return &_impl_.report_filter_content_;
}

// -------------------------------------------------------------------

// DmWebViewReply

// int32 state = 1;
inline void DmWebViewReply::clear_state() {
  _impl_.state_ = 0;
}
inline int32_t DmWebViewReply::_internal_state() const {
  return _impl_.state_;
}
inline int32_t DmWebViewReply::state() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DmWebViewReply.state)
  return _internal_state();
}
inline void DmWebViewReply::_internal_set_state(int32_t value) {
  
  _impl_.state_ = value;
}
inline void DmWebViewReply::set_state(int32_t value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.DmWebViewReply.state)
}

// string text = 2;
inline void DmWebViewReply::clear_text() {
  _impl_.text_.ClearToEmpty();
}
inline const std::string& DmWebViewReply::text() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DmWebViewReply.text)
  return _internal_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DmWebViewReply::set_text(ArgT0&& arg0, ArgT... args) {
 
 _impl_.text_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.DmWebViewReply.text)
}
inline std::string* DmWebViewReply::mutable_text() {
  std::string* _s = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:bilibili.community.service.dm.v1.DmWebViewReply.text)
  return _s;
}
inline const std::string& DmWebViewReply::_internal_text() const {
  return _impl_.text_.Get();
}
inline void DmWebViewReply::_internal_set_text(const std::string& value) {
  
  _impl_.text_.Set(value, GetArenaForAllocation());
}
inline std::string* DmWebViewReply::_internal_mutable_text() {
  
  return _impl_.text_.Mutable(GetArenaForAllocation());
}
inline std::string* DmWebViewReply::release_text() {
  // @@protoc_insertion_point(field_release:bilibili.community.service.dm.v1.DmWebViewReply.text)
  return _impl_.text_.Release();
}
inline void DmWebViewReply::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  _impl_.text_.SetAllocated(text, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.text_.IsDefault()) {
    _impl_.text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bilibili.community.service.dm.v1.DmWebViewReply.text)
}

// string text_side = 3;
inline void DmWebViewReply::clear_text_side() {
  _impl_.text_side_.ClearToEmpty();
}
inline const std::string& DmWebViewReply::text_side() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DmWebViewReply.text_side)
  return _internal_text_side();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DmWebViewReply::set_text_side(ArgT0&& arg0, ArgT... args) {
 
 _impl_.text_side_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.DmWebViewReply.text_side)
}
inline std::string* DmWebViewReply::mutable_text_side() {
  std::string* _s = _internal_mutable_text_side();
  // @@protoc_insertion_point(field_mutable:bilibili.community.service.dm.v1.DmWebViewReply.text_side)
  return _s;
}
inline const std::string& DmWebViewReply::_internal_text_side() const {
  return _impl_.text_side_.Get();
}
inline void DmWebViewReply::_internal_set_text_side(const std::string& value) {
  
  _impl_.text_side_.Set(value, GetArenaForAllocation());
}
inline std::string* DmWebViewReply::_internal_mutable_text_side() {
  
  return _impl_.text_side_.Mutable(GetArenaForAllocation());
}
inline std::string* DmWebViewReply::release_text_side() {
  // @@protoc_insertion_point(field_release:bilibili.community.service.dm.v1.DmWebViewReply.text_side)
  return _impl_.text_side_.Release();
}
inline void DmWebViewReply::set_allocated_text_side(std::string* text_side) {
  if (text_side != nullptr) {
    
  } else {
    
  }
  _impl_.text_side_.SetAllocated(text_side, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.text_side_.IsDefault()) {
    _impl_.text_side_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bilibili.community.service.dm.v1.DmWebViewReply.text_side)
}

// .bilibili.community.service.dm.v1.DmSegConfig dm_sge = 4;
inline bool DmWebViewReply::_internal_has_dm_sge() const {
  return this != internal_default_instance() && _impl_.dm_sge_ != nullptr;
}
inline bool DmWebViewReply::has_dm_sge() const {
  return _internal_has_dm_sge();
}
inline void DmWebViewReply::clear_dm_sge() {
  if (GetArenaForAllocation() == nullptr && _impl_.dm_sge_ != nullptr) {
    delete _impl_.dm_sge_;
  }
  _impl_.dm_sge_ = nullptr;
}
inline const ::bilibili::community::service::dm::v1::DmSegConfig& DmWebViewReply::_internal_dm_sge() const {
  const ::bilibili::community::service::dm::v1::DmSegConfig* p = _impl_.dm_sge_;
  return p != nullptr ? *p : reinterpret_cast<const ::bilibili::community::service::dm::v1::DmSegConfig&>(
      ::bilibili::community::service::dm::v1::_DmSegConfig_default_instance_);
}
inline const ::bilibili::community::service::dm::v1::DmSegConfig& DmWebViewReply::dm_sge() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DmWebViewReply.dm_sge)
  return _internal_dm_sge();
}
inline void DmWebViewReply::unsafe_arena_set_allocated_dm_sge(
    ::bilibili::community::service::dm::v1::DmSegConfig* dm_sge) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.dm_sge_);
  }
  _impl_.dm_sge_ = dm_sge;
  if (dm_sge) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bilibili.community.service.dm.v1.DmWebViewReply.dm_sge)
}
inline ::bilibili::community::service::dm::v1::DmSegConfig* DmWebViewReply::release_dm_sge() {
  
  ::bilibili::community::service::dm::v1::DmSegConfig* temp = _impl_.dm_sge_;
  _impl_.dm_sge_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bilibili::community::service::dm::v1::DmSegConfig* DmWebViewReply::unsafe_arena_release_dm_sge() {
  // @@protoc_insertion_point(field_release:bilibili.community.service.dm.v1.DmWebViewReply.dm_sge)
  
  ::bilibili::community::service::dm::v1::DmSegConfig* temp = _impl_.dm_sge_;
  _impl_.dm_sge_ = nullptr;
  return temp;
}
inline ::bilibili::community::service::dm::v1::DmSegConfig* DmWebViewReply::_internal_mutable_dm_sge() {
  
  if (_impl_.dm_sge_ == nullptr) {
    auto* p = CreateMaybeMessage<::bilibili::community::service::dm::v1::DmSegConfig>(GetArenaForAllocation());
    _impl_.dm_sge_ = p;
  }
  return _impl_.dm_sge_;
}
inline ::bilibili::community::service::dm::v1::DmSegConfig* DmWebViewReply::mutable_dm_sge() {
  ::bilibili::community::service::dm::v1::DmSegConfig* _msg = _internal_mutable_dm_sge();
  // @@protoc_insertion_point(field_mutable:bilibili.community.service.dm.v1.DmWebViewReply.dm_sge)
  return _msg;
}
inline void DmWebViewReply::set_allocated_dm_sge(::bilibili::community::service::dm::v1::DmSegConfig* dm_sge) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.dm_sge_;
  }
  if (dm_sge) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(dm_sge);
    if (message_arena != submessage_arena) {
      dm_sge = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dm_sge, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.dm_sge_ = dm_sge;
  // @@protoc_insertion_point(field_set_allocated:bilibili.community.service.dm.v1.DmWebViewReply.dm_sge)
}

// .bilibili.community.service.dm.v1.DanmakuFlagConfig flag = 5;
inline bool DmWebViewReply::_internal_has_flag() const {
  return this != internal_default_instance() && _impl_.flag_ != nullptr;
}
inline bool DmWebViewReply::has_flag() const {
  return _internal_has_flag();
}
inline void DmWebViewReply::clear_flag() {
  if (GetArenaForAllocation() == nullptr && _impl_.flag_ != nullptr) {
    delete _impl_.flag_;
  }
  _impl_.flag_ = nullptr;
}
inline const ::bilibili::community::service::dm::v1::DanmakuFlagConfig& DmWebViewReply::_internal_flag() const {
  const ::bilibili::community::service::dm::v1::DanmakuFlagConfig* p = _impl_.flag_;
  return p != nullptr ? *p : reinterpret_cast<const ::bilibili::community::service::dm::v1::DanmakuFlagConfig&>(
      ::bilibili::community::service::dm::v1::_DanmakuFlagConfig_default_instance_);
}
inline const ::bilibili::community::service::dm::v1::DanmakuFlagConfig& DmWebViewReply::flag() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DmWebViewReply.flag)
  return _internal_flag();
}
inline void DmWebViewReply::unsafe_arena_set_allocated_flag(
    ::bilibili::community::service::dm::v1::DanmakuFlagConfig* flag) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.flag_);
  }
  _impl_.flag_ = flag;
  if (flag) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bilibili.community.service.dm.v1.DmWebViewReply.flag)
}
inline ::bilibili::community::service::dm::v1::DanmakuFlagConfig* DmWebViewReply::release_flag() {
  
  ::bilibili::community::service::dm::v1::DanmakuFlagConfig* temp = _impl_.flag_;
  _impl_.flag_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bilibili::community::service::dm::v1::DanmakuFlagConfig* DmWebViewReply::unsafe_arena_release_flag() {
  // @@protoc_insertion_point(field_release:bilibili.community.service.dm.v1.DmWebViewReply.flag)
  
  ::bilibili::community::service::dm::v1::DanmakuFlagConfig* temp = _impl_.flag_;
  _impl_.flag_ = nullptr;
  return temp;
}
inline ::bilibili::community::service::dm::v1::DanmakuFlagConfig* DmWebViewReply::_internal_mutable_flag() {
  
  if (_impl_.flag_ == nullptr) {
    auto* p = CreateMaybeMessage<::bilibili::community::service::dm::v1::DanmakuFlagConfig>(GetArenaForAllocation());
    _impl_.flag_ = p;
  }
  return _impl_.flag_;
}
inline ::bilibili::community::service::dm::v1::DanmakuFlagConfig* DmWebViewReply::mutable_flag() {
  ::bilibili::community::service::dm::v1::DanmakuFlagConfig* _msg = _internal_mutable_flag();
  // @@protoc_insertion_point(field_mutable:bilibili.community.service.dm.v1.DmWebViewReply.flag)
  return _msg;
}
inline void DmWebViewReply::set_allocated_flag(::bilibili::community::service::dm::v1::DanmakuFlagConfig* flag) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.flag_;
  }
  if (flag) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(flag);
    if (message_arena != submessage_arena) {
      flag = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, flag, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.flag_ = flag;
  // @@protoc_insertion_point(field_set_allocated:bilibili.community.service.dm.v1.DmWebViewReply.flag)
}

// repeated string special_dms = 6;
inline int DmWebViewReply::_internal_special_dms_size() const {
  return _impl_.special_dms_.size();
}
inline int DmWebViewReply::special_dms_size() const {
  return _internal_special_dms_size();
}
inline void DmWebViewReply::clear_special_dms() {
  _impl_.special_dms_.Clear();
}
inline std::string* DmWebViewReply::add_special_dms() {
  std::string* _s = _internal_add_special_dms();
  // @@protoc_insertion_point(field_add_mutable:bilibili.community.service.dm.v1.DmWebViewReply.special_dms)
  return _s;
}
inline const std::string& DmWebViewReply::_internal_special_dms(int index) const {
  return _impl_.special_dms_.Get(index);
}
inline const std::string& DmWebViewReply::special_dms(int index) const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DmWebViewReply.special_dms)
  return _internal_special_dms(index);
}
inline std::string* DmWebViewReply::mutable_special_dms(int index) {
  // @@protoc_insertion_point(field_mutable:bilibili.community.service.dm.v1.DmWebViewReply.special_dms)
  return _impl_.special_dms_.Mutable(index);
}
inline void DmWebViewReply::set_special_dms(int index, const std::string& value) {
  _impl_.special_dms_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.DmWebViewReply.special_dms)
}
inline void DmWebViewReply::set_special_dms(int index, std::string&& value) {
  _impl_.special_dms_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.DmWebViewReply.special_dms)
}
inline void DmWebViewReply::set_special_dms(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.special_dms_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:bilibili.community.service.dm.v1.DmWebViewReply.special_dms)
}
inline void DmWebViewReply::set_special_dms(int index, const char* value, size_t size) {
  _impl_.special_dms_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:bilibili.community.service.dm.v1.DmWebViewReply.special_dms)
}
inline std::string* DmWebViewReply::_internal_add_special_dms() {
  return _impl_.special_dms_.Add();
}
inline void DmWebViewReply::add_special_dms(const std::string& value) {
  _impl_.special_dms_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:bilibili.community.service.dm.v1.DmWebViewReply.special_dms)
}
inline void DmWebViewReply::add_special_dms(std::string&& value) {
  _impl_.special_dms_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:bilibili.community.service.dm.v1.DmWebViewReply.special_dms)
}
inline void DmWebViewReply::add_special_dms(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.special_dms_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:bilibili.community.service.dm.v1.DmWebViewReply.special_dms)
}
inline void DmWebViewReply::add_special_dms(const char* value, size_t size) {
  _impl_.special_dms_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:bilibili.community.service.dm.v1.DmWebViewReply.special_dms)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DmWebViewReply::special_dms() const {
  // @@protoc_insertion_point(field_list:bilibili.community.service.dm.v1.DmWebViewReply.special_dms)
  return _impl_.special_dms_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DmWebViewReply::mutable_special_dms() {
  // @@protoc_insertion_point(field_mutable_list:bilibili.community.service.dm.v1.DmWebViewReply.special_dms)
  return &_impl_.special_dms_;
}

// bool check_box = 7;
inline void DmWebViewReply::clear_check_box() {
  _impl_.check_box_ = false;
}
inline bool DmWebViewReply::_internal_check_box() const {
  return _impl_.check_box_;
}
inline bool DmWebViewReply::check_box() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DmWebViewReply.check_box)
  return _internal_check_box();
}
inline void DmWebViewReply::_internal_set_check_box(bool value) {
  
  _impl_.check_box_ = value;
}
inline void DmWebViewReply::set_check_box(bool value) {
  _internal_set_check_box(value);
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.DmWebViewReply.check_box)
}

// int64 count = 8;
inline void DmWebViewReply::clear_count() {
  _impl_.count_ = int64_t{0};
}
inline int64_t DmWebViewReply::_internal_count() const {
  return _impl_.count_;
}
inline int64_t DmWebViewReply::count() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DmWebViewReply.count)
  return _internal_count();
}
inline void DmWebViewReply::_internal_set_count(int64_t value) {
  
  _impl_.count_ = value;
}
inline void DmWebViewReply::set_count(int64_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.DmWebViewReply.count)
}

// repeated .bilibili.community.service.dm.v1.CommandDm commandDms = 9;
inline int DmWebViewReply::_internal_commanddms_size() const {
  return _impl_.commanddms_.size();
}
inline int DmWebViewReply::commanddms_size() const {
  return _internal_commanddms_size();
}
inline void DmWebViewReply::clear_commanddms() {
  _impl_.commanddms_.Clear();
}
inline ::bilibili::community::service::dm::v1::CommandDm* DmWebViewReply::mutable_commanddms(int index) {
  // @@protoc_insertion_point(field_mutable:bilibili.community.service.dm.v1.DmWebViewReply.commandDms)
  return _impl_.commanddms_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bilibili::community::service::dm::v1::CommandDm >*
DmWebViewReply::mutable_commanddms() {
  // @@protoc_insertion_point(field_mutable_list:bilibili.community.service.dm.v1.DmWebViewReply.commandDms)
  return &_impl_.commanddms_;
}
inline const ::bilibili::community::service::dm::v1::CommandDm& DmWebViewReply::_internal_commanddms(int index) const {
  return _impl_.commanddms_.Get(index);
}
inline const ::bilibili::community::service::dm::v1::CommandDm& DmWebViewReply::commanddms(int index) const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DmWebViewReply.commandDms)
  return _internal_commanddms(index);
}
inline ::bilibili::community::service::dm::v1::CommandDm* DmWebViewReply::_internal_add_commanddms() {
  return _impl_.commanddms_.Add();
}
inline ::bilibili::community::service::dm::v1::CommandDm* DmWebViewReply::add_commanddms() {
  ::bilibili::community::service::dm::v1::CommandDm* _add = _internal_add_commanddms();
  // @@protoc_insertion_point(field_add:bilibili.community.service.dm.v1.DmWebViewReply.commandDms)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bilibili::community::service::dm::v1::CommandDm >&
DmWebViewReply::commanddms() const {
  // @@protoc_insertion_point(field_list:bilibili.community.service.dm.v1.DmWebViewReply.commandDms)
  return _impl_.commanddms_;
}

// .bilibili.community.service.dm.v1.DanmuWebPlayerConfig player_config = 10;
inline bool DmWebViewReply::_internal_has_player_config() const {
  return this != internal_default_instance() && _impl_.player_config_ != nullptr;
}
inline bool DmWebViewReply::has_player_config() const {
  return _internal_has_player_config();
}
inline void DmWebViewReply::clear_player_config() {
  if (GetArenaForAllocation() == nullptr && _impl_.player_config_ != nullptr) {
    delete _impl_.player_config_;
  }
  _impl_.player_config_ = nullptr;
}
inline const ::bilibili::community::service::dm::v1::DanmuWebPlayerConfig& DmWebViewReply::_internal_player_config() const {
  const ::bilibili::community::service::dm::v1::DanmuWebPlayerConfig* p = _impl_.player_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::bilibili::community::service::dm::v1::DanmuWebPlayerConfig&>(
      ::bilibili::community::service::dm::v1::_DanmuWebPlayerConfig_default_instance_);
}
inline const ::bilibili::community::service::dm::v1::DanmuWebPlayerConfig& DmWebViewReply::player_config() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DmWebViewReply.player_config)
  return _internal_player_config();
}
inline void DmWebViewReply::unsafe_arena_set_allocated_player_config(
    ::bilibili::community::service::dm::v1::DanmuWebPlayerConfig* player_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.player_config_);
  }
  _impl_.player_config_ = player_config;
  if (player_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bilibili.community.service.dm.v1.DmWebViewReply.player_config)
}
inline ::bilibili::community::service::dm::v1::DanmuWebPlayerConfig* DmWebViewReply::release_player_config() {
  
  ::bilibili::community::service::dm::v1::DanmuWebPlayerConfig* temp = _impl_.player_config_;
  _impl_.player_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bilibili::community::service::dm::v1::DanmuWebPlayerConfig* DmWebViewReply::unsafe_arena_release_player_config() {
  // @@protoc_insertion_point(field_release:bilibili.community.service.dm.v1.DmWebViewReply.player_config)
  
  ::bilibili::community::service::dm::v1::DanmuWebPlayerConfig* temp = _impl_.player_config_;
  _impl_.player_config_ = nullptr;
  return temp;
}
inline ::bilibili::community::service::dm::v1::DanmuWebPlayerConfig* DmWebViewReply::_internal_mutable_player_config() {
  
  if (_impl_.player_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::bilibili::community::service::dm::v1::DanmuWebPlayerConfig>(GetArenaForAllocation());
    _impl_.player_config_ = p;
  }
  return _impl_.player_config_;
}
inline ::bilibili::community::service::dm::v1::DanmuWebPlayerConfig* DmWebViewReply::mutable_player_config() {
  ::bilibili::community::service::dm::v1::DanmuWebPlayerConfig* _msg = _internal_mutable_player_config();
  // @@protoc_insertion_point(field_mutable:bilibili.community.service.dm.v1.DmWebViewReply.player_config)
  return _msg;
}
inline void DmWebViewReply::set_allocated_player_config(::bilibili::community::service::dm::v1::DanmuWebPlayerConfig* player_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.player_config_;
  }
  if (player_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(player_config);
    if (message_arena != submessage_arena) {
      player_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_config, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.player_config_ = player_config;
  // @@protoc_insertion_point(field_set_allocated:bilibili.community.service.dm.v1.DmWebViewReply.player_config)
}

// repeated string report_filter_content = 11;
inline int DmWebViewReply::_internal_report_filter_content_size() const {
  return _impl_.report_filter_content_.size();
}
inline int DmWebViewReply::report_filter_content_size() const {
  return _internal_report_filter_content_size();
}
inline void DmWebViewReply::clear_report_filter_content() {
  _impl_.report_filter_content_.Clear();
}
inline std::string* DmWebViewReply::add_report_filter_content() {
  std::string* _s = _internal_add_report_filter_content();
  // @@protoc_insertion_point(field_add_mutable:bilibili.community.service.dm.v1.DmWebViewReply.report_filter_content)
  return _s;
}
inline const std::string& DmWebViewReply::_internal_report_filter_content(int index) const {
  return _impl_.report_filter_content_.Get(index);
}
inline const std::string& DmWebViewReply::report_filter_content(int index) const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DmWebViewReply.report_filter_content)
  return _internal_report_filter_content(index);
}
inline std::string* DmWebViewReply::mutable_report_filter_content(int index) {
  // @@protoc_insertion_point(field_mutable:bilibili.community.service.dm.v1.DmWebViewReply.report_filter_content)
  return _impl_.report_filter_content_.Mutable(index);
}
inline void DmWebViewReply::set_report_filter_content(int index, const std::string& value) {
  _impl_.report_filter_content_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.DmWebViewReply.report_filter_content)
}
inline void DmWebViewReply::set_report_filter_content(int index, std::string&& value) {
  _impl_.report_filter_content_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.DmWebViewReply.report_filter_content)
}
inline void DmWebViewReply::set_report_filter_content(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.report_filter_content_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:bilibili.community.service.dm.v1.DmWebViewReply.report_filter_content)
}
inline void DmWebViewReply::set_report_filter_content(int index, const char* value, size_t size) {
  _impl_.report_filter_content_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:bilibili.community.service.dm.v1.DmWebViewReply.report_filter_content)
}
inline std::string* DmWebViewReply::_internal_add_report_filter_content() {
  return _impl_.report_filter_content_.Add();
}
inline void DmWebViewReply::add_report_filter_content(const std::string& value) {
  _impl_.report_filter_content_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:bilibili.community.service.dm.v1.DmWebViewReply.report_filter_content)
}
inline void DmWebViewReply::add_report_filter_content(std::string&& value) {
  _impl_.report_filter_content_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:bilibili.community.service.dm.v1.DmWebViewReply.report_filter_content)
}
inline void DmWebViewReply::add_report_filter_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.report_filter_content_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:bilibili.community.service.dm.v1.DmWebViewReply.report_filter_content)
}
inline void DmWebViewReply::add_report_filter_content(const char* value, size_t size) {
  _impl_.report_filter_content_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:bilibili.community.service.dm.v1.DmWebViewReply.report_filter_content)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DmWebViewReply::report_filter_content() const {
  // @@protoc_insertion_point(field_list:bilibili.community.service.dm.v1.DmWebViewReply.report_filter_content)
  return _impl_.report_filter_content_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DmWebViewReply::mutable_report_filter_content() {
  // @@protoc_insertion_point(field_mutable_list:bilibili.community.service.dm.v1.DmWebViewReply.report_filter_content)
  return &_impl_.report_filter_content_;
}

// -------------------------------------------------------------------

// CommandDm

// int64 id = 1;
inline void CommandDm::clear_id() {
  _impl_.id_ = int64_t{0};
}
inline int64_t CommandDm::_internal_id() const {
  return _impl_.id_;
}
inline int64_t CommandDm::id() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.CommandDm.id)
  return _internal_id();
}
inline void CommandDm::_internal_set_id(int64_t value) {
  
  _impl_.id_ = value;
}
inline void CommandDm::set_id(int64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.CommandDm.id)
}

// int64 oid = 2;
inline void CommandDm::clear_oid() {
  _impl_.oid_ = int64_t{0};
}
inline int64_t CommandDm::_internal_oid() const {
  return _impl_.oid_;
}
inline int64_t CommandDm::oid() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.CommandDm.oid)
  return _internal_oid();
}
inline void CommandDm::_internal_set_oid(int64_t value) {
  
  _impl_.oid_ = value;
}
inline void CommandDm::set_oid(int64_t value) {
  _internal_set_oid(value);
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.CommandDm.oid)
}

// string mid = 3;
inline void CommandDm::clear_mid() {
  _impl_.mid_.ClearToEmpty();
}
inline const std::string& CommandDm::mid() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.CommandDm.mid)
  return _internal_mid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommandDm::set_mid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.mid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.CommandDm.mid)
}
inline std::string* CommandDm::mutable_mid() {
  std::string* _s = _internal_mutable_mid();
  // @@protoc_insertion_point(field_mutable:bilibili.community.service.dm.v1.CommandDm.mid)
  return _s;
}
inline const std::string& CommandDm::_internal_mid() const {
  return _impl_.mid_.Get();
}
inline void CommandDm::_internal_set_mid(const std::string& value) {
  
  _impl_.mid_.Set(value, GetArenaForAllocation());
}
inline std::string* CommandDm::_internal_mutable_mid() {
  
  return _impl_.mid_.Mutable(GetArenaForAllocation());
}
inline std::string* CommandDm::release_mid() {
  // @@protoc_insertion_point(field_release:bilibili.community.service.dm.v1.CommandDm.mid)
  return _impl_.mid_.Release();
}
inline void CommandDm::set_allocated_mid(std::string* mid) {
  if (mid != nullptr) {
    
  } else {
    
  }
  _impl_.mid_.SetAllocated(mid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.mid_.IsDefault()) {
    _impl_.mid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bilibili.community.service.dm.v1.CommandDm.mid)
}

// string command = 4;
inline void CommandDm::clear_command() {
  _impl_.command_.ClearToEmpty();
}
inline const std::string& CommandDm::command() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.CommandDm.command)
  return _internal_command();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommandDm::set_command(ArgT0&& arg0, ArgT... args) {
 
 _impl_.command_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.CommandDm.command)
}
inline std::string* CommandDm::mutable_command() {
  std::string* _s = _internal_mutable_command();
  // @@protoc_insertion_point(field_mutable:bilibili.community.service.dm.v1.CommandDm.command)
  return _s;
}
inline const std::string& CommandDm::_internal_command() const {
  return _impl_.command_.Get();
}
inline void CommandDm::_internal_set_command(const std::string& value) {
  
  _impl_.command_.Set(value, GetArenaForAllocation());
}
inline std::string* CommandDm::_internal_mutable_command() {
  
  return _impl_.command_.Mutable(GetArenaForAllocation());
}
inline std::string* CommandDm::release_command() {
  // @@protoc_insertion_point(field_release:bilibili.community.service.dm.v1.CommandDm.command)
  return _impl_.command_.Release();
}
inline void CommandDm::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  _impl_.command_.SetAllocated(command, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.command_.IsDefault()) {
    _impl_.command_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bilibili.community.service.dm.v1.CommandDm.command)
}

// string content = 5;
inline void CommandDm::clear_content() {
  _impl_.content_.ClearToEmpty();
}
inline const std::string& CommandDm::content() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.CommandDm.content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommandDm::set_content(ArgT0&& arg0, ArgT... args) {
 
 _impl_.content_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.CommandDm.content)
}
inline std::string* CommandDm::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:bilibili.community.service.dm.v1.CommandDm.content)
  return _s;
}
inline const std::string& CommandDm::_internal_content() const {
  return _impl_.content_.Get();
}
inline void CommandDm::_internal_set_content(const std::string& value) {
  
  _impl_.content_.Set(value, GetArenaForAllocation());
}
inline std::string* CommandDm::_internal_mutable_content() {
  
  return _impl_.content_.Mutable(GetArenaForAllocation());
}
inline std::string* CommandDm::release_content() {
  // @@protoc_insertion_point(field_release:bilibili.community.service.dm.v1.CommandDm.content)
  return _impl_.content_.Release();
}
inline void CommandDm::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  _impl_.content_.SetAllocated(content, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bilibili.community.service.dm.v1.CommandDm.content)
}

// int32 progress = 6;
inline void CommandDm::clear_progress() {
  _impl_.progress_ = 0;
}
inline int32_t CommandDm::_internal_progress() const {
  return _impl_.progress_;
}
inline int32_t CommandDm::progress() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.CommandDm.progress)
  return _internal_progress();
}
inline void CommandDm::_internal_set_progress(int32_t value) {
  
  _impl_.progress_ = value;
}
inline void CommandDm::set_progress(int32_t value) {
  _internal_set_progress(value);
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.CommandDm.progress)
}

// string ctime = 7;
inline void CommandDm::clear_ctime() {
  _impl_.ctime_.ClearToEmpty();
}
inline const std::string& CommandDm::ctime() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.CommandDm.ctime)
  return _internal_ctime();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommandDm::set_ctime(ArgT0&& arg0, ArgT... args) {
 
 _impl_.ctime_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.CommandDm.ctime)
}
inline std::string* CommandDm::mutable_ctime() {
  std::string* _s = _internal_mutable_ctime();
  // @@protoc_insertion_point(field_mutable:bilibili.community.service.dm.v1.CommandDm.ctime)
  return _s;
}
inline const std::string& CommandDm::_internal_ctime() const {
  return _impl_.ctime_.Get();
}
inline void CommandDm::_internal_set_ctime(const std::string& value) {
  
  _impl_.ctime_.Set(value, GetArenaForAllocation());
}
inline std::string* CommandDm::_internal_mutable_ctime() {
  
  return _impl_.ctime_.Mutable(GetArenaForAllocation());
}
inline std::string* CommandDm::release_ctime() {
  // @@protoc_insertion_point(field_release:bilibili.community.service.dm.v1.CommandDm.ctime)
  return _impl_.ctime_.Release();
}
inline void CommandDm::set_allocated_ctime(std::string* ctime) {
  if (ctime != nullptr) {
    
  } else {
    
  }
  _impl_.ctime_.SetAllocated(ctime, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ctime_.IsDefault()) {
    _impl_.ctime_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bilibili.community.service.dm.v1.CommandDm.ctime)
}

// string mtime = 8;
inline void CommandDm::clear_mtime() {
  _impl_.mtime_.ClearToEmpty();
}
inline const std::string& CommandDm::mtime() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.CommandDm.mtime)
  return _internal_mtime();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommandDm::set_mtime(ArgT0&& arg0, ArgT... args) {
 
 _impl_.mtime_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.CommandDm.mtime)
}
inline std::string* CommandDm::mutable_mtime() {
  std::string* _s = _internal_mutable_mtime();
  // @@protoc_insertion_point(field_mutable:bilibili.community.service.dm.v1.CommandDm.mtime)
  return _s;
}
inline const std::string& CommandDm::_internal_mtime() const {
  return _impl_.mtime_.Get();
}
inline void CommandDm::_internal_set_mtime(const std::string& value) {
  
  _impl_.mtime_.Set(value, GetArenaForAllocation());
}
inline std::string* CommandDm::_internal_mutable_mtime() {
  
  return _impl_.mtime_.Mutable(GetArenaForAllocation());
}
inline std::string* CommandDm::release_mtime() {
  // @@protoc_insertion_point(field_release:bilibili.community.service.dm.v1.CommandDm.mtime)
  return _impl_.mtime_.Release();
}
inline void CommandDm::set_allocated_mtime(std::string* mtime) {
  if (mtime != nullptr) {
    
  } else {
    
  }
  _impl_.mtime_.SetAllocated(mtime, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.mtime_.IsDefault()) {
    _impl_.mtime_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bilibili.community.service.dm.v1.CommandDm.mtime)
}

// string extra = 9;
inline void CommandDm::clear_extra() {
  _impl_.extra_.ClearToEmpty();
}
inline const std::string& CommandDm::extra() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.CommandDm.extra)
  return _internal_extra();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommandDm::set_extra(ArgT0&& arg0, ArgT... args) {
 
 _impl_.extra_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.CommandDm.extra)
}
inline std::string* CommandDm::mutable_extra() {
  std::string* _s = _internal_mutable_extra();
  // @@protoc_insertion_point(field_mutable:bilibili.community.service.dm.v1.CommandDm.extra)
  return _s;
}
inline const std::string& CommandDm::_internal_extra() const {
  return _impl_.extra_.Get();
}
inline void CommandDm::_internal_set_extra(const std::string& value) {
  
  _impl_.extra_.Set(value, GetArenaForAllocation());
}
inline std::string* CommandDm::_internal_mutable_extra() {
  
  return _impl_.extra_.Mutable(GetArenaForAllocation());
}
inline std::string* CommandDm::release_extra() {
  // @@protoc_insertion_point(field_release:bilibili.community.service.dm.v1.CommandDm.extra)
  return _impl_.extra_.Release();
}
inline void CommandDm::set_allocated_extra(std::string* extra) {
  if (extra != nullptr) {
    
  } else {
    
  }
  _impl_.extra_.SetAllocated(extra, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.extra_.IsDefault()) {
    _impl_.extra_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bilibili.community.service.dm.v1.CommandDm.extra)
}

// string idStr = 10;
inline void CommandDm::clear_idstr() {
  _impl_.idstr_.ClearToEmpty();
}
inline const std::string& CommandDm::idstr() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.CommandDm.idStr)
  return _internal_idstr();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommandDm::set_idstr(ArgT0&& arg0, ArgT... args) {
 
 _impl_.idstr_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.CommandDm.idStr)
}
inline std::string* CommandDm::mutable_idstr() {
  std::string* _s = _internal_mutable_idstr();
  // @@protoc_insertion_point(field_mutable:bilibili.community.service.dm.v1.CommandDm.idStr)
  return _s;
}
inline const std::string& CommandDm::_internal_idstr() const {
  return _impl_.idstr_.Get();
}
inline void CommandDm::_internal_set_idstr(const std::string& value) {
  
  _impl_.idstr_.Set(value, GetArenaForAllocation());
}
inline std::string* CommandDm::_internal_mutable_idstr() {
  
  return _impl_.idstr_.Mutable(GetArenaForAllocation());
}
inline std::string* CommandDm::release_idstr() {
  // @@protoc_insertion_point(field_release:bilibili.community.service.dm.v1.CommandDm.idStr)
  return _impl_.idstr_.Release();
}
inline void CommandDm::set_allocated_idstr(std::string* idstr) {
  if (idstr != nullptr) {
    
  } else {
    
  }
  _impl_.idstr_.SetAllocated(idstr, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.idstr_.IsDefault()) {
    _impl_.idstr_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bilibili.community.service.dm.v1.CommandDm.idStr)
}

// -------------------------------------------------------------------

// DmSegConfig

// int64 page_size = 1;
inline void DmSegConfig::clear_page_size() {
  _impl_.page_size_ = int64_t{0};
}
inline int64_t DmSegConfig::_internal_page_size() const {
  return _impl_.page_size_;
}
inline int64_t DmSegConfig::page_size() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DmSegConfig.page_size)
  return _internal_page_size();
}
inline void DmSegConfig::_internal_set_page_size(int64_t value) {
  
  _impl_.page_size_ = value;
}
inline void DmSegConfig::set_page_size(int64_t value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.DmSegConfig.page_size)
}

// int64 total = 2;
inline void DmSegConfig::clear_total() {
  _impl_.total_ = int64_t{0};
}
inline int64_t DmSegConfig::_internal_total() const {
  return _impl_.total_;
}
inline int64_t DmSegConfig::total() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DmSegConfig.total)
  return _internal_total();
}
inline void DmSegConfig::_internal_set_total(int64_t value) {
  
  _impl_.total_ = value;
}
inline void DmSegConfig::set_total(int64_t value) {
  _internal_set_total(value);
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.DmSegConfig.total)
}

// -------------------------------------------------------------------

// VideoMask

// int64 cid = 1;
inline void VideoMask::clear_cid() {
  _impl_.cid_ = int64_t{0};
}
inline int64_t VideoMask::_internal_cid() const {
  return _impl_.cid_;
}
inline int64_t VideoMask::cid() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.VideoMask.cid)
  return _internal_cid();
}
inline void VideoMask::_internal_set_cid(int64_t value) {
  
  _impl_.cid_ = value;
}
inline void VideoMask::set_cid(int64_t value) {
  _internal_set_cid(value);
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.VideoMask.cid)
}

// int32 plat = 2;
inline void VideoMask::clear_plat() {
  _impl_.plat_ = 0;
}
inline int32_t VideoMask::_internal_plat() const {
  return _impl_.plat_;
}
inline int32_t VideoMask::plat() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.VideoMask.plat)
  return _internal_plat();
}
inline void VideoMask::_internal_set_plat(int32_t value) {
  
  _impl_.plat_ = value;
}
inline void VideoMask::set_plat(int32_t value) {
  _internal_set_plat(value);
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.VideoMask.plat)
}

// int32 fps = 3;
inline void VideoMask::clear_fps() {
  _impl_.fps_ = 0;
}
inline int32_t VideoMask::_internal_fps() const {
  return _impl_.fps_;
}
inline int32_t VideoMask::fps() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.VideoMask.fps)
  return _internal_fps();
}
inline void VideoMask::_internal_set_fps(int32_t value) {
  
  _impl_.fps_ = value;
}
inline void VideoMask::set_fps(int32_t value) {
  _internal_set_fps(value);
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.VideoMask.fps)
}

// int64 time = 4;
inline void VideoMask::clear_time() {
  _impl_.time_ = int64_t{0};
}
inline int64_t VideoMask::_internal_time() const {
  return _impl_.time_;
}
inline int64_t VideoMask::time() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.VideoMask.time)
  return _internal_time();
}
inline void VideoMask::_internal_set_time(int64_t value) {
  
  _impl_.time_ = value;
}
inline void VideoMask::set_time(int64_t value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.VideoMask.time)
}

// string mask_url = 5;
inline void VideoMask::clear_mask_url() {
  _impl_.mask_url_.ClearToEmpty();
}
inline const std::string& VideoMask::mask_url() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.VideoMask.mask_url)
  return _internal_mask_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VideoMask::set_mask_url(ArgT0&& arg0, ArgT... args) {
 
 _impl_.mask_url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.VideoMask.mask_url)
}
inline std::string* VideoMask::mutable_mask_url() {
  std::string* _s = _internal_mutable_mask_url();
  // @@protoc_insertion_point(field_mutable:bilibili.community.service.dm.v1.VideoMask.mask_url)
  return _s;
}
inline const std::string& VideoMask::_internal_mask_url() const {
  return _impl_.mask_url_.Get();
}
inline void VideoMask::_internal_set_mask_url(const std::string& value) {
  
  _impl_.mask_url_.Set(value, GetArenaForAllocation());
}
inline std::string* VideoMask::_internal_mutable_mask_url() {
  
  return _impl_.mask_url_.Mutable(GetArenaForAllocation());
}
inline std::string* VideoMask::release_mask_url() {
  // @@protoc_insertion_point(field_release:bilibili.community.service.dm.v1.VideoMask.mask_url)
  return _impl_.mask_url_.Release();
}
inline void VideoMask::set_allocated_mask_url(std::string* mask_url) {
  if (mask_url != nullptr) {
    
  } else {
    
  }
  _impl_.mask_url_.SetAllocated(mask_url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.mask_url_.IsDefault()) {
    _impl_.mask_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bilibili.community.service.dm.v1.VideoMask.mask_url)
}

// -------------------------------------------------------------------

// VideoSubtitle

// string lan = 1;
inline void VideoSubtitle::clear_lan() {
  _impl_.lan_.ClearToEmpty();
}
inline const std::string& VideoSubtitle::lan() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.VideoSubtitle.lan)
  return _internal_lan();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VideoSubtitle::set_lan(ArgT0&& arg0, ArgT... args) {
 
 _impl_.lan_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.VideoSubtitle.lan)
}
inline std::string* VideoSubtitle::mutable_lan() {
  std::string* _s = _internal_mutable_lan();
  // @@protoc_insertion_point(field_mutable:bilibili.community.service.dm.v1.VideoSubtitle.lan)
  return _s;
}
inline const std::string& VideoSubtitle::_internal_lan() const {
  return _impl_.lan_.Get();
}
inline void VideoSubtitle::_internal_set_lan(const std::string& value) {
  
  _impl_.lan_.Set(value, GetArenaForAllocation());
}
inline std::string* VideoSubtitle::_internal_mutable_lan() {
  
  return _impl_.lan_.Mutable(GetArenaForAllocation());
}
inline std::string* VideoSubtitle::release_lan() {
  // @@protoc_insertion_point(field_release:bilibili.community.service.dm.v1.VideoSubtitle.lan)
  return _impl_.lan_.Release();
}
inline void VideoSubtitle::set_allocated_lan(std::string* lan) {
  if (lan != nullptr) {
    
  } else {
    
  }
  _impl_.lan_.SetAllocated(lan, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.lan_.IsDefault()) {
    _impl_.lan_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bilibili.community.service.dm.v1.VideoSubtitle.lan)
}

// string lanDoc = 2;
inline void VideoSubtitle::clear_landoc() {
  _impl_.landoc_.ClearToEmpty();
}
inline const std::string& VideoSubtitle::landoc() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.VideoSubtitle.lanDoc)
  return _internal_landoc();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VideoSubtitle::set_landoc(ArgT0&& arg0, ArgT... args) {
 
 _impl_.landoc_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.VideoSubtitle.lanDoc)
}
inline std::string* VideoSubtitle::mutable_landoc() {
  std::string* _s = _internal_mutable_landoc();
  // @@protoc_insertion_point(field_mutable:bilibili.community.service.dm.v1.VideoSubtitle.lanDoc)
  return _s;
}
inline const std::string& VideoSubtitle::_internal_landoc() const {
  return _impl_.landoc_.Get();
}
inline void VideoSubtitle::_internal_set_landoc(const std::string& value) {
  
  _impl_.landoc_.Set(value, GetArenaForAllocation());
}
inline std::string* VideoSubtitle::_internal_mutable_landoc() {
  
  return _impl_.landoc_.Mutable(GetArenaForAllocation());
}
inline std::string* VideoSubtitle::release_landoc() {
  // @@protoc_insertion_point(field_release:bilibili.community.service.dm.v1.VideoSubtitle.lanDoc)
  return _impl_.landoc_.Release();
}
inline void VideoSubtitle::set_allocated_landoc(std::string* landoc) {
  if (landoc != nullptr) {
    
  } else {
    
  }
  _impl_.landoc_.SetAllocated(landoc, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.landoc_.IsDefault()) {
    _impl_.landoc_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bilibili.community.service.dm.v1.VideoSubtitle.lanDoc)
}

// repeated .bilibili.community.service.dm.v1.SubtitleItem subtitles = 3;
inline int VideoSubtitle::_internal_subtitles_size() const {
  return _impl_.subtitles_.size();
}
inline int VideoSubtitle::subtitles_size() const {
  return _internal_subtitles_size();
}
inline void VideoSubtitle::clear_subtitles() {
  _impl_.subtitles_.Clear();
}
inline ::bilibili::community::service::dm::v1::SubtitleItem* VideoSubtitle::mutable_subtitles(int index) {
  // @@protoc_insertion_point(field_mutable:bilibili.community.service.dm.v1.VideoSubtitle.subtitles)
  return _impl_.subtitles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bilibili::community::service::dm::v1::SubtitleItem >*
VideoSubtitle::mutable_subtitles() {
  // @@protoc_insertion_point(field_mutable_list:bilibili.community.service.dm.v1.VideoSubtitle.subtitles)
  return &_impl_.subtitles_;
}
inline const ::bilibili::community::service::dm::v1::SubtitleItem& VideoSubtitle::_internal_subtitles(int index) const {
  return _impl_.subtitles_.Get(index);
}
inline const ::bilibili::community::service::dm::v1::SubtitleItem& VideoSubtitle::subtitles(int index) const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.VideoSubtitle.subtitles)
  return _internal_subtitles(index);
}
inline ::bilibili::community::service::dm::v1::SubtitleItem* VideoSubtitle::_internal_add_subtitles() {
  return _impl_.subtitles_.Add();
}
inline ::bilibili::community::service::dm::v1::SubtitleItem* VideoSubtitle::add_subtitles() {
  ::bilibili::community::service::dm::v1::SubtitleItem* _add = _internal_add_subtitles();
  // @@protoc_insertion_point(field_add:bilibili.community.service.dm.v1.VideoSubtitle.subtitles)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bilibili::community::service::dm::v1::SubtitleItem >&
VideoSubtitle::subtitles() const {
  // @@protoc_insertion_point(field_list:bilibili.community.service.dm.v1.VideoSubtitle.subtitles)
  return _impl_.subtitles_;
}

// -------------------------------------------------------------------

// DanmuWebPlayerConfig

// bool dm_switch = 1;
inline void DanmuWebPlayerConfig::clear_dm_switch() {
  _impl_.dm_switch_ = false;
}
inline bool DanmuWebPlayerConfig::_internal_dm_switch() const {
  return _impl_.dm_switch_;
}
inline bool DanmuWebPlayerConfig::dm_switch() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DanmuWebPlayerConfig.dm_switch)
  return _internal_dm_switch();
}
inline void DanmuWebPlayerConfig::_internal_set_dm_switch(bool value) {
  
  _impl_.dm_switch_ = value;
}
inline void DanmuWebPlayerConfig::set_dm_switch(bool value) {
  _internal_set_dm_switch(value);
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.DanmuWebPlayerConfig.dm_switch)
}

// bool ai_switch = 2;
inline void DanmuWebPlayerConfig::clear_ai_switch() {
  _impl_.ai_switch_ = false;
}
inline bool DanmuWebPlayerConfig::_internal_ai_switch() const {
  return _impl_.ai_switch_;
}
inline bool DanmuWebPlayerConfig::ai_switch() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DanmuWebPlayerConfig.ai_switch)
  return _internal_ai_switch();
}
inline void DanmuWebPlayerConfig::_internal_set_ai_switch(bool value) {
  
  _impl_.ai_switch_ = value;
}
inline void DanmuWebPlayerConfig::set_ai_switch(bool value) {
  _internal_set_ai_switch(value);
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.DanmuWebPlayerConfig.ai_switch)
}

// int32 ai_level = 3;
inline void DanmuWebPlayerConfig::clear_ai_level() {
  _impl_.ai_level_ = 0;
}
inline int32_t DanmuWebPlayerConfig::_internal_ai_level() const {
  return _impl_.ai_level_;
}
inline int32_t DanmuWebPlayerConfig::ai_level() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DanmuWebPlayerConfig.ai_level)
  return _internal_ai_level();
}
inline void DanmuWebPlayerConfig::_internal_set_ai_level(int32_t value) {
  
  _impl_.ai_level_ = value;
}
inline void DanmuWebPlayerConfig::set_ai_level(int32_t value) {
  _internal_set_ai_level(value);
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.DanmuWebPlayerConfig.ai_level)
}

// bool blocktop = 4;
inline void DanmuWebPlayerConfig::clear_blocktop() {
  _impl_.blocktop_ = false;
}
inline bool DanmuWebPlayerConfig::_internal_blocktop() const {
  return _impl_.blocktop_;
}
inline bool DanmuWebPlayerConfig::blocktop() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DanmuWebPlayerConfig.blocktop)
  return _internal_blocktop();
}
inline void DanmuWebPlayerConfig::_internal_set_blocktop(bool value) {
  
  _impl_.blocktop_ = value;
}
inline void DanmuWebPlayerConfig::set_blocktop(bool value) {
  _internal_set_blocktop(value);
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.DanmuWebPlayerConfig.blocktop)
}

// bool blockscroll = 5;
inline void DanmuWebPlayerConfig::clear_blockscroll() {
  _impl_.blockscroll_ = false;
}
inline bool DanmuWebPlayerConfig::_internal_blockscroll() const {
  return _impl_.blockscroll_;
}
inline bool DanmuWebPlayerConfig::blockscroll() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DanmuWebPlayerConfig.blockscroll)
  return _internal_blockscroll();
}
inline void DanmuWebPlayerConfig::_internal_set_blockscroll(bool value) {
  
  _impl_.blockscroll_ = value;
}
inline void DanmuWebPlayerConfig::set_blockscroll(bool value) {
  _internal_set_blockscroll(value);
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.DanmuWebPlayerConfig.blockscroll)
}

// bool blockbottom = 6;
inline void DanmuWebPlayerConfig::clear_blockbottom() {
  _impl_.blockbottom_ = false;
}
inline bool DanmuWebPlayerConfig::_internal_blockbottom() const {
  return _impl_.blockbottom_;
}
inline bool DanmuWebPlayerConfig::blockbottom() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DanmuWebPlayerConfig.blockbottom)
  return _internal_blockbottom();
}
inline void DanmuWebPlayerConfig::_internal_set_blockbottom(bool value) {
  
  _impl_.blockbottom_ = value;
}
inline void DanmuWebPlayerConfig::set_blockbottom(bool value) {
  _internal_set_blockbottom(value);
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.DanmuWebPlayerConfig.blockbottom)
}

// bool blockcolor = 7;
inline void DanmuWebPlayerConfig::clear_blockcolor() {
  _impl_.blockcolor_ = false;
}
inline bool DanmuWebPlayerConfig::_internal_blockcolor() const {
  return _impl_.blockcolor_;
}
inline bool DanmuWebPlayerConfig::blockcolor() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DanmuWebPlayerConfig.blockcolor)
  return _internal_blockcolor();
}
inline void DanmuWebPlayerConfig::_internal_set_blockcolor(bool value) {
  
  _impl_.blockcolor_ = value;
}
inline void DanmuWebPlayerConfig::set_blockcolor(bool value) {
  _internal_set_blockcolor(value);
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.DanmuWebPlayerConfig.blockcolor)
}

// bool blockspecial = 8;
inline void DanmuWebPlayerConfig::clear_blockspecial() {
  _impl_.blockspecial_ = false;
}
inline bool DanmuWebPlayerConfig::_internal_blockspecial() const {
  return _impl_.blockspecial_;
}
inline bool DanmuWebPlayerConfig::blockspecial() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DanmuWebPlayerConfig.blockspecial)
  return _internal_blockspecial();
}
inline void DanmuWebPlayerConfig::_internal_set_blockspecial(bool value) {
  
  _impl_.blockspecial_ = value;
}
inline void DanmuWebPlayerConfig::set_blockspecial(bool value) {
  _internal_set_blockspecial(value);
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.DanmuWebPlayerConfig.blockspecial)
}

// bool preventshade = 9;
inline void DanmuWebPlayerConfig::clear_preventshade() {
  _impl_.preventshade_ = false;
}
inline bool DanmuWebPlayerConfig::_internal_preventshade() const {
  return _impl_.preventshade_;
}
inline bool DanmuWebPlayerConfig::preventshade() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DanmuWebPlayerConfig.preventshade)
  return _internal_preventshade();
}
inline void DanmuWebPlayerConfig::_internal_set_preventshade(bool value) {
  
  _impl_.preventshade_ = value;
}
inline void DanmuWebPlayerConfig::set_preventshade(bool value) {
  _internal_set_preventshade(value);
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.DanmuWebPlayerConfig.preventshade)
}

// bool dmask = 10;
inline void DanmuWebPlayerConfig::clear_dmask() {
  _impl_.dmask_ = false;
}
inline bool DanmuWebPlayerConfig::_internal_dmask() const {
  return _impl_.dmask_;
}
inline bool DanmuWebPlayerConfig::dmask() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DanmuWebPlayerConfig.dmask)
  return _internal_dmask();
}
inline void DanmuWebPlayerConfig::_internal_set_dmask(bool value) {
  
  _impl_.dmask_ = value;
}
inline void DanmuWebPlayerConfig::set_dmask(bool value) {
  _internal_set_dmask(value);
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.DanmuWebPlayerConfig.dmask)
}

// float opacity = 11;
inline void DanmuWebPlayerConfig::clear_opacity() {
  _impl_.opacity_ = 0;
}
inline float DanmuWebPlayerConfig::_internal_opacity() const {
  return _impl_.opacity_;
}
inline float DanmuWebPlayerConfig::opacity() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DanmuWebPlayerConfig.opacity)
  return _internal_opacity();
}
inline void DanmuWebPlayerConfig::_internal_set_opacity(float value) {
  
  _impl_.opacity_ = value;
}
inline void DanmuWebPlayerConfig::set_opacity(float value) {
  _internal_set_opacity(value);
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.DanmuWebPlayerConfig.opacity)
}

// int32 dmarea = 12;
inline void DanmuWebPlayerConfig::clear_dmarea() {
  _impl_.dmarea_ = 0;
}
inline int32_t DanmuWebPlayerConfig::_internal_dmarea() const {
  return _impl_.dmarea_;
}
inline int32_t DanmuWebPlayerConfig::dmarea() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DanmuWebPlayerConfig.dmarea)
  return _internal_dmarea();
}
inline void DanmuWebPlayerConfig::_internal_set_dmarea(int32_t value) {
  
  _impl_.dmarea_ = value;
}
inline void DanmuWebPlayerConfig::set_dmarea(int32_t value) {
  _internal_set_dmarea(value);
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.DanmuWebPlayerConfig.dmarea)
}

// float speedplus = 13;
inline void DanmuWebPlayerConfig::clear_speedplus() {
  _impl_.speedplus_ = 0;
}
inline float DanmuWebPlayerConfig::_internal_speedplus() const {
  return _impl_.speedplus_;
}
inline float DanmuWebPlayerConfig::speedplus() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DanmuWebPlayerConfig.speedplus)
  return _internal_speedplus();
}
inline void DanmuWebPlayerConfig::_internal_set_speedplus(float value) {
  
  _impl_.speedplus_ = value;
}
inline void DanmuWebPlayerConfig::set_speedplus(float value) {
  _internal_set_speedplus(value);
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.DanmuWebPlayerConfig.speedplus)
}

// float fontsize = 14;
inline void DanmuWebPlayerConfig::clear_fontsize() {
  _impl_.fontsize_ = 0;
}
inline float DanmuWebPlayerConfig::_internal_fontsize() const {
  return _impl_.fontsize_;
}
inline float DanmuWebPlayerConfig::fontsize() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DanmuWebPlayerConfig.fontsize)
  return _internal_fontsize();
}
inline void DanmuWebPlayerConfig::_internal_set_fontsize(float value) {
  
  _impl_.fontsize_ = value;
}
inline void DanmuWebPlayerConfig::set_fontsize(float value) {
  _internal_set_fontsize(value);
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.DanmuWebPlayerConfig.fontsize)
}

// bool screensync = 15;
inline void DanmuWebPlayerConfig::clear_screensync() {
  _impl_.screensync_ = false;
}
inline bool DanmuWebPlayerConfig::_internal_screensync() const {
  return _impl_.screensync_;
}
inline bool DanmuWebPlayerConfig::screensync() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DanmuWebPlayerConfig.screensync)
  return _internal_screensync();
}
inline void DanmuWebPlayerConfig::_internal_set_screensync(bool value) {
  
  _impl_.screensync_ = value;
}
inline void DanmuWebPlayerConfig::set_screensync(bool value) {
  _internal_set_screensync(value);
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.DanmuWebPlayerConfig.screensync)
}

// bool speedsync = 16;
inline void DanmuWebPlayerConfig::clear_speedsync() {
  _impl_.speedsync_ = false;
}
inline bool DanmuWebPlayerConfig::_internal_speedsync() const {
  return _impl_.speedsync_;
}
inline bool DanmuWebPlayerConfig::speedsync() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DanmuWebPlayerConfig.speedsync)
  return _internal_speedsync();
}
inline void DanmuWebPlayerConfig::_internal_set_speedsync(bool value) {
  
  _impl_.speedsync_ = value;
}
inline void DanmuWebPlayerConfig::set_speedsync(bool value) {
  _internal_set_speedsync(value);
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.DanmuWebPlayerConfig.speedsync)
}

// string fontfamily = 17;
inline void DanmuWebPlayerConfig::clear_fontfamily() {
  _impl_.fontfamily_.ClearToEmpty();
}
inline const std::string& DanmuWebPlayerConfig::fontfamily() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DanmuWebPlayerConfig.fontfamily)
  return _internal_fontfamily();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DanmuWebPlayerConfig::set_fontfamily(ArgT0&& arg0, ArgT... args) {
 
 _impl_.fontfamily_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.DanmuWebPlayerConfig.fontfamily)
}
inline std::string* DanmuWebPlayerConfig::mutable_fontfamily() {
  std::string* _s = _internal_mutable_fontfamily();
  // @@protoc_insertion_point(field_mutable:bilibili.community.service.dm.v1.DanmuWebPlayerConfig.fontfamily)
  return _s;
}
inline const std::string& DanmuWebPlayerConfig::_internal_fontfamily() const {
  return _impl_.fontfamily_.Get();
}
inline void DanmuWebPlayerConfig::_internal_set_fontfamily(const std::string& value) {
  
  _impl_.fontfamily_.Set(value, GetArenaForAllocation());
}
inline std::string* DanmuWebPlayerConfig::_internal_mutable_fontfamily() {
  
  return _impl_.fontfamily_.Mutable(GetArenaForAllocation());
}
inline std::string* DanmuWebPlayerConfig::release_fontfamily() {
  // @@protoc_insertion_point(field_release:bilibili.community.service.dm.v1.DanmuWebPlayerConfig.fontfamily)
  return _impl_.fontfamily_.Release();
}
inline void DanmuWebPlayerConfig::set_allocated_fontfamily(std::string* fontfamily) {
  if (fontfamily != nullptr) {
    
  } else {
    
  }
  _impl_.fontfamily_.SetAllocated(fontfamily, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.fontfamily_.IsDefault()) {
    _impl_.fontfamily_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bilibili.community.service.dm.v1.DanmuWebPlayerConfig.fontfamily)
}

// bool bold = 18;
inline void DanmuWebPlayerConfig::clear_bold() {
  _impl_.bold_ = false;
}
inline bool DanmuWebPlayerConfig::_internal_bold() const {
  return _impl_.bold_;
}
inline bool DanmuWebPlayerConfig::bold() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DanmuWebPlayerConfig.bold)
  return _internal_bold();
}
inline void DanmuWebPlayerConfig::_internal_set_bold(bool value) {
  
  _impl_.bold_ = value;
}
inline void DanmuWebPlayerConfig::set_bold(bool value) {
  _internal_set_bold(value);
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.DanmuWebPlayerConfig.bold)
}

// int32 fontborder = 19;
inline void DanmuWebPlayerConfig::clear_fontborder() {
  _impl_.fontborder_ = 0;
}
inline int32_t DanmuWebPlayerConfig::_internal_fontborder() const {
  return _impl_.fontborder_;
}
inline int32_t DanmuWebPlayerConfig::fontborder() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DanmuWebPlayerConfig.fontborder)
  return _internal_fontborder();
}
inline void DanmuWebPlayerConfig::_internal_set_fontborder(int32_t value) {
  
  _impl_.fontborder_ = value;
}
inline void DanmuWebPlayerConfig::set_fontborder(int32_t value) {
  _internal_set_fontborder(value);
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.DanmuWebPlayerConfig.fontborder)
}

// string draw_type = 20;
inline void DanmuWebPlayerConfig::clear_draw_type() {
  _impl_.draw_type_.ClearToEmpty();
}
inline const std::string& DanmuWebPlayerConfig::draw_type() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DanmuWebPlayerConfig.draw_type)
  return _internal_draw_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DanmuWebPlayerConfig::set_draw_type(ArgT0&& arg0, ArgT... args) {
 
 _impl_.draw_type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.DanmuWebPlayerConfig.draw_type)
}
inline std::string* DanmuWebPlayerConfig::mutable_draw_type() {
  std::string* _s = _internal_mutable_draw_type();
  // @@protoc_insertion_point(field_mutable:bilibili.community.service.dm.v1.DanmuWebPlayerConfig.draw_type)
  return _s;
}
inline const std::string& DanmuWebPlayerConfig::_internal_draw_type() const {
  return _impl_.draw_type_.Get();
}
inline void DanmuWebPlayerConfig::_internal_set_draw_type(const std::string& value) {
  
  _impl_.draw_type_.Set(value, GetArenaForAllocation());
}
inline std::string* DanmuWebPlayerConfig::_internal_mutable_draw_type() {
  
  return _impl_.draw_type_.Mutable(GetArenaForAllocation());
}
inline std::string* DanmuWebPlayerConfig::release_draw_type() {
  // @@protoc_insertion_point(field_release:bilibili.community.service.dm.v1.DanmuWebPlayerConfig.draw_type)
  return _impl_.draw_type_.Release();
}
inline void DanmuWebPlayerConfig::set_allocated_draw_type(std::string* draw_type) {
  if (draw_type != nullptr) {
    
  } else {
    
  }
  _impl_.draw_type_.SetAllocated(draw_type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.draw_type_.IsDefault()) {
    _impl_.draw_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bilibili.community.service.dm.v1.DanmuWebPlayerConfig.draw_type)
}

// -------------------------------------------------------------------

// SubtitleItem

// int64 id = 1;
inline void SubtitleItem::clear_id() {
  _impl_.id_ = int64_t{0};
}
inline int64_t SubtitleItem::_internal_id() const {
  return _impl_.id_;
}
inline int64_t SubtitleItem::id() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.SubtitleItem.id)
  return _internal_id();
}
inline void SubtitleItem::_internal_set_id(int64_t value) {
  
  _impl_.id_ = value;
}
inline void SubtitleItem::set_id(int64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.SubtitleItem.id)
}

// string id_str = 2;
inline void SubtitleItem::clear_id_str() {
  _impl_.id_str_.ClearToEmpty();
}
inline const std::string& SubtitleItem::id_str() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.SubtitleItem.id_str)
  return _internal_id_str();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SubtitleItem::set_id_str(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_str_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.SubtitleItem.id_str)
}
inline std::string* SubtitleItem::mutable_id_str() {
  std::string* _s = _internal_mutable_id_str();
  // @@protoc_insertion_point(field_mutable:bilibili.community.service.dm.v1.SubtitleItem.id_str)
  return _s;
}
inline const std::string& SubtitleItem::_internal_id_str() const {
  return _impl_.id_str_.Get();
}
inline void SubtitleItem::_internal_set_id_str(const std::string& value) {
  
  _impl_.id_str_.Set(value, GetArenaForAllocation());
}
inline std::string* SubtitleItem::_internal_mutable_id_str() {
  
  return _impl_.id_str_.Mutable(GetArenaForAllocation());
}
inline std::string* SubtitleItem::release_id_str() {
  // @@protoc_insertion_point(field_release:bilibili.community.service.dm.v1.SubtitleItem.id_str)
  return _impl_.id_str_.Release();
}
inline void SubtitleItem::set_allocated_id_str(std::string* id_str) {
  if (id_str != nullptr) {
    
  } else {
    
  }
  _impl_.id_str_.SetAllocated(id_str, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_str_.IsDefault()) {
    _impl_.id_str_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bilibili.community.service.dm.v1.SubtitleItem.id_str)
}

// string lan = 3;
inline void SubtitleItem::clear_lan() {
  _impl_.lan_.ClearToEmpty();
}
inline const std::string& SubtitleItem::lan() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.SubtitleItem.lan)
  return _internal_lan();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SubtitleItem::set_lan(ArgT0&& arg0, ArgT... args) {
 
 _impl_.lan_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.SubtitleItem.lan)
}
inline std::string* SubtitleItem::mutable_lan() {
  std::string* _s = _internal_mutable_lan();
  // @@protoc_insertion_point(field_mutable:bilibili.community.service.dm.v1.SubtitleItem.lan)
  return _s;
}
inline const std::string& SubtitleItem::_internal_lan() const {
  return _impl_.lan_.Get();
}
inline void SubtitleItem::_internal_set_lan(const std::string& value) {
  
  _impl_.lan_.Set(value, GetArenaForAllocation());
}
inline std::string* SubtitleItem::_internal_mutable_lan() {
  
  return _impl_.lan_.Mutable(GetArenaForAllocation());
}
inline std::string* SubtitleItem::release_lan() {
  // @@protoc_insertion_point(field_release:bilibili.community.service.dm.v1.SubtitleItem.lan)
  return _impl_.lan_.Release();
}
inline void SubtitleItem::set_allocated_lan(std::string* lan) {
  if (lan != nullptr) {
    
  } else {
    
  }
  _impl_.lan_.SetAllocated(lan, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.lan_.IsDefault()) {
    _impl_.lan_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bilibili.community.service.dm.v1.SubtitleItem.lan)
}

// string lan_doc = 4;
inline void SubtitleItem::clear_lan_doc() {
  _impl_.lan_doc_.ClearToEmpty();
}
inline const std::string& SubtitleItem::lan_doc() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.SubtitleItem.lan_doc)
  return _internal_lan_doc();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SubtitleItem::set_lan_doc(ArgT0&& arg0, ArgT... args) {
 
 _impl_.lan_doc_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.SubtitleItem.lan_doc)
}
inline std::string* SubtitleItem::mutable_lan_doc() {
  std::string* _s = _internal_mutable_lan_doc();
  // @@protoc_insertion_point(field_mutable:bilibili.community.service.dm.v1.SubtitleItem.lan_doc)
  return _s;
}
inline const std::string& SubtitleItem::_internal_lan_doc() const {
  return _impl_.lan_doc_.Get();
}
inline void SubtitleItem::_internal_set_lan_doc(const std::string& value) {
  
  _impl_.lan_doc_.Set(value, GetArenaForAllocation());
}
inline std::string* SubtitleItem::_internal_mutable_lan_doc() {
  
  return _impl_.lan_doc_.Mutable(GetArenaForAllocation());
}
inline std::string* SubtitleItem::release_lan_doc() {
  // @@protoc_insertion_point(field_release:bilibili.community.service.dm.v1.SubtitleItem.lan_doc)
  return _impl_.lan_doc_.Release();
}
inline void SubtitleItem::set_allocated_lan_doc(std::string* lan_doc) {
  if (lan_doc != nullptr) {
    
  } else {
    
  }
  _impl_.lan_doc_.SetAllocated(lan_doc, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.lan_doc_.IsDefault()) {
    _impl_.lan_doc_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bilibili.community.service.dm.v1.SubtitleItem.lan_doc)
}

// string subtitle_url = 5;
inline void SubtitleItem::clear_subtitle_url() {
  _impl_.subtitle_url_.ClearToEmpty();
}
inline const std::string& SubtitleItem::subtitle_url() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.SubtitleItem.subtitle_url)
  return _internal_subtitle_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SubtitleItem::set_subtitle_url(ArgT0&& arg0, ArgT... args) {
 
 _impl_.subtitle_url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.SubtitleItem.subtitle_url)
}
inline std::string* SubtitleItem::mutable_subtitle_url() {
  std::string* _s = _internal_mutable_subtitle_url();
  // @@protoc_insertion_point(field_mutable:bilibili.community.service.dm.v1.SubtitleItem.subtitle_url)
  return _s;
}
inline const std::string& SubtitleItem::_internal_subtitle_url() const {
  return _impl_.subtitle_url_.Get();
}
inline void SubtitleItem::_internal_set_subtitle_url(const std::string& value) {
  
  _impl_.subtitle_url_.Set(value, GetArenaForAllocation());
}
inline std::string* SubtitleItem::_internal_mutable_subtitle_url() {
  
  return _impl_.subtitle_url_.Mutable(GetArenaForAllocation());
}
inline std::string* SubtitleItem::release_subtitle_url() {
  // @@protoc_insertion_point(field_release:bilibili.community.service.dm.v1.SubtitleItem.subtitle_url)
  return _impl_.subtitle_url_.Release();
}
inline void SubtitleItem::set_allocated_subtitle_url(std::string* subtitle_url) {
  if (subtitle_url != nullptr) {
    
  } else {
    
  }
  _impl_.subtitle_url_.SetAllocated(subtitle_url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.subtitle_url_.IsDefault()) {
    _impl_.subtitle_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bilibili.community.service.dm.v1.SubtitleItem.subtitle_url)
}

// .bilibili.community.service.dm.v1.UserInfo author = 6;
inline bool SubtitleItem::_internal_has_author() const {
  return this != internal_default_instance() && _impl_.author_ != nullptr;
}
inline bool SubtitleItem::has_author() const {
  return _internal_has_author();
}
inline void SubtitleItem::clear_author() {
  if (GetArenaForAllocation() == nullptr && _impl_.author_ != nullptr) {
    delete _impl_.author_;
  }
  _impl_.author_ = nullptr;
}
inline const ::bilibili::community::service::dm::v1::UserInfo& SubtitleItem::_internal_author() const {
  const ::bilibili::community::service::dm::v1::UserInfo* p = _impl_.author_;
  return p != nullptr ? *p : reinterpret_cast<const ::bilibili::community::service::dm::v1::UserInfo&>(
      ::bilibili::community::service::dm::v1::_UserInfo_default_instance_);
}
inline const ::bilibili::community::service::dm::v1::UserInfo& SubtitleItem::author() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.SubtitleItem.author)
  return _internal_author();
}
inline void SubtitleItem::unsafe_arena_set_allocated_author(
    ::bilibili::community::service::dm::v1::UserInfo* author) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.author_);
  }
  _impl_.author_ = author;
  if (author) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bilibili.community.service.dm.v1.SubtitleItem.author)
}
inline ::bilibili::community::service::dm::v1::UserInfo* SubtitleItem::release_author() {
  
  ::bilibili::community::service::dm::v1::UserInfo* temp = _impl_.author_;
  _impl_.author_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bilibili::community::service::dm::v1::UserInfo* SubtitleItem::unsafe_arena_release_author() {
  // @@protoc_insertion_point(field_release:bilibili.community.service.dm.v1.SubtitleItem.author)
  
  ::bilibili::community::service::dm::v1::UserInfo* temp = _impl_.author_;
  _impl_.author_ = nullptr;
  return temp;
}
inline ::bilibili::community::service::dm::v1::UserInfo* SubtitleItem::_internal_mutable_author() {
  
  if (_impl_.author_ == nullptr) {
    auto* p = CreateMaybeMessage<::bilibili::community::service::dm::v1::UserInfo>(GetArenaForAllocation());
    _impl_.author_ = p;
  }
  return _impl_.author_;
}
inline ::bilibili::community::service::dm::v1::UserInfo* SubtitleItem::mutable_author() {
  ::bilibili::community::service::dm::v1::UserInfo* _msg = _internal_mutable_author();
  // @@protoc_insertion_point(field_mutable:bilibili.community.service.dm.v1.SubtitleItem.author)
  return _msg;
}
inline void SubtitleItem::set_allocated_author(::bilibili::community::service::dm::v1::UserInfo* author) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.author_;
  }
  if (author) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(author);
    if (message_arena != submessage_arena) {
      author = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, author, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.author_ = author;
  // @@protoc_insertion_point(field_set_allocated:bilibili.community.service.dm.v1.SubtitleItem.author)
}

// -------------------------------------------------------------------

// UserInfo

// int64 mid = 1;
inline void UserInfo::clear_mid() {
  _impl_.mid_ = int64_t{0};
}
inline int64_t UserInfo::_internal_mid() const {
  return _impl_.mid_;
}
inline int64_t UserInfo::mid() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.UserInfo.mid)
  return _internal_mid();
}
inline void UserInfo::_internal_set_mid(int64_t value) {
  
  _impl_.mid_ = value;
}
inline void UserInfo::set_mid(int64_t value) {
  _internal_set_mid(value);
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.UserInfo.mid)
}

// string name = 2;
inline void UserInfo::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& UserInfo::name() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.UserInfo.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserInfo::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.UserInfo.name)
}
inline std::string* UserInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:bilibili.community.service.dm.v1.UserInfo.name)
  return _s;
}
inline const std::string& UserInfo::_internal_name() const {
  return _impl_.name_.Get();
}
inline void UserInfo::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* UserInfo::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* UserInfo::release_name() {
  // @@protoc_insertion_point(field_release:bilibili.community.service.dm.v1.UserInfo.name)
  return _impl_.name_.Release();
}
inline void UserInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bilibili.community.service.dm.v1.UserInfo.name)
}

// string sex = 3;
inline void UserInfo::clear_sex() {
  _impl_.sex_.ClearToEmpty();
}
inline const std::string& UserInfo::sex() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.UserInfo.sex)
  return _internal_sex();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserInfo::set_sex(ArgT0&& arg0, ArgT... args) {
 
 _impl_.sex_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.UserInfo.sex)
}
inline std::string* UserInfo::mutable_sex() {
  std::string* _s = _internal_mutable_sex();
  // @@protoc_insertion_point(field_mutable:bilibili.community.service.dm.v1.UserInfo.sex)
  return _s;
}
inline const std::string& UserInfo::_internal_sex() const {
  return _impl_.sex_.Get();
}
inline void UserInfo::_internal_set_sex(const std::string& value) {
  
  _impl_.sex_.Set(value, GetArenaForAllocation());
}
inline std::string* UserInfo::_internal_mutable_sex() {
  
  return _impl_.sex_.Mutable(GetArenaForAllocation());
}
inline std::string* UserInfo::release_sex() {
  // @@protoc_insertion_point(field_release:bilibili.community.service.dm.v1.UserInfo.sex)
  return _impl_.sex_.Release();
}
inline void UserInfo::set_allocated_sex(std::string* sex) {
  if (sex != nullptr) {
    
  } else {
    
  }
  _impl_.sex_.SetAllocated(sex, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sex_.IsDefault()) {
    _impl_.sex_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bilibili.community.service.dm.v1.UserInfo.sex)
}

// string face = 4;
inline void UserInfo::clear_face() {
  _impl_.face_.ClearToEmpty();
}
inline const std::string& UserInfo::face() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.UserInfo.face)
  return _internal_face();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserInfo::set_face(ArgT0&& arg0, ArgT... args) {
 
 _impl_.face_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.UserInfo.face)
}
inline std::string* UserInfo::mutable_face() {
  std::string* _s = _internal_mutable_face();
  // @@protoc_insertion_point(field_mutable:bilibili.community.service.dm.v1.UserInfo.face)
  return _s;
}
inline const std::string& UserInfo::_internal_face() const {
  return _impl_.face_.Get();
}
inline void UserInfo::_internal_set_face(const std::string& value) {
  
  _impl_.face_.Set(value, GetArenaForAllocation());
}
inline std::string* UserInfo::_internal_mutable_face() {
  
  return _impl_.face_.Mutable(GetArenaForAllocation());
}
inline std::string* UserInfo::release_face() {
  // @@protoc_insertion_point(field_release:bilibili.community.service.dm.v1.UserInfo.face)
  return _impl_.face_.Release();
}
inline void UserInfo::set_allocated_face(std::string* face) {
  if (face != nullptr) {
    
  } else {
    
  }
  _impl_.face_.SetAllocated(face, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.face_.IsDefault()) {
    _impl_.face_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bilibili.community.service.dm.v1.UserInfo.face)
}

// string sign = 5;
inline void UserInfo::clear_sign() {
  _impl_.sign_.ClearToEmpty();
}
inline const std::string& UserInfo::sign() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.UserInfo.sign)
  return _internal_sign();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserInfo::set_sign(ArgT0&& arg0, ArgT... args) {
 
 _impl_.sign_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.UserInfo.sign)
}
inline std::string* UserInfo::mutable_sign() {
  std::string* _s = _internal_mutable_sign();
  // @@protoc_insertion_point(field_mutable:bilibili.community.service.dm.v1.UserInfo.sign)
  return _s;
}
inline const std::string& UserInfo::_internal_sign() const {
  return _impl_.sign_.Get();
}
inline void UserInfo::_internal_set_sign(const std::string& value) {
  
  _impl_.sign_.Set(value, GetArenaForAllocation());
}
inline std::string* UserInfo::_internal_mutable_sign() {
  
  return _impl_.sign_.Mutable(GetArenaForAllocation());
}
inline std::string* UserInfo::release_sign() {
  // @@protoc_insertion_point(field_release:bilibili.community.service.dm.v1.UserInfo.sign)
  return _impl_.sign_.Release();
}
inline void UserInfo::set_allocated_sign(std::string* sign) {
  if (sign != nullptr) {
    
  } else {
    
  }
  _impl_.sign_.SetAllocated(sign, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sign_.IsDefault()) {
    _impl_.sign_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bilibili.community.service.dm.v1.UserInfo.sign)
}

// int32 rank = 6;
inline void UserInfo::clear_rank() {
  _impl_.rank_ = 0;
}
inline int32_t UserInfo::_internal_rank() const {
  return _impl_.rank_;
}
inline int32_t UserInfo::rank() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.UserInfo.rank)
  return _internal_rank();
}
inline void UserInfo::_internal_set_rank(int32_t value) {
  
  _impl_.rank_ = value;
}
inline void UserInfo::set_rank(int32_t value) {
  _internal_set_rank(value);
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.UserInfo.rank)
}

// -------------------------------------------------------------------

// DanmakuElem

// int64 id = 1;
inline void DanmakuElem::clear_id() {
  _impl_.id_ = int64_t{0};
}
inline int64_t DanmakuElem::_internal_id() const {
  return _impl_.id_;
}
inline int64_t DanmakuElem::id() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DanmakuElem.id)
  return _internal_id();
}
inline void DanmakuElem::_internal_set_id(int64_t value) {
  
  _impl_.id_ = value;
}
inline void DanmakuElem::set_id(int64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.DanmakuElem.id)
}

// int32 progress = 2;
inline void DanmakuElem::clear_progress() {
  _impl_.progress_ = 0;
}
inline int32_t DanmakuElem::_internal_progress() const {
  return _impl_.progress_;
}
inline int32_t DanmakuElem::progress() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DanmakuElem.progress)
  return _internal_progress();
}
inline void DanmakuElem::_internal_set_progress(int32_t value) {
  
  _impl_.progress_ = value;
}
inline void DanmakuElem::set_progress(int32_t value) {
  _internal_set_progress(value);
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.DanmakuElem.progress)
}

// int32 mode = 3;
inline void DanmakuElem::clear_mode() {
  _impl_.mode_ = 0;
}
inline int32_t DanmakuElem::_internal_mode() const {
  return _impl_.mode_;
}
inline int32_t DanmakuElem::mode() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DanmakuElem.mode)
  return _internal_mode();
}
inline void DanmakuElem::_internal_set_mode(int32_t value) {
  
  _impl_.mode_ = value;
}
inline void DanmakuElem::set_mode(int32_t value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.DanmakuElem.mode)
}

// int32 fontsize = 4;
inline void DanmakuElem::clear_fontsize() {
  _impl_.fontsize_ = 0;
}
inline int32_t DanmakuElem::_internal_fontsize() const {
  return _impl_.fontsize_;
}
inline int32_t DanmakuElem::fontsize() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DanmakuElem.fontsize)
  return _internal_fontsize();
}
inline void DanmakuElem::_internal_set_fontsize(int32_t value) {
  
  _impl_.fontsize_ = value;
}
inline void DanmakuElem::set_fontsize(int32_t value) {
  _internal_set_fontsize(value);
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.DanmakuElem.fontsize)
}

// uint32 color = 5;
inline void DanmakuElem::clear_color() {
  _impl_.color_ = 0u;
}
inline uint32_t DanmakuElem::_internal_color() const {
  return _impl_.color_;
}
inline uint32_t DanmakuElem::color() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DanmakuElem.color)
  return _internal_color();
}
inline void DanmakuElem::_internal_set_color(uint32_t value) {
  
  _impl_.color_ = value;
}
inline void DanmakuElem::set_color(uint32_t value) {
  _internal_set_color(value);
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.DanmakuElem.color)
}

// string midHash = 6;
inline void DanmakuElem::clear_midhash() {
  _impl_.midhash_.ClearToEmpty();
}
inline const std::string& DanmakuElem::midhash() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DanmakuElem.midHash)
  return _internal_midhash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DanmakuElem::set_midhash(ArgT0&& arg0, ArgT... args) {
 
 _impl_.midhash_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.DanmakuElem.midHash)
}
inline std::string* DanmakuElem::mutable_midhash() {
  std::string* _s = _internal_mutable_midhash();
  // @@protoc_insertion_point(field_mutable:bilibili.community.service.dm.v1.DanmakuElem.midHash)
  return _s;
}
inline const std::string& DanmakuElem::_internal_midhash() const {
  return _impl_.midhash_.Get();
}
inline void DanmakuElem::_internal_set_midhash(const std::string& value) {
  
  _impl_.midhash_.Set(value, GetArenaForAllocation());
}
inline std::string* DanmakuElem::_internal_mutable_midhash() {
  
  return _impl_.midhash_.Mutable(GetArenaForAllocation());
}
inline std::string* DanmakuElem::release_midhash() {
  // @@protoc_insertion_point(field_release:bilibili.community.service.dm.v1.DanmakuElem.midHash)
  return _impl_.midhash_.Release();
}
inline void DanmakuElem::set_allocated_midhash(std::string* midhash) {
  if (midhash != nullptr) {
    
  } else {
    
  }
  _impl_.midhash_.SetAllocated(midhash, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.midhash_.IsDefault()) {
    _impl_.midhash_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bilibili.community.service.dm.v1.DanmakuElem.midHash)
}

// string content = 7;
inline void DanmakuElem::clear_content() {
  _impl_.content_.ClearToEmpty();
}
inline const std::string& DanmakuElem::content() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DanmakuElem.content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DanmakuElem::set_content(ArgT0&& arg0, ArgT... args) {
 
 _impl_.content_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.DanmakuElem.content)
}
inline std::string* DanmakuElem::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:bilibili.community.service.dm.v1.DanmakuElem.content)
  return _s;
}
inline const std::string& DanmakuElem::_internal_content() const {
  return _impl_.content_.Get();
}
inline void DanmakuElem::_internal_set_content(const std::string& value) {
  
  _impl_.content_.Set(value, GetArenaForAllocation());
}
inline std::string* DanmakuElem::_internal_mutable_content() {
  
  return _impl_.content_.Mutable(GetArenaForAllocation());
}
inline std::string* DanmakuElem::release_content() {
  // @@protoc_insertion_point(field_release:bilibili.community.service.dm.v1.DanmakuElem.content)
  return _impl_.content_.Release();
}
inline void DanmakuElem::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  _impl_.content_.SetAllocated(content, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bilibili.community.service.dm.v1.DanmakuElem.content)
}

// int64 ctime = 8;
inline void DanmakuElem::clear_ctime() {
  _impl_.ctime_ = int64_t{0};
}
inline int64_t DanmakuElem::_internal_ctime() const {
  return _impl_.ctime_;
}
inline int64_t DanmakuElem::ctime() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DanmakuElem.ctime)
  return _internal_ctime();
}
inline void DanmakuElem::_internal_set_ctime(int64_t value) {
  
  _impl_.ctime_ = value;
}
inline void DanmakuElem::set_ctime(int64_t value) {
  _internal_set_ctime(value);
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.DanmakuElem.ctime)
}

// int32 weight = 9;
inline void DanmakuElem::clear_weight() {
  _impl_.weight_ = 0;
}
inline int32_t DanmakuElem::_internal_weight() const {
  return _impl_.weight_;
}
inline int32_t DanmakuElem::weight() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DanmakuElem.weight)
  return _internal_weight();
}
inline void DanmakuElem::_internal_set_weight(int32_t value) {
  
  _impl_.weight_ = value;
}
inline void DanmakuElem::set_weight(int32_t value) {
  _internal_set_weight(value);
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.DanmakuElem.weight)
}

// string action = 10;
inline void DanmakuElem::clear_action() {
  _impl_.action_.ClearToEmpty();
}
inline const std::string& DanmakuElem::action() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DanmakuElem.action)
  return _internal_action();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DanmakuElem::set_action(ArgT0&& arg0, ArgT... args) {
 
 _impl_.action_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.DanmakuElem.action)
}
inline std::string* DanmakuElem::mutable_action() {
  std::string* _s = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:bilibili.community.service.dm.v1.DanmakuElem.action)
  return _s;
}
inline const std::string& DanmakuElem::_internal_action() const {
  return _impl_.action_.Get();
}
inline void DanmakuElem::_internal_set_action(const std::string& value) {
  
  _impl_.action_.Set(value, GetArenaForAllocation());
}
inline std::string* DanmakuElem::_internal_mutable_action() {
  
  return _impl_.action_.Mutable(GetArenaForAllocation());
}
inline std::string* DanmakuElem::release_action() {
  // @@protoc_insertion_point(field_release:bilibili.community.service.dm.v1.DanmakuElem.action)
  return _impl_.action_.Release();
}
inline void DanmakuElem::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  _impl_.action_.SetAllocated(action, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.action_.IsDefault()) {
    _impl_.action_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bilibili.community.service.dm.v1.DanmakuElem.action)
}

// int32 pool = 11;
inline void DanmakuElem::clear_pool() {
  _impl_.pool_ = 0;
}
inline int32_t DanmakuElem::_internal_pool() const {
  return _impl_.pool_;
}
inline int32_t DanmakuElem::pool() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DanmakuElem.pool)
  return _internal_pool();
}
inline void DanmakuElem::_internal_set_pool(int32_t value) {
  
  _impl_.pool_ = value;
}
inline void DanmakuElem::set_pool(int32_t value) {
  _internal_set_pool(value);
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.DanmakuElem.pool)
}

// string idStr = 12;
inline void DanmakuElem::clear_idstr() {
  _impl_.idstr_.ClearToEmpty();
}
inline const std::string& DanmakuElem::idstr() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DanmakuElem.idStr)
  return _internal_idstr();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DanmakuElem::set_idstr(ArgT0&& arg0, ArgT... args) {
 
 _impl_.idstr_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.DanmakuElem.idStr)
}
inline std::string* DanmakuElem::mutable_idstr() {
  std::string* _s = _internal_mutable_idstr();
  // @@protoc_insertion_point(field_mutable:bilibili.community.service.dm.v1.DanmakuElem.idStr)
  return _s;
}
inline const std::string& DanmakuElem::_internal_idstr() const {
  return _impl_.idstr_.Get();
}
inline void DanmakuElem::_internal_set_idstr(const std::string& value) {
  
  _impl_.idstr_.Set(value, GetArenaForAllocation());
}
inline std::string* DanmakuElem::_internal_mutable_idstr() {
  
  return _impl_.idstr_.Mutable(GetArenaForAllocation());
}
inline std::string* DanmakuElem::release_idstr() {
  // @@protoc_insertion_point(field_release:bilibili.community.service.dm.v1.DanmakuElem.idStr)
  return _impl_.idstr_.Release();
}
inline void DanmakuElem::set_allocated_idstr(std::string* idstr) {
  if (idstr != nullptr) {
    
  } else {
    
  }
  _impl_.idstr_.SetAllocated(idstr, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.idstr_.IsDefault()) {
    _impl_.idstr_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bilibili.community.service.dm.v1.DanmakuElem.idStr)
}

// int32 attr = 13;
inline void DanmakuElem::clear_attr() {
  _impl_.attr_ = 0;
}
inline int32_t DanmakuElem::_internal_attr() const {
  return _impl_.attr_;
}
inline int32_t DanmakuElem::attr() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DanmakuElem.attr)
  return _internal_attr();
}
inline void DanmakuElem::_internal_set_attr(int32_t value) {
  
  _impl_.attr_ = value;
}
inline void DanmakuElem::set_attr(int32_t value) {
  _internal_set_attr(value);
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.DanmakuElem.attr)
}

// -------------------------------------------------------------------

// DmPlayerConfigReq

// int64 ts = 1;
inline void DmPlayerConfigReq::clear_ts() {
  _impl_.ts_ = int64_t{0};
}
inline int64_t DmPlayerConfigReq::_internal_ts() const {
  return _impl_.ts_;
}
inline int64_t DmPlayerConfigReq::ts() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DmPlayerConfigReq.ts)
  return _internal_ts();
}
inline void DmPlayerConfigReq::_internal_set_ts(int64_t value) {
  
  _impl_.ts_ = value;
}
inline void DmPlayerConfigReq::set_ts(int64_t value) {
  _internal_set_ts(value);
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.DmPlayerConfigReq.ts)
}

// .bilibili.community.service.dm.v1.PlayerDanmakuSwitch switch = 2;
inline bool DmPlayerConfigReq::_internal_has_switch_() const {
  return this != internal_default_instance() && _impl_.switch__ != nullptr;
}
inline bool DmPlayerConfigReq::has_switch_() const {
  return _internal_has_switch_();
}
inline void DmPlayerConfigReq::clear_switch_() {
  if (GetArenaForAllocation() == nullptr && _impl_.switch__ != nullptr) {
    delete _impl_.switch__;
  }
  _impl_.switch__ = nullptr;
}
inline const ::bilibili::community::service::dm::v1::PlayerDanmakuSwitch& DmPlayerConfigReq::_internal_switch_() const {
  const ::bilibili::community::service::dm::v1::PlayerDanmakuSwitch* p = _impl_.switch__;
  return p != nullptr ? *p : reinterpret_cast<const ::bilibili::community::service::dm::v1::PlayerDanmakuSwitch&>(
      ::bilibili::community::service::dm::v1::_PlayerDanmakuSwitch_default_instance_);
}
inline const ::bilibili::community::service::dm::v1::PlayerDanmakuSwitch& DmPlayerConfigReq::switch_() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DmPlayerConfigReq.switch)
  return _internal_switch_();
}
inline void DmPlayerConfigReq::unsafe_arena_set_allocated_switch_(
    ::bilibili::community::service::dm::v1::PlayerDanmakuSwitch* switch_) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.switch__);
  }
  _impl_.switch__ = switch_;
  if (switch_) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bilibili.community.service.dm.v1.DmPlayerConfigReq.switch)
}
inline ::bilibili::community::service::dm::v1::PlayerDanmakuSwitch* DmPlayerConfigReq::release_switch_() {
  
  ::bilibili::community::service::dm::v1::PlayerDanmakuSwitch* temp = _impl_.switch__;
  _impl_.switch__ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bilibili::community::service::dm::v1::PlayerDanmakuSwitch* DmPlayerConfigReq::unsafe_arena_release_switch_() {
  // @@protoc_insertion_point(field_release:bilibili.community.service.dm.v1.DmPlayerConfigReq.switch)
  
  ::bilibili::community::service::dm::v1::PlayerDanmakuSwitch* temp = _impl_.switch__;
  _impl_.switch__ = nullptr;
  return temp;
}
inline ::bilibili::community::service::dm::v1::PlayerDanmakuSwitch* DmPlayerConfigReq::_internal_mutable_switch_() {
  
  if (_impl_.switch__ == nullptr) {
    auto* p = CreateMaybeMessage<::bilibili::community::service::dm::v1::PlayerDanmakuSwitch>(GetArenaForAllocation());
    _impl_.switch__ = p;
  }
  return _impl_.switch__;
}
inline ::bilibili::community::service::dm::v1::PlayerDanmakuSwitch* DmPlayerConfigReq::mutable_switch_() {
  ::bilibili::community::service::dm::v1::PlayerDanmakuSwitch* _msg = _internal_mutable_switch_();
  // @@protoc_insertion_point(field_mutable:bilibili.community.service.dm.v1.DmPlayerConfigReq.switch)
  return _msg;
}
inline void DmPlayerConfigReq::set_allocated_switch_(::bilibili::community::service::dm::v1::PlayerDanmakuSwitch* switch_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.switch__;
  }
  if (switch_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(switch_);
    if (message_arena != submessage_arena) {
      switch_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, switch_, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.switch__ = switch_;
  // @@protoc_insertion_point(field_set_allocated:bilibili.community.service.dm.v1.DmPlayerConfigReq.switch)
}

// .bilibili.community.service.dm.v1.PlayerDanmakuSwitchSave switch_save = 3;
inline bool DmPlayerConfigReq::_internal_has_switch_save() const {
  return this != internal_default_instance() && _impl_.switch_save_ != nullptr;
}
inline bool DmPlayerConfigReq::has_switch_save() const {
  return _internal_has_switch_save();
}
inline void DmPlayerConfigReq::clear_switch_save() {
  if (GetArenaForAllocation() == nullptr && _impl_.switch_save_ != nullptr) {
    delete _impl_.switch_save_;
  }
  _impl_.switch_save_ = nullptr;
}
inline const ::bilibili::community::service::dm::v1::PlayerDanmakuSwitchSave& DmPlayerConfigReq::_internal_switch_save() const {
  const ::bilibili::community::service::dm::v1::PlayerDanmakuSwitchSave* p = _impl_.switch_save_;
  return p != nullptr ? *p : reinterpret_cast<const ::bilibili::community::service::dm::v1::PlayerDanmakuSwitchSave&>(
      ::bilibili::community::service::dm::v1::_PlayerDanmakuSwitchSave_default_instance_);
}
inline const ::bilibili::community::service::dm::v1::PlayerDanmakuSwitchSave& DmPlayerConfigReq::switch_save() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DmPlayerConfigReq.switch_save)
  return _internal_switch_save();
}
inline void DmPlayerConfigReq::unsafe_arena_set_allocated_switch_save(
    ::bilibili::community::service::dm::v1::PlayerDanmakuSwitchSave* switch_save) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.switch_save_);
  }
  _impl_.switch_save_ = switch_save;
  if (switch_save) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bilibili.community.service.dm.v1.DmPlayerConfigReq.switch_save)
}
inline ::bilibili::community::service::dm::v1::PlayerDanmakuSwitchSave* DmPlayerConfigReq::release_switch_save() {
  
  ::bilibili::community::service::dm::v1::PlayerDanmakuSwitchSave* temp = _impl_.switch_save_;
  _impl_.switch_save_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bilibili::community::service::dm::v1::PlayerDanmakuSwitchSave* DmPlayerConfigReq::unsafe_arena_release_switch_save() {
  // @@protoc_insertion_point(field_release:bilibili.community.service.dm.v1.DmPlayerConfigReq.switch_save)
  
  ::bilibili::community::service::dm::v1::PlayerDanmakuSwitchSave* temp = _impl_.switch_save_;
  _impl_.switch_save_ = nullptr;
  return temp;
}
inline ::bilibili::community::service::dm::v1::PlayerDanmakuSwitchSave* DmPlayerConfigReq::_internal_mutable_switch_save() {
  
  if (_impl_.switch_save_ == nullptr) {
    auto* p = CreateMaybeMessage<::bilibili::community::service::dm::v1::PlayerDanmakuSwitchSave>(GetArenaForAllocation());
    _impl_.switch_save_ = p;
  }
  return _impl_.switch_save_;
}
inline ::bilibili::community::service::dm::v1::PlayerDanmakuSwitchSave* DmPlayerConfigReq::mutable_switch_save() {
  ::bilibili::community::service::dm::v1::PlayerDanmakuSwitchSave* _msg = _internal_mutable_switch_save();
  // @@protoc_insertion_point(field_mutable:bilibili.community.service.dm.v1.DmPlayerConfigReq.switch_save)
  return _msg;
}
inline void DmPlayerConfigReq::set_allocated_switch_save(::bilibili::community::service::dm::v1::PlayerDanmakuSwitchSave* switch_save) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.switch_save_;
  }
  if (switch_save) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(switch_save);
    if (message_arena != submessage_arena) {
      switch_save = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, switch_save, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.switch_save_ = switch_save;
  // @@protoc_insertion_point(field_set_allocated:bilibili.community.service.dm.v1.DmPlayerConfigReq.switch_save)
}

// .bilibili.community.service.dm.v1.PlayerDanmakuUseDefaultConfig use_default_config = 4;
inline bool DmPlayerConfigReq::_internal_has_use_default_config() const {
  return this != internal_default_instance() && _impl_.use_default_config_ != nullptr;
}
inline bool DmPlayerConfigReq::has_use_default_config() const {
  return _internal_has_use_default_config();
}
inline void DmPlayerConfigReq::clear_use_default_config() {
  if (GetArenaForAllocation() == nullptr && _impl_.use_default_config_ != nullptr) {
    delete _impl_.use_default_config_;
  }
  _impl_.use_default_config_ = nullptr;
}
inline const ::bilibili::community::service::dm::v1::PlayerDanmakuUseDefaultConfig& DmPlayerConfigReq::_internal_use_default_config() const {
  const ::bilibili::community::service::dm::v1::PlayerDanmakuUseDefaultConfig* p = _impl_.use_default_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::bilibili::community::service::dm::v1::PlayerDanmakuUseDefaultConfig&>(
      ::bilibili::community::service::dm::v1::_PlayerDanmakuUseDefaultConfig_default_instance_);
}
inline const ::bilibili::community::service::dm::v1::PlayerDanmakuUseDefaultConfig& DmPlayerConfigReq::use_default_config() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DmPlayerConfigReq.use_default_config)
  return _internal_use_default_config();
}
inline void DmPlayerConfigReq::unsafe_arena_set_allocated_use_default_config(
    ::bilibili::community::service::dm::v1::PlayerDanmakuUseDefaultConfig* use_default_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.use_default_config_);
  }
  _impl_.use_default_config_ = use_default_config;
  if (use_default_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bilibili.community.service.dm.v1.DmPlayerConfigReq.use_default_config)
}
inline ::bilibili::community::service::dm::v1::PlayerDanmakuUseDefaultConfig* DmPlayerConfigReq::release_use_default_config() {
  
  ::bilibili::community::service::dm::v1::PlayerDanmakuUseDefaultConfig* temp = _impl_.use_default_config_;
  _impl_.use_default_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bilibili::community::service::dm::v1::PlayerDanmakuUseDefaultConfig* DmPlayerConfigReq::unsafe_arena_release_use_default_config() {
  // @@protoc_insertion_point(field_release:bilibili.community.service.dm.v1.DmPlayerConfigReq.use_default_config)
  
  ::bilibili::community::service::dm::v1::PlayerDanmakuUseDefaultConfig* temp = _impl_.use_default_config_;
  _impl_.use_default_config_ = nullptr;
  return temp;
}
inline ::bilibili::community::service::dm::v1::PlayerDanmakuUseDefaultConfig* DmPlayerConfigReq::_internal_mutable_use_default_config() {
  
  if (_impl_.use_default_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::bilibili::community::service::dm::v1::PlayerDanmakuUseDefaultConfig>(GetArenaForAllocation());
    _impl_.use_default_config_ = p;
  }
  return _impl_.use_default_config_;
}
inline ::bilibili::community::service::dm::v1::PlayerDanmakuUseDefaultConfig* DmPlayerConfigReq::mutable_use_default_config() {
  ::bilibili::community::service::dm::v1::PlayerDanmakuUseDefaultConfig* _msg = _internal_mutable_use_default_config();
  // @@protoc_insertion_point(field_mutable:bilibili.community.service.dm.v1.DmPlayerConfigReq.use_default_config)
  return _msg;
}
inline void DmPlayerConfigReq::set_allocated_use_default_config(::bilibili::community::service::dm::v1::PlayerDanmakuUseDefaultConfig* use_default_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.use_default_config_;
  }
  if (use_default_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(use_default_config);
    if (message_arena != submessage_arena) {
      use_default_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, use_default_config, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.use_default_config_ = use_default_config;
  // @@protoc_insertion_point(field_set_allocated:bilibili.community.service.dm.v1.DmPlayerConfigReq.use_default_config)
}

// .bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedSwitch ai_recommended_switch = 5;
inline bool DmPlayerConfigReq::_internal_has_ai_recommended_switch() const {
  return this != internal_default_instance() && _impl_.ai_recommended_switch_ != nullptr;
}
inline bool DmPlayerConfigReq::has_ai_recommended_switch() const {
  return _internal_has_ai_recommended_switch();
}
inline void DmPlayerConfigReq::clear_ai_recommended_switch() {
  if (GetArenaForAllocation() == nullptr && _impl_.ai_recommended_switch_ != nullptr) {
    delete _impl_.ai_recommended_switch_;
  }
  _impl_.ai_recommended_switch_ = nullptr;
}
inline const ::bilibili::community::service::dm::v1::PlayerDanmakuAiRecommendedSwitch& DmPlayerConfigReq::_internal_ai_recommended_switch() const {
  const ::bilibili::community::service::dm::v1::PlayerDanmakuAiRecommendedSwitch* p = _impl_.ai_recommended_switch_;
  return p != nullptr ? *p : reinterpret_cast<const ::bilibili::community::service::dm::v1::PlayerDanmakuAiRecommendedSwitch&>(
      ::bilibili::community::service::dm::v1::_PlayerDanmakuAiRecommendedSwitch_default_instance_);
}
inline const ::bilibili::community::service::dm::v1::PlayerDanmakuAiRecommendedSwitch& DmPlayerConfigReq::ai_recommended_switch() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DmPlayerConfigReq.ai_recommended_switch)
  return _internal_ai_recommended_switch();
}
inline void DmPlayerConfigReq::unsafe_arena_set_allocated_ai_recommended_switch(
    ::bilibili::community::service::dm::v1::PlayerDanmakuAiRecommendedSwitch* ai_recommended_switch) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ai_recommended_switch_);
  }
  _impl_.ai_recommended_switch_ = ai_recommended_switch;
  if (ai_recommended_switch) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bilibili.community.service.dm.v1.DmPlayerConfigReq.ai_recommended_switch)
}
inline ::bilibili::community::service::dm::v1::PlayerDanmakuAiRecommendedSwitch* DmPlayerConfigReq::release_ai_recommended_switch() {
  
  ::bilibili::community::service::dm::v1::PlayerDanmakuAiRecommendedSwitch* temp = _impl_.ai_recommended_switch_;
  _impl_.ai_recommended_switch_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bilibili::community::service::dm::v1::PlayerDanmakuAiRecommendedSwitch* DmPlayerConfigReq::unsafe_arena_release_ai_recommended_switch() {
  // @@protoc_insertion_point(field_release:bilibili.community.service.dm.v1.DmPlayerConfigReq.ai_recommended_switch)
  
  ::bilibili::community::service::dm::v1::PlayerDanmakuAiRecommendedSwitch* temp = _impl_.ai_recommended_switch_;
  _impl_.ai_recommended_switch_ = nullptr;
  return temp;
}
inline ::bilibili::community::service::dm::v1::PlayerDanmakuAiRecommendedSwitch* DmPlayerConfigReq::_internal_mutable_ai_recommended_switch() {
  
  if (_impl_.ai_recommended_switch_ == nullptr) {
    auto* p = CreateMaybeMessage<::bilibili::community::service::dm::v1::PlayerDanmakuAiRecommendedSwitch>(GetArenaForAllocation());
    _impl_.ai_recommended_switch_ = p;
  }
  return _impl_.ai_recommended_switch_;
}
inline ::bilibili::community::service::dm::v1::PlayerDanmakuAiRecommendedSwitch* DmPlayerConfigReq::mutable_ai_recommended_switch() {
  ::bilibili::community::service::dm::v1::PlayerDanmakuAiRecommendedSwitch* _msg = _internal_mutable_ai_recommended_switch();
  // @@protoc_insertion_point(field_mutable:bilibili.community.service.dm.v1.DmPlayerConfigReq.ai_recommended_switch)
  return _msg;
}
inline void DmPlayerConfigReq::set_allocated_ai_recommended_switch(::bilibili::community::service::dm::v1::PlayerDanmakuAiRecommendedSwitch* ai_recommended_switch) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.ai_recommended_switch_;
  }
  if (ai_recommended_switch) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(ai_recommended_switch);
    if (message_arena != submessage_arena) {
      ai_recommended_switch = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ai_recommended_switch, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.ai_recommended_switch_ = ai_recommended_switch;
  // @@protoc_insertion_point(field_set_allocated:bilibili.community.service.dm.v1.DmPlayerConfigReq.ai_recommended_switch)
}

// .bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedLevel ai_recommended_level = 6;
inline bool DmPlayerConfigReq::_internal_has_ai_recommended_level() const {
  return this != internal_default_instance() && _impl_.ai_recommended_level_ != nullptr;
}
inline bool DmPlayerConfigReq::has_ai_recommended_level() const {
  return _internal_has_ai_recommended_level();
}
inline void DmPlayerConfigReq::clear_ai_recommended_level() {
  if (GetArenaForAllocation() == nullptr && _impl_.ai_recommended_level_ != nullptr) {
    delete _impl_.ai_recommended_level_;
  }
  _impl_.ai_recommended_level_ = nullptr;
}
inline const ::bilibili::community::service::dm::v1::PlayerDanmakuAiRecommendedLevel& DmPlayerConfigReq::_internal_ai_recommended_level() const {
  const ::bilibili::community::service::dm::v1::PlayerDanmakuAiRecommendedLevel* p = _impl_.ai_recommended_level_;
  return p != nullptr ? *p : reinterpret_cast<const ::bilibili::community::service::dm::v1::PlayerDanmakuAiRecommendedLevel&>(
      ::bilibili::community::service::dm::v1::_PlayerDanmakuAiRecommendedLevel_default_instance_);
}
inline const ::bilibili::community::service::dm::v1::PlayerDanmakuAiRecommendedLevel& DmPlayerConfigReq::ai_recommended_level() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DmPlayerConfigReq.ai_recommended_level)
  return _internal_ai_recommended_level();
}
inline void DmPlayerConfigReq::unsafe_arena_set_allocated_ai_recommended_level(
    ::bilibili::community::service::dm::v1::PlayerDanmakuAiRecommendedLevel* ai_recommended_level) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ai_recommended_level_);
  }
  _impl_.ai_recommended_level_ = ai_recommended_level;
  if (ai_recommended_level) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bilibili.community.service.dm.v1.DmPlayerConfigReq.ai_recommended_level)
}
inline ::bilibili::community::service::dm::v1::PlayerDanmakuAiRecommendedLevel* DmPlayerConfigReq::release_ai_recommended_level() {
  
  ::bilibili::community::service::dm::v1::PlayerDanmakuAiRecommendedLevel* temp = _impl_.ai_recommended_level_;
  _impl_.ai_recommended_level_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bilibili::community::service::dm::v1::PlayerDanmakuAiRecommendedLevel* DmPlayerConfigReq::unsafe_arena_release_ai_recommended_level() {
  // @@protoc_insertion_point(field_release:bilibili.community.service.dm.v1.DmPlayerConfigReq.ai_recommended_level)
  
  ::bilibili::community::service::dm::v1::PlayerDanmakuAiRecommendedLevel* temp = _impl_.ai_recommended_level_;
  _impl_.ai_recommended_level_ = nullptr;
  return temp;
}
inline ::bilibili::community::service::dm::v1::PlayerDanmakuAiRecommendedLevel* DmPlayerConfigReq::_internal_mutable_ai_recommended_level() {
  
  if (_impl_.ai_recommended_level_ == nullptr) {
    auto* p = CreateMaybeMessage<::bilibili::community::service::dm::v1::PlayerDanmakuAiRecommendedLevel>(GetArenaForAllocation());
    _impl_.ai_recommended_level_ = p;
  }
  return _impl_.ai_recommended_level_;
}
inline ::bilibili::community::service::dm::v1::PlayerDanmakuAiRecommendedLevel* DmPlayerConfigReq::mutable_ai_recommended_level() {
  ::bilibili::community::service::dm::v1::PlayerDanmakuAiRecommendedLevel* _msg = _internal_mutable_ai_recommended_level();
  // @@protoc_insertion_point(field_mutable:bilibili.community.service.dm.v1.DmPlayerConfigReq.ai_recommended_level)
  return _msg;
}
inline void DmPlayerConfigReq::set_allocated_ai_recommended_level(::bilibili::community::service::dm::v1::PlayerDanmakuAiRecommendedLevel* ai_recommended_level) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.ai_recommended_level_;
  }
  if (ai_recommended_level) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(ai_recommended_level);
    if (message_arena != submessage_arena) {
      ai_recommended_level = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ai_recommended_level, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.ai_recommended_level_ = ai_recommended_level;
  // @@protoc_insertion_point(field_set_allocated:bilibili.community.service.dm.v1.DmPlayerConfigReq.ai_recommended_level)
}

// .bilibili.community.service.dm.v1.PlayerDanmakuBlocktop blocktop = 7;
inline bool DmPlayerConfigReq::_internal_has_blocktop() const {
  return this != internal_default_instance() && _impl_.blocktop_ != nullptr;
}
inline bool DmPlayerConfigReq::has_blocktop() const {
  return _internal_has_blocktop();
}
inline void DmPlayerConfigReq::clear_blocktop() {
  if (GetArenaForAllocation() == nullptr && _impl_.blocktop_ != nullptr) {
    delete _impl_.blocktop_;
  }
  _impl_.blocktop_ = nullptr;
}
inline const ::bilibili::community::service::dm::v1::PlayerDanmakuBlocktop& DmPlayerConfigReq::_internal_blocktop() const {
  const ::bilibili::community::service::dm::v1::PlayerDanmakuBlocktop* p = _impl_.blocktop_;
  return p != nullptr ? *p : reinterpret_cast<const ::bilibili::community::service::dm::v1::PlayerDanmakuBlocktop&>(
      ::bilibili::community::service::dm::v1::_PlayerDanmakuBlocktop_default_instance_);
}
inline const ::bilibili::community::service::dm::v1::PlayerDanmakuBlocktop& DmPlayerConfigReq::blocktop() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DmPlayerConfigReq.blocktop)
  return _internal_blocktop();
}
inline void DmPlayerConfigReq::unsafe_arena_set_allocated_blocktop(
    ::bilibili::community::service::dm::v1::PlayerDanmakuBlocktop* blocktop) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.blocktop_);
  }
  _impl_.blocktop_ = blocktop;
  if (blocktop) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bilibili.community.service.dm.v1.DmPlayerConfigReq.blocktop)
}
inline ::bilibili::community::service::dm::v1::PlayerDanmakuBlocktop* DmPlayerConfigReq::release_blocktop() {
  
  ::bilibili::community::service::dm::v1::PlayerDanmakuBlocktop* temp = _impl_.blocktop_;
  _impl_.blocktop_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bilibili::community::service::dm::v1::PlayerDanmakuBlocktop* DmPlayerConfigReq::unsafe_arena_release_blocktop() {
  // @@protoc_insertion_point(field_release:bilibili.community.service.dm.v1.DmPlayerConfigReq.blocktop)
  
  ::bilibili::community::service::dm::v1::PlayerDanmakuBlocktop* temp = _impl_.blocktop_;
  _impl_.blocktop_ = nullptr;
  return temp;
}
inline ::bilibili::community::service::dm::v1::PlayerDanmakuBlocktop* DmPlayerConfigReq::_internal_mutable_blocktop() {
  
  if (_impl_.blocktop_ == nullptr) {
    auto* p = CreateMaybeMessage<::bilibili::community::service::dm::v1::PlayerDanmakuBlocktop>(GetArenaForAllocation());
    _impl_.blocktop_ = p;
  }
  return _impl_.blocktop_;
}
inline ::bilibili::community::service::dm::v1::PlayerDanmakuBlocktop* DmPlayerConfigReq::mutable_blocktop() {
  ::bilibili::community::service::dm::v1::PlayerDanmakuBlocktop* _msg = _internal_mutable_blocktop();
  // @@protoc_insertion_point(field_mutable:bilibili.community.service.dm.v1.DmPlayerConfigReq.blocktop)
  return _msg;
}
inline void DmPlayerConfigReq::set_allocated_blocktop(::bilibili::community::service::dm::v1::PlayerDanmakuBlocktop* blocktop) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.blocktop_;
  }
  if (blocktop) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(blocktop);
    if (message_arena != submessage_arena) {
      blocktop = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, blocktop, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.blocktop_ = blocktop;
  // @@protoc_insertion_point(field_set_allocated:bilibili.community.service.dm.v1.DmPlayerConfigReq.blocktop)
}

// .bilibili.community.service.dm.v1.PlayerDanmakuBlockscroll blockscroll = 8;
inline bool DmPlayerConfigReq::_internal_has_blockscroll() const {
  return this != internal_default_instance() && _impl_.blockscroll_ != nullptr;
}
inline bool DmPlayerConfigReq::has_blockscroll() const {
  return _internal_has_blockscroll();
}
inline void DmPlayerConfigReq::clear_blockscroll() {
  if (GetArenaForAllocation() == nullptr && _impl_.blockscroll_ != nullptr) {
    delete _impl_.blockscroll_;
  }
  _impl_.blockscroll_ = nullptr;
}
inline const ::bilibili::community::service::dm::v1::PlayerDanmakuBlockscroll& DmPlayerConfigReq::_internal_blockscroll() const {
  const ::bilibili::community::service::dm::v1::PlayerDanmakuBlockscroll* p = _impl_.blockscroll_;
  return p != nullptr ? *p : reinterpret_cast<const ::bilibili::community::service::dm::v1::PlayerDanmakuBlockscroll&>(
      ::bilibili::community::service::dm::v1::_PlayerDanmakuBlockscroll_default_instance_);
}
inline const ::bilibili::community::service::dm::v1::PlayerDanmakuBlockscroll& DmPlayerConfigReq::blockscroll() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DmPlayerConfigReq.blockscroll)
  return _internal_blockscroll();
}
inline void DmPlayerConfigReq::unsafe_arena_set_allocated_blockscroll(
    ::bilibili::community::service::dm::v1::PlayerDanmakuBlockscroll* blockscroll) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.blockscroll_);
  }
  _impl_.blockscroll_ = blockscroll;
  if (blockscroll) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bilibili.community.service.dm.v1.DmPlayerConfigReq.blockscroll)
}
inline ::bilibili::community::service::dm::v1::PlayerDanmakuBlockscroll* DmPlayerConfigReq::release_blockscroll() {
  
  ::bilibili::community::service::dm::v1::PlayerDanmakuBlockscroll* temp = _impl_.blockscroll_;
  _impl_.blockscroll_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bilibili::community::service::dm::v1::PlayerDanmakuBlockscroll* DmPlayerConfigReq::unsafe_arena_release_blockscroll() {
  // @@protoc_insertion_point(field_release:bilibili.community.service.dm.v1.DmPlayerConfigReq.blockscroll)
  
  ::bilibili::community::service::dm::v1::PlayerDanmakuBlockscroll* temp = _impl_.blockscroll_;
  _impl_.blockscroll_ = nullptr;
  return temp;
}
inline ::bilibili::community::service::dm::v1::PlayerDanmakuBlockscroll* DmPlayerConfigReq::_internal_mutable_blockscroll() {
  
  if (_impl_.blockscroll_ == nullptr) {
    auto* p = CreateMaybeMessage<::bilibili::community::service::dm::v1::PlayerDanmakuBlockscroll>(GetArenaForAllocation());
    _impl_.blockscroll_ = p;
  }
  return _impl_.blockscroll_;
}
inline ::bilibili::community::service::dm::v1::PlayerDanmakuBlockscroll* DmPlayerConfigReq::mutable_blockscroll() {
  ::bilibili::community::service::dm::v1::PlayerDanmakuBlockscroll* _msg = _internal_mutable_blockscroll();
  // @@protoc_insertion_point(field_mutable:bilibili.community.service.dm.v1.DmPlayerConfigReq.blockscroll)
  return _msg;
}
inline void DmPlayerConfigReq::set_allocated_blockscroll(::bilibili::community::service::dm::v1::PlayerDanmakuBlockscroll* blockscroll) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.blockscroll_;
  }
  if (blockscroll) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(blockscroll);
    if (message_arena != submessage_arena) {
      blockscroll = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, blockscroll, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.blockscroll_ = blockscroll;
  // @@protoc_insertion_point(field_set_allocated:bilibili.community.service.dm.v1.DmPlayerConfigReq.blockscroll)
}

// .bilibili.community.service.dm.v1.PlayerDanmakuBlockbottom blockbottom = 9;
inline bool DmPlayerConfigReq::_internal_has_blockbottom() const {
  return this != internal_default_instance() && _impl_.blockbottom_ != nullptr;
}
inline bool DmPlayerConfigReq::has_blockbottom() const {
  return _internal_has_blockbottom();
}
inline void DmPlayerConfigReq::clear_blockbottom() {
  if (GetArenaForAllocation() == nullptr && _impl_.blockbottom_ != nullptr) {
    delete _impl_.blockbottom_;
  }
  _impl_.blockbottom_ = nullptr;
}
inline const ::bilibili::community::service::dm::v1::PlayerDanmakuBlockbottom& DmPlayerConfigReq::_internal_blockbottom() const {
  const ::bilibili::community::service::dm::v1::PlayerDanmakuBlockbottom* p = _impl_.blockbottom_;
  return p != nullptr ? *p : reinterpret_cast<const ::bilibili::community::service::dm::v1::PlayerDanmakuBlockbottom&>(
      ::bilibili::community::service::dm::v1::_PlayerDanmakuBlockbottom_default_instance_);
}
inline const ::bilibili::community::service::dm::v1::PlayerDanmakuBlockbottom& DmPlayerConfigReq::blockbottom() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DmPlayerConfigReq.blockbottom)
  return _internal_blockbottom();
}
inline void DmPlayerConfigReq::unsafe_arena_set_allocated_blockbottom(
    ::bilibili::community::service::dm::v1::PlayerDanmakuBlockbottom* blockbottom) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.blockbottom_);
  }
  _impl_.blockbottom_ = blockbottom;
  if (blockbottom) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bilibili.community.service.dm.v1.DmPlayerConfigReq.blockbottom)
}
inline ::bilibili::community::service::dm::v1::PlayerDanmakuBlockbottom* DmPlayerConfigReq::release_blockbottom() {
  
  ::bilibili::community::service::dm::v1::PlayerDanmakuBlockbottom* temp = _impl_.blockbottom_;
  _impl_.blockbottom_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bilibili::community::service::dm::v1::PlayerDanmakuBlockbottom* DmPlayerConfigReq::unsafe_arena_release_blockbottom() {
  // @@protoc_insertion_point(field_release:bilibili.community.service.dm.v1.DmPlayerConfigReq.blockbottom)
  
  ::bilibili::community::service::dm::v1::PlayerDanmakuBlockbottom* temp = _impl_.blockbottom_;
  _impl_.blockbottom_ = nullptr;
  return temp;
}
inline ::bilibili::community::service::dm::v1::PlayerDanmakuBlockbottom* DmPlayerConfigReq::_internal_mutable_blockbottom() {
  
  if (_impl_.blockbottom_ == nullptr) {
    auto* p = CreateMaybeMessage<::bilibili::community::service::dm::v1::PlayerDanmakuBlockbottom>(GetArenaForAllocation());
    _impl_.blockbottom_ = p;
  }
  return _impl_.blockbottom_;
}
inline ::bilibili::community::service::dm::v1::PlayerDanmakuBlockbottom* DmPlayerConfigReq::mutable_blockbottom() {
  ::bilibili::community::service::dm::v1::PlayerDanmakuBlockbottom* _msg = _internal_mutable_blockbottom();
  // @@protoc_insertion_point(field_mutable:bilibili.community.service.dm.v1.DmPlayerConfigReq.blockbottom)
  return _msg;
}
inline void DmPlayerConfigReq::set_allocated_blockbottom(::bilibili::community::service::dm::v1::PlayerDanmakuBlockbottom* blockbottom) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.blockbottom_;
  }
  if (blockbottom) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(blockbottom);
    if (message_arena != submessage_arena) {
      blockbottom = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, blockbottom, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.blockbottom_ = blockbottom;
  // @@protoc_insertion_point(field_set_allocated:bilibili.community.service.dm.v1.DmPlayerConfigReq.blockbottom)
}

// .bilibili.community.service.dm.v1.PlayerDanmakuBlockcolorful blockcolorful = 10;
inline bool DmPlayerConfigReq::_internal_has_blockcolorful() const {
  return this != internal_default_instance() && _impl_.blockcolorful_ != nullptr;
}
inline bool DmPlayerConfigReq::has_blockcolorful() const {
  return _internal_has_blockcolorful();
}
inline void DmPlayerConfigReq::clear_blockcolorful() {
  if (GetArenaForAllocation() == nullptr && _impl_.blockcolorful_ != nullptr) {
    delete _impl_.blockcolorful_;
  }
  _impl_.blockcolorful_ = nullptr;
}
inline const ::bilibili::community::service::dm::v1::PlayerDanmakuBlockcolorful& DmPlayerConfigReq::_internal_blockcolorful() const {
  const ::bilibili::community::service::dm::v1::PlayerDanmakuBlockcolorful* p = _impl_.blockcolorful_;
  return p != nullptr ? *p : reinterpret_cast<const ::bilibili::community::service::dm::v1::PlayerDanmakuBlockcolorful&>(
      ::bilibili::community::service::dm::v1::_PlayerDanmakuBlockcolorful_default_instance_);
}
inline const ::bilibili::community::service::dm::v1::PlayerDanmakuBlockcolorful& DmPlayerConfigReq::blockcolorful() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DmPlayerConfigReq.blockcolorful)
  return _internal_blockcolorful();
}
inline void DmPlayerConfigReq::unsafe_arena_set_allocated_blockcolorful(
    ::bilibili::community::service::dm::v1::PlayerDanmakuBlockcolorful* blockcolorful) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.blockcolorful_);
  }
  _impl_.blockcolorful_ = blockcolorful;
  if (blockcolorful) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bilibili.community.service.dm.v1.DmPlayerConfigReq.blockcolorful)
}
inline ::bilibili::community::service::dm::v1::PlayerDanmakuBlockcolorful* DmPlayerConfigReq::release_blockcolorful() {
  
  ::bilibili::community::service::dm::v1::PlayerDanmakuBlockcolorful* temp = _impl_.blockcolorful_;
  _impl_.blockcolorful_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bilibili::community::service::dm::v1::PlayerDanmakuBlockcolorful* DmPlayerConfigReq::unsafe_arena_release_blockcolorful() {
  // @@protoc_insertion_point(field_release:bilibili.community.service.dm.v1.DmPlayerConfigReq.blockcolorful)
  
  ::bilibili::community::service::dm::v1::PlayerDanmakuBlockcolorful* temp = _impl_.blockcolorful_;
  _impl_.blockcolorful_ = nullptr;
  return temp;
}
inline ::bilibili::community::service::dm::v1::PlayerDanmakuBlockcolorful* DmPlayerConfigReq::_internal_mutable_blockcolorful() {
  
  if (_impl_.blockcolorful_ == nullptr) {
    auto* p = CreateMaybeMessage<::bilibili::community::service::dm::v1::PlayerDanmakuBlockcolorful>(GetArenaForAllocation());
    _impl_.blockcolorful_ = p;
  }
  return _impl_.blockcolorful_;
}
inline ::bilibili::community::service::dm::v1::PlayerDanmakuBlockcolorful* DmPlayerConfigReq::mutable_blockcolorful() {
  ::bilibili::community::service::dm::v1::PlayerDanmakuBlockcolorful* _msg = _internal_mutable_blockcolorful();
  // @@protoc_insertion_point(field_mutable:bilibili.community.service.dm.v1.DmPlayerConfigReq.blockcolorful)
  return _msg;
}
inline void DmPlayerConfigReq::set_allocated_blockcolorful(::bilibili::community::service::dm::v1::PlayerDanmakuBlockcolorful* blockcolorful) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.blockcolorful_;
  }
  if (blockcolorful) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(blockcolorful);
    if (message_arena != submessage_arena) {
      blockcolorful = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, blockcolorful, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.blockcolorful_ = blockcolorful;
  // @@protoc_insertion_point(field_set_allocated:bilibili.community.service.dm.v1.DmPlayerConfigReq.blockcolorful)
}

// .bilibili.community.service.dm.v1.PlayerDanmakuBlockrepeat blockrepeat = 11;
inline bool DmPlayerConfigReq::_internal_has_blockrepeat() const {
  return this != internal_default_instance() && _impl_.blockrepeat_ != nullptr;
}
inline bool DmPlayerConfigReq::has_blockrepeat() const {
  return _internal_has_blockrepeat();
}
inline void DmPlayerConfigReq::clear_blockrepeat() {
  if (GetArenaForAllocation() == nullptr && _impl_.blockrepeat_ != nullptr) {
    delete _impl_.blockrepeat_;
  }
  _impl_.blockrepeat_ = nullptr;
}
inline const ::bilibili::community::service::dm::v1::PlayerDanmakuBlockrepeat& DmPlayerConfigReq::_internal_blockrepeat() const {
  const ::bilibili::community::service::dm::v1::PlayerDanmakuBlockrepeat* p = _impl_.blockrepeat_;
  return p != nullptr ? *p : reinterpret_cast<const ::bilibili::community::service::dm::v1::PlayerDanmakuBlockrepeat&>(
      ::bilibili::community::service::dm::v1::_PlayerDanmakuBlockrepeat_default_instance_);
}
inline const ::bilibili::community::service::dm::v1::PlayerDanmakuBlockrepeat& DmPlayerConfigReq::blockrepeat() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DmPlayerConfigReq.blockrepeat)
  return _internal_blockrepeat();
}
inline void DmPlayerConfigReq::unsafe_arena_set_allocated_blockrepeat(
    ::bilibili::community::service::dm::v1::PlayerDanmakuBlockrepeat* blockrepeat) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.blockrepeat_);
  }
  _impl_.blockrepeat_ = blockrepeat;
  if (blockrepeat) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bilibili.community.service.dm.v1.DmPlayerConfigReq.blockrepeat)
}
inline ::bilibili::community::service::dm::v1::PlayerDanmakuBlockrepeat* DmPlayerConfigReq::release_blockrepeat() {
  
  ::bilibili::community::service::dm::v1::PlayerDanmakuBlockrepeat* temp = _impl_.blockrepeat_;
  _impl_.blockrepeat_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bilibili::community::service::dm::v1::PlayerDanmakuBlockrepeat* DmPlayerConfigReq::unsafe_arena_release_blockrepeat() {
  // @@protoc_insertion_point(field_release:bilibili.community.service.dm.v1.DmPlayerConfigReq.blockrepeat)
  
  ::bilibili::community::service::dm::v1::PlayerDanmakuBlockrepeat* temp = _impl_.blockrepeat_;
  _impl_.blockrepeat_ = nullptr;
  return temp;
}
inline ::bilibili::community::service::dm::v1::PlayerDanmakuBlockrepeat* DmPlayerConfigReq::_internal_mutable_blockrepeat() {
  
  if (_impl_.blockrepeat_ == nullptr) {
    auto* p = CreateMaybeMessage<::bilibili::community::service::dm::v1::PlayerDanmakuBlockrepeat>(GetArenaForAllocation());
    _impl_.blockrepeat_ = p;
  }
  return _impl_.blockrepeat_;
}
inline ::bilibili::community::service::dm::v1::PlayerDanmakuBlockrepeat* DmPlayerConfigReq::mutable_blockrepeat() {
  ::bilibili::community::service::dm::v1::PlayerDanmakuBlockrepeat* _msg = _internal_mutable_blockrepeat();
  // @@protoc_insertion_point(field_mutable:bilibili.community.service.dm.v1.DmPlayerConfigReq.blockrepeat)
  return _msg;
}
inline void DmPlayerConfigReq::set_allocated_blockrepeat(::bilibili::community::service::dm::v1::PlayerDanmakuBlockrepeat* blockrepeat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.blockrepeat_;
  }
  if (blockrepeat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(blockrepeat);
    if (message_arena != submessage_arena) {
      blockrepeat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, blockrepeat, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.blockrepeat_ = blockrepeat;
  // @@protoc_insertion_point(field_set_allocated:bilibili.community.service.dm.v1.DmPlayerConfigReq.blockrepeat)
}

// .bilibili.community.service.dm.v1.PlayerDanmakuBlockspecial blockspecial = 12;
inline bool DmPlayerConfigReq::_internal_has_blockspecial() const {
  return this != internal_default_instance() && _impl_.blockspecial_ != nullptr;
}
inline bool DmPlayerConfigReq::has_blockspecial() const {
  return _internal_has_blockspecial();
}
inline void DmPlayerConfigReq::clear_blockspecial() {
  if (GetArenaForAllocation() == nullptr && _impl_.blockspecial_ != nullptr) {
    delete _impl_.blockspecial_;
  }
  _impl_.blockspecial_ = nullptr;
}
inline const ::bilibili::community::service::dm::v1::PlayerDanmakuBlockspecial& DmPlayerConfigReq::_internal_blockspecial() const {
  const ::bilibili::community::service::dm::v1::PlayerDanmakuBlockspecial* p = _impl_.blockspecial_;
  return p != nullptr ? *p : reinterpret_cast<const ::bilibili::community::service::dm::v1::PlayerDanmakuBlockspecial&>(
      ::bilibili::community::service::dm::v1::_PlayerDanmakuBlockspecial_default_instance_);
}
inline const ::bilibili::community::service::dm::v1::PlayerDanmakuBlockspecial& DmPlayerConfigReq::blockspecial() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DmPlayerConfigReq.blockspecial)
  return _internal_blockspecial();
}
inline void DmPlayerConfigReq::unsafe_arena_set_allocated_blockspecial(
    ::bilibili::community::service::dm::v1::PlayerDanmakuBlockspecial* blockspecial) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.blockspecial_);
  }
  _impl_.blockspecial_ = blockspecial;
  if (blockspecial) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bilibili.community.service.dm.v1.DmPlayerConfigReq.blockspecial)
}
inline ::bilibili::community::service::dm::v1::PlayerDanmakuBlockspecial* DmPlayerConfigReq::release_blockspecial() {
  
  ::bilibili::community::service::dm::v1::PlayerDanmakuBlockspecial* temp = _impl_.blockspecial_;
  _impl_.blockspecial_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bilibili::community::service::dm::v1::PlayerDanmakuBlockspecial* DmPlayerConfigReq::unsafe_arena_release_blockspecial() {
  // @@protoc_insertion_point(field_release:bilibili.community.service.dm.v1.DmPlayerConfigReq.blockspecial)
  
  ::bilibili::community::service::dm::v1::PlayerDanmakuBlockspecial* temp = _impl_.blockspecial_;
  _impl_.blockspecial_ = nullptr;
  return temp;
}
inline ::bilibili::community::service::dm::v1::PlayerDanmakuBlockspecial* DmPlayerConfigReq::_internal_mutable_blockspecial() {
  
  if (_impl_.blockspecial_ == nullptr) {
    auto* p = CreateMaybeMessage<::bilibili::community::service::dm::v1::PlayerDanmakuBlockspecial>(GetArenaForAllocation());
    _impl_.blockspecial_ = p;
  }
  return _impl_.blockspecial_;
}
inline ::bilibili::community::service::dm::v1::PlayerDanmakuBlockspecial* DmPlayerConfigReq::mutable_blockspecial() {
  ::bilibili::community::service::dm::v1::PlayerDanmakuBlockspecial* _msg = _internal_mutable_blockspecial();
  // @@protoc_insertion_point(field_mutable:bilibili.community.service.dm.v1.DmPlayerConfigReq.blockspecial)
  return _msg;
}
inline void DmPlayerConfigReq::set_allocated_blockspecial(::bilibili::community::service::dm::v1::PlayerDanmakuBlockspecial* blockspecial) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.blockspecial_;
  }
  if (blockspecial) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(blockspecial);
    if (message_arena != submessage_arena) {
      blockspecial = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, blockspecial, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.blockspecial_ = blockspecial;
  // @@protoc_insertion_point(field_set_allocated:bilibili.community.service.dm.v1.DmPlayerConfigReq.blockspecial)
}

// .bilibili.community.service.dm.v1.PlayerDanmakuOpacity opacity = 13;
inline bool DmPlayerConfigReq::_internal_has_opacity() const {
  return this != internal_default_instance() && _impl_.opacity_ != nullptr;
}
inline bool DmPlayerConfigReq::has_opacity() const {
  return _internal_has_opacity();
}
inline void DmPlayerConfigReq::clear_opacity() {
  if (GetArenaForAllocation() == nullptr && _impl_.opacity_ != nullptr) {
    delete _impl_.opacity_;
  }
  _impl_.opacity_ = nullptr;
}
inline const ::bilibili::community::service::dm::v1::PlayerDanmakuOpacity& DmPlayerConfigReq::_internal_opacity() const {
  const ::bilibili::community::service::dm::v1::PlayerDanmakuOpacity* p = _impl_.opacity_;
  return p != nullptr ? *p : reinterpret_cast<const ::bilibili::community::service::dm::v1::PlayerDanmakuOpacity&>(
      ::bilibili::community::service::dm::v1::_PlayerDanmakuOpacity_default_instance_);
}
inline const ::bilibili::community::service::dm::v1::PlayerDanmakuOpacity& DmPlayerConfigReq::opacity() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DmPlayerConfigReq.opacity)
  return _internal_opacity();
}
inline void DmPlayerConfigReq::unsafe_arena_set_allocated_opacity(
    ::bilibili::community::service::dm::v1::PlayerDanmakuOpacity* opacity) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.opacity_);
  }
  _impl_.opacity_ = opacity;
  if (opacity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bilibili.community.service.dm.v1.DmPlayerConfigReq.opacity)
}
inline ::bilibili::community::service::dm::v1::PlayerDanmakuOpacity* DmPlayerConfigReq::release_opacity() {
  
  ::bilibili::community::service::dm::v1::PlayerDanmakuOpacity* temp = _impl_.opacity_;
  _impl_.opacity_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bilibili::community::service::dm::v1::PlayerDanmakuOpacity* DmPlayerConfigReq::unsafe_arena_release_opacity() {
  // @@protoc_insertion_point(field_release:bilibili.community.service.dm.v1.DmPlayerConfigReq.opacity)
  
  ::bilibili::community::service::dm::v1::PlayerDanmakuOpacity* temp = _impl_.opacity_;
  _impl_.opacity_ = nullptr;
  return temp;
}
inline ::bilibili::community::service::dm::v1::PlayerDanmakuOpacity* DmPlayerConfigReq::_internal_mutable_opacity() {
  
  if (_impl_.opacity_ == nullptr) {
    auto* p = CreateMaybeMessage<::bilibili::community::service::dm::v1::PlayerDanmakuOpacity>(GetArenaForAllocation());
    _impl_.opacity_ = p;
  }
  return _impl_.opacity_;
}
inline ::bilibili::community::service::dm::v1::PlayerDanmakuOpacity* DmPlayerConfigReq::mutable_opacity() {
  ::bilibili::community::service::dm::v1::PlayerDanmakuOpacity* _msg = _internal_mutable_opacity();
  // @@protoc_insertion_point(field_mutable:bilibili.community.service.dm.v1.DmPlayerConfigReq.opacity)
  return _msg;
}
inline void DmPlayerConfigReq::set_allocated_opacity(::bilibili::community::service::dm::v1::PlayerDanmakuOpacity* opacity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.opacity_;
  }
  if (opacity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(opacity);
    if (message_arena != submessage_arena) {
      opacity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, opacity, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.opacity_ = opacity;
  // @@protoc_insertion_point(field_set_allocated:bilibili.community.service.dm.v1.DmPlayerConfigReq.opacity)
}

// .bilibili.community.service.dm.v1.PlayerDanmakuScalingfactor scalingfactor = 14;
inline bool DmPlayerConfigReq::_internal_has_scalingfactor() const {
  return this != internal_default_instance() && _impl_.scalingfactor_ != nullptr;
}
inline bool DmPlayerConfigReq::has_scalingfactor() const {
  return _internal_has_scalingfactor();
}
inline void DmPlayerConfigReq::clear_scalingfactor() {
  if (GetArenaForAllocation() == nullptr && _impl_.scalingfactor_ != nullptr) {
    delete _impl_.scalingfactor_;
  }
  _impl_.scalingfactor_ = nullptr;
}
inline const ::bilibili::community::service::dm::v1::PlayerDanmakuScalingfactor& DmPlayerConfigReq::_internal_scalingfactor() const {
  const ::bilibili::community::service::dm::v1::PlayerDanmakuScalingfactor* p = _impl_.scalingfactor_;
  return p != nullptr ? *p : reinterpret_cast<const ::bilibili::community::service::dm::v1::PlayerDanmakuScalingfactor&>(
      ::bilibili::community::service::dm::v1::_PlayerDanmakuScalingfactor_default_instance_);
}
inline const ::bilibili::community::service::dm::v1::PlayerDanmakuScalingfactor& DmPlayerConfigReq::scalingfactor() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DmPlayerConfigReq.scalingfactor)
  return _internal_scalingfactor();
}
inline void DmPlayerConfigReq::unsafe_arena_set_allocated_scalingfactor(
    ::bilibili::community::service::dm::v1::PlayerDanmakuScalingfactor* scalingfactor) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.scalingfactor_);
  }
  _impl_.scalingfactor_ = scalingfactor;
  if (scalingfactor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bilibili.community.service.dm.v1.DmPlayerConfigReq.scalingfactor)
}
inline ::bilibili::community::service::dm::v1::PlayerDanmakuScalingfactor* DmPlayerConfigReq::release_scalingfactor() {
  
  ::bilibili::community::service::dm::v1::PlayerDanmakuScalingfactor* temp = _impl_.scalingfactor_;
  _impl_.scalingfactor_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bilibili::community::service::dm::v1::PlayerDanmakuScalingfactor* DmPlayerConfigReq::unsafe_arena_release_scalingfactor() {
  // @@protoc_insertion_point(field_release:bilibili.community.service.dm.v1.DmPlayerConfigReq.scalingfactor)
  
  ::bilibili::community::service::dm::v1::PlayerDanmakuScalingfactor* temp = _impl_.scalingfactor_;
  _impl_.scalingfactor_ = nullptr;
  return temp;
}
inline ::bilibili::community::service::dm::v1::PlayerDanmakuScalingfactor* DmPlayerConfigReq::_internal_mutable_scalingfactor() {
  
  if (_impl_.scalingfactor_ == nullptr) {
    auto* p = CreateMaybeMessage<::bilibili::community::service::dm::v1::PlayerDanmakuScalingfactor>(GetArenaForAllocation());
    _impl_.scalingfactor_ = p;
  }
  return _impl_.scalingfactor_;
}
inline ::bilibili::community::service::dm::v1::PlayerDanmakuScalingfactor* DmPlayerConfigReq::mutable_scalingfactor() {
  ::bilibili::community::service::dm::v1::PlayerDanmakuScalingfactor* _msg = _internal_mutable_scalingfactor();
  // @@protoc_insertion_point(field_mutable:bilibili.community.service.dm.v1.DmPlayerConfigReq.scalingfactor)
  return _msg;
}
inline void DmPlayerConfigReq::set_allocated_scalingfactor(::bilibili::community::service::dm::v1::PlayerDanmakuScalingfactor* scalingfactor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.scalingfactor_;
  }
  if (scalingfactor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(scalingfactor);
    if (message_arena != submessage_arena) {
      scalingfactor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scalingfactor, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.scalingfactor_ = scalingfactor;
  // @@protoc_insertion_point(field_set_allocated:bilibili.community.service.dm.v1.DmPlayerConfigReq.scalingfactor)
}

// .bilibili.community.service.dm.v1.PlayerDanmakuDomain domain = 15;
inline bool DmPlayerConfigReq::_internal_has_domain() const {
  return this != internal_default_instance() && _impl_.domain_ != nullptr;
}
inline bool DmPlayerConfigReq::has_domain() const {
  return _internal_has_domain();
}
inline void DmPlayerConfigReq::clear_domain() {
  if (GetArenaForAllocation() == nullptr && _impl_.domain_ != nullptr) {
    delete _impl_.domain_;
  }
  _impl_.domain_ = nullptr;
}
inline const ::bilibili::community::service::dm::v1::PlayerDanmakuDomain& DmPlayerConfigReq::_internal_domain() const {
  const ::bilibili::community::service::dm::v1::PlayerDanmakuDomain* p = _impl_.domain_;
  return p != nullptr ? *p : reinterpret_cast<const ::bilibili::community::service::dm::v1::PlayerDanmakuDomain&>(
      ::bilibili::community::service::dm::v1::_PlayerDanmakuDomain_default_instance_);
}
inline const ::bilibili::community::service::dm::v1::PlayerDanmakuDomain& DmPlayerConfigReq::domain() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DmPlayerConfigReq.domain)
  return _internal_domain();
}
inline void DmPlayerConfigReq::unsafe_arena_set_allocated_domain(
    ::bilibili::community::service::dm::v1::PlayerDanmakuDomain* domain) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.domain_);
  }
  _impl_.domain_ = domain;
  if (domain) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bilibili.community.service.dm.v1.DmPlayerConfigReq.domain)
}
inline ::bilibili::community::service::dm::v1::PlayerDanmakuDomain* DmPlayerConfigReq::release_domain() {
  
  ::bilibili::community::service::dm::v1::PlayerDanmakuDomain* temp = _impl_.domain_;
  _impl_.domain_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bilibili::community::service::dm::v1::PlayerDanmakuDomain* DmPlayerConfigReq::unsafe_arena_release_domain() {
  // @@protoc_insertion_point(field_release:bilibili.community.service.dm.v1.DmPlayerConfigReq.domain)
  
  ::bilibili::community::service::dm::v1::PlayerDanmakuDomain* temp = _impl_.domain_;
  _impl_.domain_ = nullptr;
  return temp;
}
inline ::bilibili::community::service::dm::v1::PlayerDanmakuDomain* DmPlayerConfigReq::_internal_mutable_domain() {
  
  if (_impl_.domain_ == nullptr) {
    auto* p = CreateMaybeMessage<::bilibili::community::service::dm::v1::PlayerDanmakuDomain>(GetArenaForAllocation());
    _impl_.domain_ = p;
  }
  return _impl_.domain_;
}
inline ::bilibili::community::service::dm::v1::PlayerDanmakuDomain* DmPlayerConfigReq::mutable_domain() {
  ::bilibili::community::service::dm::v1::PlayerDanmakuDomain* _msg = _internal_mutable_domain();
  // @@protoc_insertion_point(field_mutable:bilibili.community.service.dm.v1.DmPlayerConfigReq.domain)
  return _msg;
}
inline void DmPlayerConfigReq::set_allocated_domain(::bilibili::community::service::dm::v1::PlayerDanmakuDomain* domain) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.domain_;
  }
  if (domain) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(domain);
    if (message_arena != submessage_arena) {
      domain = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, domain, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.domain_ = domain;
  // @@protoc_insertion_point(field_set_allocated:bilibili.community.service.dm.v1.DmPlayerConfigReq.domain)
}

// .bilibili.community.service.dm.v1.PlayerDanmakuSpeed speed = 16;
inline bool DmPlayerConfigReq::_internal_has_speed() const {
  return this != internal_default_instance() && _impl_.speed_ != nullptr;
}
inline bool DmPlayerConfigReq::has_speed() const {
  return _internal_has_speed();
}
inline void DmPlayerConfigReq::clear_speed() {
  if (GetArenaForAllocation() == nullptr && _impl_.speed_ != nullptr) {
    delete _impl_.speed_;
  }
  _impl_.speed_ = nullptr;
}
inline const ::bilibili::community::service::dm::v1::PlayerDanmakuSpeed& DmPlayerConfigReq::_internal_speed() const {
  const ::bilibili::community::service::dm::v1::PlayerDanmakuSpeed* p = _impl_.speed_;
  return p != nullptr ? *p : reinterpret_cast<const ::bilibili::community::service::dm::v1::PlayerDanmakuSpeed&>(
      ::bilibili::community::service::dm::v1::_PlayerDanmakuSpeed_default_instance_);
}
inline const ::bilibili::community::service::dm::v1::PlayerDanmakuSpeed& DmPlayerConfigReq::speed() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DmPlayerConfigReq.speed)
  return _internal_speed();
}
inline void DmPlayerConfigReq::unsafe_arena_set_allocated_speed(
    ::bilibili::community::service::dm::v1::PlayerDanmakuSpeed* speed) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.speed_);
  }
  _impl_.speed_ = speed;
  if (speed) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bilibili.community.service.dm.v1.DmPlayerConfigReq.speed)
}
inline ::bilibili::community::service::dm::v1::PlayerDanmakuSpeed* DmPlayerConfigReq::release_speed() {
  
  ::bilibili::community::service::dm::v1::PlayerDanmakuSpeed* temp = _impl_.speed_;
  _impl_.speed_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bilibili::community::service::dm::v1::PlayerDanmakuSpeed* DmPlayerConfigReq::unsafe_arena_release_speed() {
  // @@protoc_insertion_point(field_release:bilibili.community.service.dm.v1.DmPlayerConfigReq.speed)
  
  ::bilibili::community::service::dm::v1::PlayerDanmakuSpeed* temp = _impl_.speed_;
  _impl_.speed_ = nullptr;
  return temp;
}
inline ::bilibili::community::service::dm::v1::PlayerDanmakuSpeed* DmPlayerConfigReq::_internal_mutable_speed() {
  
  if (_impl_.speed_ == nullptr) {
    auto* p = CreateMaybeMessage<::bilibili::community::service::dm::v1::PlayerDanmakuSpeed>(GetArenaForAllocation());
    _impl_.speed_ = p;
  }
  return _impl_.speed_;
}
inline ::bilibili::community::service::dm::v1::PlayerDanmakuSpeed* DmPlayerConfigReq::mutable_speed() {
  ::bilibili::community::service::dm::v1::PlayerDanmakuSpeed* _msg = _internal_mutable_speed();
  // @@protoc_insertion_point(field_mutable:bilibili.community.service.dm.v1.DmPlayerConfigReq.speed)
  return _msg;
}
inline void DmPlayerConfigReq::set_allocated_speed(::bilibili::community::service::dm::v1::PlayerDanmakuSpeed* speed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.speed_;
  }
  if (speed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(speed);
    if (message_arena != submessage_arena) {
      speed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, speed, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.speed_ = speed;
  // @@protoc_insertion_point(field_set_allocated:bilibili.community.service.dm.v1.DmPlayerConfigReq.speed)
}

// .bilibili.community.service.dm.v1.PlayerDanmakuEnableblocklist enableblocklist = 17;
inline bool DmPlayerConfigReq::_internal_has_enableblocklist() const {
  return this != internal_default_instance() && _impl_.enableblocklist_ != nullptr;
}
inline bool DmPlayerConfigReq::has_enableblocklist() const {
  return _internal_has_enableblocklist();
}
inline void DmPlayerConfigReq::clear_enableblocklist() {
  if (GetArenaForAllocation() == nullptr && _impl_.enableblocklist_ != nullptr) {
    delete _impl_.enableblocklist_;
  }
  _impl_.enableblocklist_ = nullptr;
}
inline const ::bilibili::community::service::dm::v1::PlayerDanmakuEnableblocklist& DmPlayerConfigReq::_internal_enableblocklist() const {
  const ::bilibili::community::service::dm::v1::PlayerDanmakuEnableblocklist* p = _impl_.enableblocklist_;
  return p != nullptr ? *p : reinterpret_cast<const ::bilibili::community::service::dm::v1::PlayerDanmakuEnableblocklist&>(
      ::bilibili::community::service::dm::v1::_PlayerDanmakuEnableblocklist_default_instance_);
}
inline const ::bilibili::community::service::dm::v1::PlayerDanmakuEnableblocklist& DmPlayerConfigReq::enableblocklist() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DmPlayerConfigReq.enableblocklist)
  return _internal_enableblocklist();
}
inline void DmPlayerConfigReq::unsafe_arena_set_allocated_enableblocklist(
    ::bilibili::community::service::dm::v1::PlayerDanmakuEnableblocklist* enableblocklist) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.enableblocklist_);
  }
  _impl_.enableblocklist_ = enableblocklist;
  if (enableblocklist) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bilibili.community.service.dm.v1.DmPlayerConfigReq.enableblocklist)
}
inline ::bilibili::community::service::dm::v1::PlayerDanmakuEnableblocklist* DmPlayerConfigReq::release_enableblocklist() {
  
  ::bilibili::community::service::dm::v1::PlayerDanmakuEnableblocklist* temp = _impl_.enableblocklist_;
  _impl_.enableblocklist_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bilibili::community::service::dm::v1::PlayerDanmakuEnableblocklist* DmPlayerConfigReq::unsafe_arena_release_enableblocklist() {
  // @@protoc_insertion_point(field_release:bilibili.community.service.dm.v1.DmPlayerConfigReq.enableblocklist)
  
  ::bilibili::community::service::dm::v1::PlayerDanmakuEnableblocklist* temp = _impl_.enableblocklist_;
  _impl_.enableblocklist_ = nullptr;
  return temp;
}
inline ::bilibili::community::service::dm::v1::PlayerDanmakuEnableblocklist* DmPlayerConfigReq::_internal_mutable_enableblocklist() {
  
  if (_impl_.enableblocklist_ == nullptr) {
    auto* p = CreateMaybeMessage<::bilibili::community::service::dm::v1::PlayerDanmakuEnableblocklist>(GetArenaForAllocation());
    _impl_.enableblocklist_ = p;
  }
  return _impl_.enableblocklist_;
}
inline ::bilibili::community::service::dm::v1::PlayerDanmakuEnableblocklist* DmPlayerConfigReq::mutable_enableblocklist() {
  ::bilibili::community::service::dm::v1::PlayerDanmakuEnableblocklist* _msg = _internal_mutable_enableblocklist();
  // @@protoc_insertion_point(field_mutable:bilibili.community.service.dm.v1.DmPlayerConfigReq.enableblocklist)
  return _msg;
}
inline void DmPlayerConfigReq::set_allocated_enableblocklist(::bilibili::community::service::dm::v1::PlayerDanmakuEnableblocklist* enableblocklist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.enableblocklist_;
  }
  if (enableblocklist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(enableblocklist);
    if (message_arena != submessage_arena) {
      enableblocklist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, enableblocklist, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.enableblocklist_ = enableblocklist;
  // @@protoc_insertion_point(field_set_allocated:bilibili.community.service.dm.v1.DmPlayerConfigReq.enableblocklist)
}

// .bilibili.community.service.dm.v1.InlinePlayerDanmakuSwitch inlinePlayerDanmakuSwitch = 18;
inline bool DmPlayerConfigReq::_internal_has_inlineplayerdanmakuswitch() const {
  return this != internal_default_instance() && _impl_.inlineplayerdanmakuswitch_ != nullptr;
}
inline bool DmPlayerConfigReq::has_inlineplayerdanmakuswitch() const {
  return _internal_has_inlineplayerdanmakuswitch();
}
inline void DmPlayerConfigReq::clear_inlineplayerdanmakuswitch() {
  if (GetArenaForAllocation() == nullptr && _impl_.inlineplayerdanmakuswitch_ != nullptr) {
    delete _impl_.inlineplayerdanmakuswitch_;
  }
  _impl_.inlineplayerdanmakuswitch_ = nullptr;
}
inline const ::bilibili::community::service::dm::v1::InlinePlayerDanmakuSwitch& DmPlayerConfigReq::_internal_inlineplayerdanmakuswitch() const {
  const ::bilibili::community::service::dm::v1::InlinePlayerDanmakuSwitch* p = _impl_.inlineplayerdanmakuswitch_;
  return p != nullptr ? *p : reinterpret_cast<const ::bilibili::community::service::dm::v1::InlinePlayerDanmakuSwitch&>(
      ::bilibili::community::service::dm::v1::_InlinePlayerDanmakuSwitch_default_instance_);
}
inline const ::bilibili::community::service::dm::v1::InlinePlayerDanmakuSwitch& DmPlayerConfigReq::inlineplayerdanmakuswitch() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DmPlayerConfigReq.inlinePlayerDanmakuSwitch)
  return _internal_inlineplayerdanmakuswitch();
}
inline void DmPlayerConfigReq::unsafe_arena_set_allocated_inlineplayerdanmakuswitch(
    ::bilibili::community::service::dm::v1::InlinePlayerDanmakuSwitch* inlineplayerdanmakuswitch) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.inlineplayerdanmakuswitch_);
  }
  _impl_.inlineplayerdanmakuswitch_ = inlineplayerdanmakuswitch;
  if (inlineplayerdanmakuswitch) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bilibili.community.service.dm.v1.DmPlayerConfigReq.inlinePlayerDanmakuSwitch)
}
inline ::bilibili::community::service::dm::v1::InlinePlayerDanmakuSwitch* DmPlayerConfigReq::release_inlineplayerdanmakuswitch() {
  
  ::bilibili::community::service::dm::v1::InlinePlayerDanmakuSwitch* temp = _impl_.inlineplayerdanmakuswitch_;
  _impl_.inlineplayerdanmakuswitch_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bilibili::community::service::dm::v1::InlinePlayerDanmakuSwitch* DmPlayerConfigReq::unsafe_arena_release_inlineplayerdanmakuswitch() {
  // @@protoc_insertion_point(field_release:bilibili.community.service.dm.v1.DmPlayerConfigReq.inlinePlayerDanmakuSwitch)
  
  ::bilibili::community::service::dm::v1::InlinePlayerDanmakuSwitch* temp = _impl_.inlineplayerdanmakuswitch_;
  _impl_.inlineplayerdanmakuswitch_ = nullptr;
  return temp;
}
inline ::bilibili::community::service::dm::v1::InlinePlayerDanmakuSwitch* DmPlayerConfigReq::_internal_mutable_inlineplayerdanmakuswitch() {
  
  if (_impl_.inlineplayerdanmakuswitch_ == nullptr) {
    auto* p = CreateMaybeMessage<::bilibili::community::service::dm::v1::InlinePlayerDanmakuSwitch>(GetArenaForAllocation());
    _impl_.inlineplayerdanmakuswitch_ = p;
  }
  return _impl_.inlineplayerdanmakuswitch_;
}
inline ::bilibili::community::service::dm::v1::InlinePlayerDanmakuSwitch* DmPlayerConfigReq::mutable_inlineplayerdanmakuswitch() {
  ::bilibili::community::service::dm::v1::InlinePlayerDanmakuSwitch* _msg = _internal_mutable_inlineplayerdanmakuswitch();
  // @@protoc_insertion_point(field_mutable:bilibili.community.service.dm.v1.DmPlayerConfigReq.inlinePlayerDanmakuSwitch)
  return _msg;
}
inline void DmPlayerConfigReq::set_allocated_inlineplayerdanmakuswitch(::bilibili::community::service::dm::v1::InlinePlayerDanmakuSwitch* inlineplayerdanmakuswitch) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.inlineplayerdanmakuswitch_;
  }
  if (inlineplayerdanmakuswitch) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(inlineplayerdanmakuswitch);
    if (message_arena != submessage_arena) {
      inlineplayerdanmakuswitch = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inlineplayerdanmakuswitch, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.inlineplayerdanmakuswitch_ = inlineplayerdanmakuswitch;
  // @@protoc_insertion_point(field_set_allocated:bilibili.community.service.dm.v1.DmPlayerConfigReq.inlinePlayerDanmakuSwitch)
}

// -------------------------------------------------------------------

// Response

// int32 code = 1;
inline void Response::clear_code() {
  _impl_.code_ = 0;
}
inline int32_t Response::_internal_code() const {
  return _impl_.code_;
}
inline int32_t Response::code() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.Response.code)
  return _internal_code();
}
inline void Response::_internal_set_code(int32_t value) {
  
  _impl_.code_ = value;
}
inline void Response::set_code(int32_t value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.Response.code)
}

// string message = 2;
inline void Response::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& Response::message() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.Response.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Response::set_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.Response.message)
}
inline std::string* Response::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:bilibili.community.service.dm.v1.Response.message)
  return _s;
}
inline const std::string& Response::_internal_message() const {
  return _impl_.message_.Get();
}
inline void Response::_internal_set_message(const std::string& value) {
  
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* Response::_internal_mutable_message() {
  
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* Response::release_message() {
  // @@protoc_insertion_point(field_release:bilibili.community.service.dm.v1.Response.message)
  return _impl_.message_.Release();
}
inline void Response::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bilibili.community.service.dm.v1.Response.message)
}

// -------------------------------------------------------------------

// DanmakuFlag

// int64 dmid = 1;
inline void DanmakuFlag::clear_dmid() {
  _impl_.dmid_ = int64_t{0};
}
inline int64_t DanmakuFlag::_internal_dmid() const {
  return _impl_.dmid_;
}
inline int64_t DanmakuFlag::dmid() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DanmakuFlag.dmid)
  return _internal_dmid();
}
inline void DanmakuFlag::_internal_set_dmid(int64_t value) {
  
  _impl_.dmid_ = value;
}
inline void DanmakuFlag::set_dmid(int64_t value) {
  _internal_set_dmid(value);
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.DanmakuFlag.dmid)
}

// uint32 flag = 2;
inline void DanmakuFlag::clear_flag() {
  _impl_.flag_ = 0u;
}
inline uint32_t DanmakuFlag::_internal_flag() const {
  return _impl_.flag_;
}
inline uint32_t DanmakuFlag::flag() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DanmakuFlag.flag)
  return _internal_flag();
}
inline void DanmakuFlag::_internal_set_flag(uint32_t value) {
  
  _impl_.flag_ = value;
}
inline void DanmakuFlag::set_flag(uint32_t value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.DanmakuFlag.flag)
}

// -------------------------------------------------------------------

// DanmakuFlagConfig

// int32 rec_flag = 1;
inline void DanmakuFlagConfig::clear_rec_flag() {
  _impl_.rec_flag_ = 0;
}
inline int32_t DanmakuFlagConfig::_internal_rec_flag() const {
  return _impl_.rec_flag_;
}
inline int32_t DanmakuFlagConfig::rec_flag() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DanmakuFlagConfig.rec_flag)
  return _internal_rec_flag();
}
inline void DanmakuFlagConfig::_internal_set_rec_flag(int32_t value) {
  
  _impl_.rec_flag_ = value;
}
inline void DanmakuFlagConfig::set_rec_flag(int32_t value) {
  _internal_set_rec_flag(value);
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.DanmakuFlagConfig.rec_flag)
}

// string rec_text = 2;
inline void DanmakuFlagConfig::clear_rec_text() {
  _impl_.rec_text_.ClearToEmpty();
}
inline const std::string& DanmakuFlagConfig::rec_text() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DanmakuFlagConfig.rec_text)
  return _internal_rec_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DanmakuFlagConfig::set_rec_text(ArgT0&& arg0, ArgT... args) {
 
 _impl_.rec_text_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.DanmakuFlagConfig.rec_text)
}
inline std::string* DanmakuFlagConfig::mutable_rec_text() {
  std::string* _s = _internal_mutable_rec_text();
  // @@protoc_insertion_point(field_mutable:bilibili.community.service.dm.v1.DanmakuFlagConfig.rec_text)
  return _s;
}
inline const std::string& DanmakuFlagConfig::_internal_rec_text() const {
  return _impl_.rec_text_.Get();
}
inline void DanmakuFlagConfig::_internal_set_rec_text(const std::string& value) {
  
  _impl_.rec_text_.Set(value, GetArenaForAllocation());
}
inline std::string* DanmakuFlagConfig::_internal_mutable_rec_text() {
  
  return _impl_.rec_text_.Mutable(GetArenaForAllocation());
}
inline std::string* DanmakuFlagConfig::release_rec_text() {
  // @@protoc_insertion_point(field_release:bilibili.community.service.dm.v1.DanmakuFlagConfig.rec_text)
  return _impl_.rec_text_.Release();
}
inline void DanmakuFlagConfig::set_allocated_rec_text(std::string* rec_text) {
  if (rec_text != nullptr) {
    
  } else {
    
  }
  _impl_.rec_text_.SetAllocated(rec_text, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.rec_text_.IsDefault()) {
    _impl_.rec_text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bilibili.community.service.dm.v1.DanmakuFlagConfig.rec_text)
}

// int32 rec_switch = 3;
inline void DanmakuFlagConfig::clear_rec_switch() {
  _impl_.rec_switch_ = 0;
}
inline int32_t DanmakuFlagConfig::_internal_rec_switch() const {
  return _impl_.rec_switch_;
}
inline int32_t DanmakuFlagConfig::rec_switch() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DanmakuFlagConfig.rec_switch)
  return _internal_rec_switch();
}
inline void DanmakuFlagConfig::_internal_set_rec_switch(int32_t value) {
  
  _impl_.rec_switch_ = value;
}
inline void DanmakuFlagConfig::set_rec_switch(int32_t value) {
  _internal_set_rec_switch(value);
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.DanmakuFlagConfig.rec_switch)
}

// -------------------------------------------------------------------

// DanmakuAIFlag

// repeated .bilibili.community.service.dm.v1.DanmakuFlag dm_flags = 1;
inline int DanmakuAIFlag::_internal_dm_flags_size() const {
  return _impl_.dm_flags_.size();
}
inline int DanmakuAIFlag::dm_flags_size() const {
  return _internal_dm_flags_size();
}
inline void DanmakuAIFlag::clear_dm_flags() {
  _impl_.dm_flags_.Clear();
}
inline ::bilibili::community::service::dm::v1::DanmakuFlag* DanmakuAIFlag::mutable_dm_flags(int index) {
  // @@protoc_insertion_point(field_mutable:bilibili.community.service.dm.v1.DanmakuAIFlag.dm_flags)
  return _impl_.dm_flags_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bilibili::community::service::dm::v1::DanmakuFlag >*
DanmakuAIFlag::mutable_dm_flags() {
  // @@protoc_insertion_point(field_mutable_list:bilibili.community.service.dm.v1.DanmakuAIFlag.dm_flags)
  return &_impl_.dm_flags_;
}
inline const ::bilibili::community::service::dm::v1::DanmakuFlag& DanmakuAIFlag::_internal_dm_flags(int index) const {
  return _impl_.dm_flags_.Get(index);
}
inline const ::bilibili::community::service::dm::v1::DanmakuFlag& DanmakuAIFlag::dm_flags(int index) const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DanmakuAIFlag.dm_flags)
  return _internal_dm_flags(index);
}
inline ::bilibili::community::service::dm::v1::DanmakuFlag* DanmakuAIFlag::_internal_add_dm_flags() {
  return _impl_.dm_flags_.Add();
}
inline ::bilibili::community::service::dm::v1::DanmakuFlag* DanmakuAIFlag::add_dm_flags() {
  ::bilibili::community::service::dm::v1::DanmakuFlag* _add = _internal_add_dm_flags();
  // @@protoc_insertion_point(field_add:bilibili.community.service.dm.v1.DanmakuAIFlag.dm_flags)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bilibili::community::service::dm::v1::DanmakuFlag >&
DanmakuAIFlag::dm_flags() const {
  // @@protoc_insertion_point(field_list:bilibili.community.service.dm.v1.DanmakuAIFlag.dm_flags)
  return _impl_.dm_flags_;
}

// -------------------------------------------------------------------

// DanmuPlayerViewConfig

// .bilibili.community.service.dm.v1.DanmuDefaultPlayerConfig danmuku_default_player_config = 1;
inline bool DanmuPlayerViewConfig::_internal_has_danmuku_default_player_config() const {
  return this != internal_default_instance() && _impl_.danmuku_default_player_config_ != nullptr;
}
inline bool DanmuPlayerViewConfig::has_danmuku_default_player_config() const {
  return _internal_has_danmuku_default_player_config();
}
inline void DanmuPlayerViewConfig::clear_danmuku_default_player_config() {
  if (GetArenaForAllocation() == nullptr && _impl_.danmuku_default_player_config_ != nullptr) {
    delete _impl_.danmuku_default_player_config_;
  }
  _impl_.danmuku_default_player_config_ = nullptr;
}
inline const ::bilibili::community::service::dm::v1::DanmuDefaultPlayerConfig& DanmuPlayerViewConfig::_internal_danmuku_default_player_config() const {
  const ::bilibili::community::service::dm::v1::DanmuDefaultPlayerConfig* p = _impl_.danmuku_default_player_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::bilibili::community::service::dm::v1::DanmuDefaultPlayerConfig&>(
      ::bilibili::community::service::dm::v1::_DanmuDefaultPlayerConfig_default_instance_);
}
inline const ::bilibili::community::service::dm::v1::DanmuDefaultPlayerConfig& DanmuPlayerViewConfig::danmuku_default_player_config() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DanmuPlayerViewConfig.danmuku_default_player_config)
  return _internal_danmuku_default_player_config();
}
inline void DanmuPlayerViewConfig::unsafe_arena_set_allocated_danmuku_default_player_config(
    ::bilibili::community::service::dm::v1::DanmuDefaultPlayerConfig* danmuku_default_player_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.danmuku_default_player_config_);
  }
  _impl_.danmuku_default_player_config_ = danmuku_default_player_config;
  if (danmuku_default_player_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bilibili.community.service.dm.v1.DanmuPlayerViewConfig.danmuku_default_player_config)
}
inline ::bilibili::community::service::dm::v1::DanmuDefaultPlayerConfig* DanmuPlayerViewConfig::release_danmuku_default_player_config() {
  
  ::bilibili::community::service::dm::v1::DanmuDefaultPlayerConfig* temp = _impl_.danmuku_default_player_config_;
  _impl_.danmuku_default_player_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bilibili::community::service::dm::v1::DanmuDefaultPlayerConfig* DanmuPlayerViewConfig::unsafe_arena_release_danmuku_default_player_config() {
  // @@protoc_insertion_point(field_release:bilibili.community.service.dm.v1.DanmuPlayerViewConfig.danmuku_default_player_config)
  
  ::bilibili::community::service::dm::v1::DanmuDefaultPlayerConfig* temp = _impl_.danmuku_default_player_config_;
  _impl_.danmuku_default_player_config_ = nullptr;
  return temp;
}
inline ::bilibili::community::service::dm::v1::DanmuDefaultPlayerConfig* DanmuPlayerViewConfig::_internal_mutable_danmuku_default_player_config() {
  
  if (_impl_.danmuku_default_player_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::bilibili::community::service::dm::v1::DanmuDefaultPlayerConfig>(GetArenaForAllocation());
    _impl_.danmuku_default_player_config_ = p;
  }
  return _impl_.danmuku_default_player_config_;
}
inline ::bilibili::community::service::dm::v1::DanmuDefaultPlayerConfig* DanmuPlayerViewConfig::mutable_danmuku_default_player_config() {
  ::bilibili::community::service::dm::v1::DanmuDefaultPlayerConfig* _msg = _internal_mutable_danmuku_default_player_config();
  // @@protoc_insertion_point(field_mutable:bilibili.community.service.dm.v1.DanmuPlayerViewConfig.danmuku_default_player_config)
  return _msg;
}
inline void DanmuPlayerViewConfig::set_allocated_danmuku_default_player_config(::bilibili::community::service::dm::v1::DanmuDefaultPlayerConfig* danmuku_default_player_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.danmuku_default_player_config_;
  }
  if (danmuku_default_player_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(danmuku_default_player_config);
    if (message_arena != submessage_arena) {
      danmuku_default_player_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, danmuku_default_player_config, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.danmuku_default_player_config_ = danmuku_default_player_config;
  // @@protoc_insertion_point(field_set_allocated:bilibili.community.service.dm.v1.DanmuPlayerViewConfig.danmuku_default_player_config)
}

// .bilibili.community.service.dm.v1.DanmuPlayerConfig danmuku_player_config = 2;
inline bool DanmuPlayerViewConfig::_internal_has_danmuku_player_config() const {
  return this != internal_default_instance() && _impl_.danmuku_player_config_ != nullptr;
}
inline bool DanmuPlayerViewConfig::has_danmuku_player_config() const {
  return _internal_has_danmuku_player_config();
}
inline void DanmuPlayerViewConfig::clear_danmuku_player_config() {
  if (GetArenaForAllocation() == nullptr && _impl_.danmuku_player_config_ != nullptr) {
    delete _impl_.danmuku_player_config_;
  }
  _impl_.danmuku_player_config_ = nullptr;
}
inline const ::bilibili::community::service::dm::v1::DanmuPlayerConfig& DanmuPlayerViewConfig::_internal_danmuku_player_config() const {
  const ::bilibili::community::service::dm::v1::DanmuPlayerConfig* p = _impl_.danmuku_player_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::bilibili::community::service::dm::v1::DanmuPlayerConfig&>(
      ::bilibili::community::service::dm::v1::_DanmuPlayerConfig_default_instance_);
}
inline const ::bilibili::community::service::dm::v1::DanmuPlayerConfig& DanmuPlayerViewConfig::danmuku_player_config() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DanmuPlayerViewConfig.danmuku_player_config)
  return _internal_danmuku_player_config();
}
inline void DanmuPlayerViewConfig::unsafe_arena_set_allocated_danmuku_player_config(
    ::bilibili::community::service::dm::v1::DanmuPlayerConfig* danmuku_player_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.danmuku_player_config_);
  }
  _impl_.danmuku_player_config_ = danmuku_player_config;
  if (danmuku_player_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bilibili.community.service.dm.v1.DanmuPlayerViewConfig.danmuku_player_config)
}
inline ::bilibili::community::service::dm::v1::DanmuPlayerConfig* DanmuPlayerViewConfig::release_danmuku_player_config() {
  
  ::bilibili::community::service::dm::v1::DanmuPlayerConfig* temp = _impl_.danmuku_player_config_;
  _impl_.danmuku_player_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bilibili::community::service::dm::v1::DanmuPlayerConfig* DanmuPlayerViewConfig::unsafe_arena_release_danmuku_player_config() {
  // @@protoc_insertion_point(field_release:bilibili.community.service.dm.v1.DanmuPlayerViewConfig.danmuku_player_config)
  
  ::bilibili::community::service::dm::v1::DanmuPlayerConfig* temp = _impl_.danmuku_player_config_;
  _impl_.danmuku_player_config_ = nullptr;
  return temp;
}
inline ::bilibili::community::service::dm::v1::DanmuPlayerConfig* DanmuPlayerViewConfig::_internal_mutable_danmuku_player_config() {
  
  if (_impl_.danmuku_player_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::bilibili::community::service::dm::v1::DanmuPlayerConfig>(GetArenaForAllocation());
    _impl_.danmuku_player_config_ = p;
  }
  return _impl_.danmuku_player_config_;
}
inline ::bilibili::community::service::dm::v1::DanmuPlayerConfig* DanmuPlayerViewConfig::mutable_danmuku_player_config() {
  ::bilibili::community::service::dm::v1::DanmuPlayerConfig* _msg = _internal_mutable_danmuku_player_config();
  // @@protoc_insertion_point(field_mutable:bilibili.community.service.dm.v1.DanmuPlayerViewConfig.danmuku_player_config)
  return _msg;
}
inline void DanmuPlayerViewConfig::set_allocated_danmuku_player_config(::bilibili::community::service::dm::v1::DanmuPlayerConfig* danmuku_player_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.danmuku_player_config_;
  }
  if (danmuku_player_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(danmuku_player_config);
    if (message_arena != submessage_arena) {
      danmuku_player_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, danmuku_player_config, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.danmuku_player_config_ = danmuku_player_config;
  // @@protoc_insertion_point(field_set_allocated:bilibili.community.service.dm.v1.DanmuPlayerViewConfig.danmuku_player_config)
}

// repeated .bilibili.community.service.dm.v1.DanmuPlayerDynamicConfig danmuku_player_dynamic_config = 3;
inline int DanmuPlayerViewConfig::_internal_danmuku_player_dynamic_config_size() const {
  return _impl_.danmuku_player_dynamic_config_.size();
}
inline int DanmuPlayerViewConfig::danmuku_player_dynamic_config_size() const {
  return _internal_danmuku_player_dynamic_config_size();
}
inline void DanmuPlayerViewConfig::clear_danmuku_player_dynamic_config() {
  _impl_.danmuku_player_dynamic_config_.Clear();
}
inline ::bilibili::community::service::dm::v1::DanmuPlayerDynamicConfig* DanmuPlayerViewConfig::mutable_danmuku_player_dynamic_config(int index) {
  // @@protoc_insertion_point(field_mutable:bilibili.community.service.dm.v1.DanmuPlayerViewConfig.danmuku_player_dynamic_config)
  return _impl_.danmuku_player_dynamic_config_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bilibili::community::service::dm::v1::DanmuPlayerDynamicConfig >*
DanmuPlayerViewConfig::mutable_danmuku_player_dynamic_config() {
  // @@protoc_insertion_point(field_mutable_list:bilibili.community.service.dm.v1.DanmuPlayerViewConfig.danmuku_player_dynamic_config)
  return &_impl_.danmuku_player_dynamic_config_;
}
inline const ::bilibili::community::service::dm::v1::DanmuPlayerDynamicConfig& DanmuPlayerViewConfig::_internal_danmuku_player_dynamic_config(int index) const {
  return _impl_.danmuku_player_dynamic_config_.Get(index);
}
inline const ::bilibili::community::service::dm::v1::DanmuPlayerDynamicConfig& DanmuPlayerViewConfig::danmuku_player_dynamic_config(int index) const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DanmuPlayerViewConfig.danmuku_player_dynamic_config)
  return _internal_danmuku_player_dynamic_config(index);
}
inline ::bilibili::community::service::dm::v1::DanmuPlayerDynamicConfig* DanmuPlayerViewConfig::_internal_add_danmuku_player_dynamic_config() {
  return _impl_.danmuku_player_dynamic_config_.Add();
}
inline ::bilibili::community::service::dm::v1::DanmuPlayerDynamicConfig* DanmuPlayerViewConfig::add_danmuku_player_dynamic_config() {
  ::bilibili::community::service::dm::v1::DanmuPlayerDynamicConfig* _add = _internal_add_danmuku_player_dynamic_config();
  // @@protoc_insertion_point(field_add:bilibili.community.service.dm.v1.DanmuPlayerViewConfig.danmuku_player_dynamic_config)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bilibili::community::service::dm::v1::DanmuPlayerDynamicConfig >&
DanmuPlayerViewConfig::danmuku_player_dynamic_config() const {
  // @@protoc_insertion_point(field_list:bilibili.community.service.dm.v1.DanmuPlayerViewConfig.danmuku_player_dynamic_config)
  return _impl_.danmuku_player_dynamic_config_;
}

// -------------------------------------------------------------------

// DanmuDefaultPlayerConfig

// bool player_danmaku_use_default_config = 1;
inline void DanmuDefaultPlayerConfig::clear_player_danmaku_use_default_config() {
  _impl_.player_danmaku_use_default_config_ = false;
}
inline bool DanmuDefaultPlayerConfig::_internal_player_danmaku_use_default_config() const {
  return _impl_.player_danmaku_use_default_config_;
}
inline bool DanmuDefaultPlayerConfig::player_danmaku_use_default_config() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DanmuDefaultPlayerConfig.player_danmaku_use_default_config)
  return _internal_player_danmaku_use_default_config();
}
inline void DanmuDefaultPlayerConfig::_internal_set_player_danmaku_use_default_config(bool value) {
  
  _impl_.player_danmaku_use_default_config_ = value;
}
inline void DanmuDefaultPlayerConfig::set_player_danmaku_use_default_config(bool value) {
  _internal_set_player_danmaku_use_default_config(value);
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.DanmuDefaultPlayerConfig.player_danmaku_use_default_config)
}

// bool player_danmaku_ai_recommended_switch = 4;
inline void DanmuDefaultPlayerConfig::clear_player_danmaku_ai_recommended_switch() {
  _impl_.player_danmaku_ai_recommended_switch_ = false;
}
inline bool DanmuDefaultPlayerConfig::_internal_player_danmaku_ai_recommended_switch() const {
  return _impl_.player_danmaku_ai_recommended_switch_;
}
inline bool DanmuDefaultPlayerConfig::player_danmaku_ai_recommended_switch() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DanmuDefaultPlayerConfig.player_danmaku_ai_recommended_switch)
  return _internal_player_danmaku_ai_recommended_switch();
}
inline void DanmuDefaultPlayerConfig::_internal_set_player_danmaku_ai_recommended_switch(bool value) {
  
  _impl_.player_danmaku_ai_recommended_switch_ = value;
}
inline void DanmuDefaultPlayerConfig::set_player_danmaku_ai_recommended_switch(bool value) {
  _internal_set_player_danmaku_ai_recommended_switch(value);
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.DanmuDefaultPlayerConfig.player_danmaku_ai_recommended_switch)
}

// int32 player_danmaku_ai_recommended_level = 5;
inline void DanmuDefaultPlayerConfig::clear_player_danmaku_ai_recommended_level() {
  _impl_.player_danmaku_ai_recommended_level_ = 0;
}
inline int32_t DanmuDefaultPlayerConfig::_internal_player_danmaku_ai_recommended_level() const {
  return _impl_.player_danmaku_ai_recommended_level_;
}
inline int32_t DanmuDefaultPlayerConfig::player_danmaku_ai_recommended_level() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DanmuDefaultPlayerConfig.player_danmaku_ai_recommended_level)
  return _internal_player_danmaku_ai_recommended_level();
}
inline void DanmuDefaultPlayerConfig::_internal_set_player_danmaku_ai_recommended_level(int32_t value) {
  
  _impl_.player_danmaku_ai_recommended_level_ = value;
}
inline void DanmuDefaultPlayerConfig::set_player_danmaku_ai_recommended_level(int32_t value) {
  _internal_set_player_danmaku_ai_recommended_level(value);
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.DanmuDefaultPlayerConfig.player_danmaku_ai_recommended_level)
}

// bool player_danmaku_blocktop = 6;
inline void DanmuDefaultPlayerConfig::clear_player_danmaku_blocktop() {
  _impl_.player_danmaku_blocktop_ = false;
}
inline bool DanmuDefaultPlayerConfig::_internal_player_danmaku_blocktop() const {
  return _impl_.player_danmaku_blocktop_;
}
inline bool DanmuDefaultPlayerConfig::player_danmaku_blocktop() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DanmuDefaultPlayerConfig.player_danmaku_blocktop)
  return _internal_player_danmaku_blocktop();
}
inline void DanmuDefaultPlayerConfig::_internal_set_player_danmaku_blocktop(bool value) {
  
  _impl_.player_danmaku_blocktop_ = value;
}
inline void DanmuDefaultPlayerConfig::set_player_danmaku_blocktop(bool value) {
  _internal_set_player_danmaku_blocktop(value);
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.DanmuDefaultPlayerConfig.player_danmaku_blocktop)
}

// bool player_danmaku_blockscroll = 7;
inline void DanmuDefaultPlayerConfig::clear_player_danmaku_blockscroll() {
  _impl_.player_danmaku_blockscroll_ = false;
}
inline bool DanmuDefaultPlayerConfig::_internal_player_danmaku_blockscroll() const {
  return _impl_.player_danmaku_blockscroll_;
}
inline bool DanmuDefaultPlayerConfig::player_danmaku_blockscroll() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DanmuDefaultPlayerConfig.player_danmaku_blockscroll)
  return _internal_player_danmaku_blockscroll();
}
inline void DanmuDefaultPlayerConfig::_internal_set_player_danmaku_blockscroll(bool value) {
  
  _impl_.player_danmaku_blockscroll_ = value;
}
inline void DanmuDefaultPlayerConfig::set_player_danmaku_blockscroll(bool value) {
  _internal_set_player_danmaku_blockscroll(value);
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.DanmuDefaultPlayerConfig.player_danmaku_blockscroll)
}

// bool player_danmaku_blockbottom = 8;
inline void DanmuDefaultPlayerConfig::clear_player_danmaku_blockbottom() {
  _impl_.player_danmaku_blockbottom_ = false;
}
inline bool DanmuDefaultPlayerConfig::_internal_player_danmaku_blockbottom() const {
  return _impl_.player_danmaku_blockbottom_;
}
inline bool DanmuDefaultPlayerConfig::player_danmaku_blockbottom() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DanmuDefaultPlayerConfig.player_danmaku_blockbottom)
  return _internal_player_danmaku_blockbottom();
}
inline void DanmuDefaultPlayerConfig::_internal_set_player_danmaku_blockbottom(bool value) {
  
  _impl_.player_danmaku_blockbottom_ = value;
}
inline void DanmuDefaultPlayerConfig::set_player_danmaku_blockbottom(bool value) {
  _internal_set_player_danmaku_blockbottom(value);
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.DanmuDefaultPlayerConfig.player_danmaku_blockbottom)
}

// bool player_danmaku_blockcolorful = 9;
inline void DanmuDefaultPlayerConfig::clear_player_danmaku_blockcolorful() {
  _impl_.player_danmaku_blockcolorful_ = false;
}
inline bool DanmuDefaultPlayerConfig::_internal_player_danmaku_blockcolorful() const {
  return _impl_.player_danmaku_blockcolorful_;
}
inline bool DanmuDefaultPlayerConfig::player_danmaku_blockcolorful() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DanmuDefaultPlayerConfig.player_danmaku_blockcolorful)
  return _internal_player_danmaku_blockcolorful();
}
inline void DanmuDefaultPlayerConfig::_internal_set_player_danmaku_blockcolorful(bool value) {
  
  _impl_.player_danmaku_blockcolorful_ = value;
}
inline void DanmuDefaultPlayerConfig::set_player_danmaku_blockcolorful(bool value) {
  _internal_set_player_danmaku_blockcolorful(value);
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.DanmuDefaultPlayerConfig.player_danmaku_blockcolorful)
}

// bool player_danmaku_blockrepeat = 10;
inline void DanmuDefaultPlayerConfig::clear_player_danmaku_blockrepeat() {
  _impl_.player_danmaku_blockrepeat_ = false;
}
inline bool DanmuDefaultPlayerConfig::_internal_player_danmaku_blockrepeat() const {
  return _impl_.player_danmaku_blockrepeat_;
}
inline bool DanmuDefaultPlayerConfig::player_danmaku_blockrepeat() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DanmuDefaultPlayerConfig.player_danmaku_blockrepeat)
  return _internal_player_danmaku_blockrepeat();
}
inline void DanmuDefaultPlayerConfig::_internal_set_player_danmaku_blockrepeat(bool value) {
  
  _impl_.player_danmaku_blockrepeat_ = value;
}
inline void DanmuDefaultPlayerConfig::set_player_danmaku_blockrepeat(bool value) {
  _internal_set_player_danmaku_blockrepeat(value);
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.DanmuDefaultPlayerConfig.player_danmaku_blockrepeat)
}

// bool player_danmaku_blockspecial = 11;
inline void DanmuDefaultPlayerConfig::clear_player_danmaku_blockspecial() {
  _impl_.player_danmaku_blockspecial_ = false;
}
inline bool DanmuDefaultPlayerConfig::_internal_player_danmaku_blockspecial() const {
  return _impl_.player_danmaku_blockspecial_;
}
inline bool DanmuDefaultPlayerConfig::player_danmaku_blockspecial() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DanmuDefaultPlayerConfig.player_danmaku_blockspecial)
  return _internal_player_danmaku_blockspecial();
}
inline void DanmuDefaultPlayerConfig::_internal_set_player_danmaku_blockspecial(bool value) {
  
  _impl_.player_danmaku_blockspecial_ = value;
}
inline void DanmuDefaultPlayerConfig::set_player_danmaku_blockspecial(bool value) {
  _internal_set_player_danmaku_blockspecial(value);
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.DanmuDefaultPlayerConfig.player_danmaku_blockspecial)
}

// float player_danmaku_opacity = 12;
inline void DanmuDefaultPlayerConfig::clear_player_danmaku_opacity() {
  _impl_.player_danmaku_opacity_ = 0;
}
inline float DanmuDefaultPlayerConfig::_internal_player_danmaku_opacity() const {
  return _impl_.player_danmaku_opacity_;
}
inline float DanmuDefaultPlayerConfig::player_danmaku_opacity() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DanmuDefaultPlayerConfig.player_danmaku_opacity)
  return _internal_player_danmaku_opacity();
}
inline void DanmuDefaultPlayerConfig::_internal_set_player_danmaku_opacity(float value) {
  
  _impl_.player_danmaku_opacity_ = value;
}
inline void DanmuDefaultPlayerConfig::set_player_danmaku_opacity(float value) {
  _internal_set_player_danmaku_opacity(value);
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.DanmuDefaultPlayerConfig.player_danmaku_opacity)
}

// float player_danmaku_scalingfactor = 13;
inline void DanmuDefaultPlayerConfig::clear_player_danmaku_scalingfactor() {
  _impl_.player_danmaku_scalingfactor_ = 0;
}
inline float DanmuDefaultPlayerConfig::_internal_player_danmaku_scalingfactor() const {
  return _impl_.player_danmaku_scalingfactor_;
}
inline float DanmuDefaultPlayerConfig::player_danmaku_scalingfactor() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DanmuDefaultPlayerConfig.player_danmaku_scalingfactor)
  return _internal_player_danmaku_scalingfactor();
}
inline void DanmuDefaultPlayerConfig::_internal_set_player_danmaku_scalingfactor(float value) {
  
  _impl_.player_danmaku_scalingfactor_ = value;
}
inline void DanmuDefaultPlayerConfig::set_player_danmaku_scalingfactor(float value) {
  _internal_set_player_danmaku_scalingfactor(value);
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.DanmuDefaultPlayerConfig.player_danmaku_scalingfactor)
}

// float player_danmaku_domain = 14;
inline void DanmuDefaultPlayerConfig::clear_player_danmaku_domain() {
  _impl_.player_danmaku_domain_ = 0;
}
inline float DanmuDefaultPlayerConfig::_internal_player_danmaku_domain() const {
  return _impl_.player_danmaku_domain_;
}
inline float DanmuDefaultPlayerConfig::player_danmaku_domain() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DanmuDefaultPlayerConfig.player_danmaku_domain)
  return _internal_player_danmaku_domain();
}
inline void DanmuDefaultPlayerConfig::_internal_set_player_danmaku_domain(float value) {
  
  _impl_.player_danmaku_domain_ = value;
}
inline void DanmuDefaultPlayerConfig::set_player_danmaku_domain(float value) {
  _internal_set_player_danmaku_domain(value);
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.DanmuDefaultPlayerConfig.player_danmaku_domain)
}

// int32 player_danmaku_speed = 15;
inline void DanmuDefaultPlayerConfig::clear_player_danmaku_speed() {
  _impl_.player_danmaku_speed_ = 0;
}
inline int32_t DanmuDefaultPlayerConfig::_internal_player_danmaku_speed() const {
  return _impl_.player_danmaku_speed_;
}
inline int32_t DanmuDefaultPlayerConfig::player_danmaku_speed() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DanmuDefaultPlayerConfig.player_danmaku_speed)
  return _internal_player_danmaku_speed();
}
inline void DanmuDefaultPlayerConfig::_internal_set_player_danmaku_speed(int32_t value) {
  
  _impl_.player_danmaku_speed_ = value;
}
inline void DanmuDefaultPlayerConfig::set_player_danmaku_speed(int32_t value) {
  _internal_set_player_danmaku_speed(value);
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.DanmuDefaultPlayerConfig.player_danmaku_speed)
}

// bool inline_player_danmaku_switch = 16;
inline void DanmuDefaultPlayerConfig::clear_inline_player_danmaku_switch() {
  _impl_.inline_player_danmaku_switch_ = false;
}
inline bool DanmuDefaultPlayerConfig::_internal_inline_player_danmaku_switch() const {
  return _impl_.inline_player_danmaku_switch_;
}
inline bool DanmuDefaultPlayerConfig::inline_player_danmaku_switch() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DanmuDefaultPlayerConfig.inline_player_danmaku_switch)
  return _internal_inline_player_danmaku_switch();
}
inline void DanmuDefaultPlayerConfig::_internal_set_inline_player_danmaku_switch(bool value) {
  
  _impl_.inline_player_danmaku_switch_ = value;
}
inline void DanmuDefaultPlayerConfig::set_inline_player_danmaku_switch(bool value) {
  _internal_set_inline_player_danmaku_switch(value);
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.DanmuDefaultPlayerConfig.inline_player_danmaku_switch)
}

// -------------------------------------------------------------------

// DanmuPlayerConfig

// bool player_danmaku_switch = 1;
inline void DanmuPlayerConfig::clear_player_danmaku_switch() {
  _impl_.player_danmaku_switch_ = false;
}
inline bool DanmuPlayerConfig::_internal_player_danmaku_switch() const {
  return _impl_.player_danmaku_switch_;
}
inline bool DanmuPlayerConfig::player_danmaku_switch() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DanmuPlayerConfig.player_danmaku_switch)
  return _internal_player_danmaku_switch();
}
inline void DanmuPlayerConfig::_internal_set_player_danmaku_switch(bool value) {
  
  _impl_.player_danmaku_switch_ = value;
}
inline void DanmuPlayerConfig::set_player_danmaku_switch(bool value) {
  _internal_set_player_danmaku_switch(value);
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.DanmuPlayerConfig.player_danmaku_switch)
}

// bool player_danmaku_switch_save = 2;
inline void DanmuPlayerConfig::clear_player_danmaku_switch_save() {
  _impl_.player_danmaku_switch_save_ = false;
}
inline bool DanmuPlayerConfig::_internal_player_danmaku_switch_save() const {
  return _impl_.player_danmaku_switch_save_;
}
inline bool DanmuPlayerConfig::player_danmaku_switch_save() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DanmuPlayerConfig.player_danmaku_switch_save)
  return _internal_player_danmaku_switch_save();
}
inline void DanmuPlayerConfig::_internal_set_player_danmaku_switch_save(bool value) {
  
  _impl_.player_danmaku_switch_save_ = value;
}
inline void DanmuPlayerConfig::set_player_danmaku_switch_save(bool value) {
  _internal_set_player_danmaku_switch_save(value);
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.DanmuPlayerConfig.player_danmaku_switch_save)
}

// bool player_danmaku_use_default_config = 3;
inline void DanmuPlayerConfig::clear_player_danmaku_use_default_config() {
  _impl_.player_danmaku_use_default_config_ = false;
}
inline bool DanmuPlayerConfig::_internal_player_danmaku_use_default_config() const {
  return _impl_.player_danmaku_use_default_config_;
}
inline bool DanmuPlayerConfig::player_danmaku_use_default_config() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DanmuPlayerConfig.player_danmaku_use_default_config)
  return _internal_player_danmaku_use_default_config();
}
inline void DanmuPlayerConfig::_internal_set_player_danmaku_use_default_config(bool value) {
  
  _impl_.player_danmaku_use_default_config_ = value;
}
inline void DanmuPlayerConfig::set_player_danmaku_use_default_config(bool value) {
  _internal_set_player_danmaku_use_default_config(value);
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.DanmuPlayerConfig.player_danmaku_use_default_config)
}

// bool player_danmaku_ai_recommended_switch = 4;
inline void DanmuPlayerConfig::clear_player_danmaku_ai_recommended_switch() {
  _impl_.player_danmaku_ai_recommended_switch_ = false;
}
inline bool DanmuPlayerConfig::_internal_player_danmaku_ai_recommended_switch() const {
  return _impl_.player_danmaku_ai_recommended_switch_;
}
inline bool DanmuPlayerConfig::player_danmaku_ai_recommended_switch() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DanmuPlayerConfig.player_danmaku_ai_recommended_switch)
  return _internal_player_danmaku_ai_recommended_switch();
}
inline void DanmuPlayerConfig::_internal_set_player_danmaku_ai_recommended_switch(bool value) {
  
  _impl_.player_danmaku_ai_recommended_switch_ = value;
}
inline void DanmuPlayerConfig::set_player_danmaku_ai_recommended_switch(bool value) {
  _internal_set_player_danmaku_ai_recommended_switch(value);
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.DanmuPlayerConfig.player_danmaku_ai_recommended_switch)
}

// int32 player_danmaku_ai_recommended_level = 5;
inline void DanmuPlayerConfig::clear_player_danmaku_ai_recommended_level() {
  _impl_.player_danmaku_ai_recommended_level_ = 0;
}
inline int32_t DanmuPlayerConfig::_internal_player_danmaku_ai_recommended_level() const {
  return _impl_.player_danmaku_ai_recommended_level_;
}
inline int32_t DanmuPlayerConfig::player_danmaku_ai_recommended_level() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DanmuPlayerConfig.player_danmaku_ai_recommended_level)
  return _internal_player_danmaku_ai_recommended_level();
}
inline void DanmuPlayerConfig::_internal_set_player_danmaku_ai_recommended_level(int32_t value) {
  
  _impl_.player_danmaku_ai_recommended_level_ = value;
}
inline void DanmuPlayerConfig::set_player_danmaku_ai_recommended_level(int32_t value) {
  _internal_set_player_danmaku_ai_recommended_level(value);
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.DanmuPlayerConfig.player_danmaku_ai_recommended_level)
}

// bool player_danmaku_blocktop = 6;
inline void DanmuPlayerConfig::clear_player_danmaku_blocktop() {
  _impl_.player_danmaku_blocktop_ = false;
}
inline bool DanmuPlayerConfig::_internal_player_danmaku_blocktop() const {
  return _impl_.player_danmaku_blocktop_;
}
inline bool DanmuPlayerConfig::player_danmaku_blocktop() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DanmuPlayerConfig.player_danmaku_blocktop)
  return _internal_player_danmaku_blocktop();
}
inline void DanmuPlayerConfig::_internal_set_player_danmaku_blocktop(bool value) {
  
  _impl_.player_danmaku_blocktop_ = value;
}
inline void DanmuPlayerConfig::set_player_danmaku_blocktop(bool value) {
  _internal_set_player_danmaku_blocktop(value);
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.DanmuPlayerConfig.player_danmaku_blocktop)
}

// bool player_danmaku_blockscroll = 7;
inline void DanmuPlayerConfig::clear_player_danmaku_blockscroll() {
  _impl_.player_danmaku_blockscroll_ = false;
}
inline bool DanmuPlayerConfig::_internal_player_danmaku_blockscroll() const {
  return _impl_.player_danmaku_blockscroll_;
}
inline bool DanmuPlayerConfig::player_danmaku_blockscroll() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DanmuPlayerConfig.player_danmaku_blockscroll)
  return _internal_player_danmaku_blockscroll();
}
inline void DanmuPlayerConfig::_internal_set_player_danmaku_blockscroll(bool value) {
  
  _impl_.player_danmaku_blockscroll_ = value;
}
inline void DanmuPlayerConfig::set_player_danmaku_blockscroll(bool value) {
  _internal_set_player_danmaku_blockscroll(value);
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.DanmuPlayerConfig.player_danmaku_blockscroll)
}

// bool player_danmaku_blockbottom = 8;
inline void DanmuPlayerConfig::clear_player_danmaku_blockbottom() {
  _impl_.player_danmaku_blockbottom_ = false;
}
inline bool DanmuPlayerConfig::_internal_player_danmaku_blockbottom() const {
  return _impl_.player_danmaku_blockbottom_;
}
inline bool DanmuPlayerConfig::player_danmaku_blockbottom() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DanmuPlayerConfig.player_danmaku_blockbottom)
  return _internal_player_danmaku_blockbottom();
}
inline void DanmuPlayerConfig::_internal_set_player_danmaku_blockbottom(bool value) {
  
  _impl_.player_danmaku_blockbottom_ = value;
}
inline void DanmuPlayerConfig::set_player_danmaku_blockbottom(bool value) {
  _internal_set_player_danmaku_blockbottom(value);
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.DanmuPlayerConfig.player_danmaku_blockbottom)
}

// bool player_danmaku_blockcolorful = 9;
inline void DanmuPlayerConfig::clear_player_danmaku_blockcolorful() {
  _impl_.player_danmaku_blockcolorful_ = false;
}
inline bool DanmuPlayerConfig::_internal_player_danmaku_blockcolorful() const {
  return _impl_.player_danmaku_blockcolorful_;
}
inline bool DanmuPlayerConfig::player_danmaku_blockcolorful() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DanmuPlayerConfig.player_danmaku_blockcolorful)
  return _internal_player_danmaku_blockcolorful();
}
inline void DanmuPlayerConfig::_internal_set_player_danmaku_blockcolorful(bool value) {
  
  _impl_.player_danmaku_blockcolorful_ = value;
}
inline void DanmuPlayerConfig::set_player_danmaku_blockcolorful(bool value) {
  _internal_set_player_danmaku_blockcolorful(value);
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.DanmuPlayerConfig.player_danmaku_blockcolorful)
}

// bool player_danmaku_blockrepeat = 10;
inline void DanmuPlayerConfig::clear_player_danmaku_blockrepeat() {
  _impl_.player_danmaku_blockrepeat_ = false;
}
inline bool DanmuPlayerConfig::_internal_player_danmaku_blockrepeat() const {
  return _impl_.player_danmaku_blockrepeat_;
}
inline bool DanmuPlayerConfig::player_danmaku_blockrepeat() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DanmuPlayerConfig.player_danmaku_blockrepeat)
  return _internal_player_danmaku_blockrepeat();
}
inline void DanmuPlayerConfig::_internal_set_player_danmaku_blockrepeat(bool value) {
  
  _impl_.player_danmaku_blockrepeat_ = value;
}
inline void DanmuPlayerConfig::set_player_danmaku_blockrepeat(bool value) {
  _internal_set_player_danmaku_blockrepeat(value);
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.DanmuPlayerConfig.player_danmaku_blockrepeat)
}

// bool player_danmaku_blockspecial = 11;
inline void DanmuPlayerConfig::clear_player_danmaku_blockspecial() {
  _impl_.player_danmaku_blockspecial_ = false;
}
inline bool DanmuPlayerConfig::_internal_player_danmaku_blockspecial() const {
  return _impl_.player_danmaku_blockspecial_;
}
inline bool DanmuPlayerConfig::player_danmaku_blockspecial() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DanmuPlayerConfig.player_danmaku_blockspecial)
  return _internal_player_danmaku_blockspecial();
}
inline void DanmuPlayerConfig::_internal_set_player_danmaku_blockspecial(bool value) {
  
  _impl_.player_danmaku_blockspecial_ = value;
}
inline void DanmuPlayerConfig::set_player_danmaku_blockspecial(bool value) {
  _internal_set_player_danmaku_blockspecial(value);
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.DanmuPlayerConfig.player_danmaku_blockspecial)
}

// float player_danmaku_opacity = 12;
inline void DanmuPlayerConfig::clear_player_danmaku_opacity() {
  _impl_.player_danmaku_opacity_ = 0;
}
inline float DanmuPlayerConfig::_internal_player_danmaku_opacity() const {
  return _impl_.player_danmaku_opacity_;
}
inline float DanmuPlayerConfig::player_danmaku_opacity() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DanmuPlayerConfig.player_danmaku_opacity)
  return _internal_player_danmaku_opacity();
}
inline void DanmuPlayerConfig::_internal_set_player_danmaku_opacity(float value) {
  
  _impl_.player_danmaku_opacity_ = value;
}
inline void DanmuPlayerConfig::set_player_danmaku_opacity(float value) {
  _internal_set_player_danmaku_opacity(value);
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.DanmuPlayerConfig.player_danmaku_opacity)
}

// float player_danmaku_scalingfactor = 13;
inline void DanmuPlayerConfig::clear_player_danmaku_scalingfactor() {
  _impl_.player_danmaku_scalingfactor_ = 0;
}
inline float DanmuPlayerConfig::_internal_player_danmaku_scalingfactor() const {
  return _impl_.player_danmaku_scalingfactor_;
}
inline float DanmuPlayerConfig::player_danmaku_scalingfactor() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DanmuPlayerConfig.player_danmaku_scalingfactor)
  return _internal_player_danmaku_scalingfactor();
}
inline void DanmuPlayerConfig::_internal_set_player_danmaku_scalingfactor(float value) {
  
  _impl_.player_danmaku_scalingfactor_ = value;
}
inline void DanmuPlayerConfig::set_player_danmaku_scalingfactor(float value) {
  _internal_set_player_danmaku_scalingfactor(value);
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.DanmuPlayerConfig.player_danmaku_scalingfactor)
}

// float player_danmaku_domain = 14;
inline void DanmuPlayerConfig::clear_player_danmaku_domain() {
  _impl_.player_danmaku_domain_ = 0;
}
inline float DanmuPlayerConfig::_internal_player_danmaku_domain() const {
  return _impl_.player_danmaku_domain_;
}
inline float DanmuPlayerConfig::player_danmaku_domain() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DanmuPlayerConfig.player_danmaku_domain)
  return _internal_player_danmaku_domain();
}
inline void DanmuPlayerConfig::_internal_set_player_danmaku_domain(float value) {
  
  _impl_.player_danmaku_domain_ = value;
}
inline void DanmuPlayerConfig::set_player_danmaku_domain(float value) {
  _internal_set_player_danmaku_domain(value);
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.DanmuPlayerConfig.player_danmaku_domain)
}

// int32 player_danmaku_speed = 15;
inline void DanmuPlayerConfig::clear_player_danmaku_speed() {
  _impl_.player_danmaku_speed_ = 0;
}
inline int32_t DanmuPlayerConfig::_internal_player_danmaku_speed() const {
  return _impl_.player_danmaku_speed_;
}
inline int32_t DanmuPlayerConfig::player_danmaku_speed() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DanmuPlayerConfig.player_danmaku_speed)
  return _internal_player_danmaku_speed();
}
inline void DanmuPlayerConfig::_internal_set_player_danmaku_speed(int32_t value) {
  
  _impl_.player_danmaku_speed_ = value;
}
inline void DanmuPlayerConfig::set_player_danmaku_speed(int32_t value) {
  _internal_set_player_danmaku_speed(value);
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.DanmuPlayerConfig.player_danmaku_speed)
}

// bool player_danmaku_enableblocklist = 16;
inline void DanmuPlayerConfig::clear_player_danmaku_enableblocklist() {
  _impl_.player_danmaku_enableblocklist_ = false;
}
inline bool DanmuPlayerConfig::_internal_player_danmaku_enableblocklist() const {
  return _impl_.player_danmaku_enableblocklist_;
}
inline bool DanmuPlayerConfig::player_danmaku_enableblocklist() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DanmuPlayerConfig.player_danmaku_enableblocklist)
  return _internal_player_danmaku_enableblocklist();
}
inline void DanmuPlayerConfig::_internal_set_player_danmaku_enableblocklist(bool value) {
  
  _impl_.player_danmaku_enableblocklist_ = value;
}
inline void DanmuPlayerConfig::set_player_danmaku_enableblocklist(bool value) {
  _internal_set_player_danmaku_enableblocklist(value);
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.DanmuPlayerConfig.player_danmaku_enableblocklist)
}

// bool inline_player_danmaku_switch = 17;
inline void DanmuPlayerConfig::clear_inline_player_danmaku_switch() {
  _impl_.inline_player_danmaku_switch_ = false;
}
inline bool DanmuPlayerConfig::_internal_inline_player_danmaku_switch() const {
  return _impl_.inline_player_danmaku_switch_;
}
inline bool DanmuPlayerConfig::inline_player_danmaku_switch() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DanmuPlayerConfig.inline_player_danmaku_switch)
  return _internal_inline_player_danmaku_switch();
}
inline void DanmuPlayerConfig::_internal_set_inline_player_danmaku_switch(bool value) {
  
  _impl_.inline_player_danmaku_switch_ = value;
}
inline void DanmuPlayerConfig::set_inline_player_danmaku_switch(bool value) {
  _internal_set_inline_player_danmaku_switch(value);
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.DanmuPlayerConfig.inline_player_danmaku_switch)
}

// int32 inline_player_danmaku_config = 18;
inline void DanmuPlayerConfig::clear_inline_player_danmaku_config() {
  _impl_.inline_player_danmaku_config_ = 0;
}
inline int32_t DanmuPlayerConfig::_internal_inline_player_danmaku_config() const {
  return _impl_.inline_player_danmaku_config_;
}
inline int32_t DanmuPlayerConfig::inline_player_danmaku_config() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DanmuPlayerConfig.inline_player_danmaku_config)
  return _internal_inline_player_danmaku_config();
}
inline void DanmuPlayerConfig::_internal_set_inline_player_danmaku_config(int32_t value) {
  
  _impl_.inline_player_danmaku_config_ = value;
}
inline void DanmuPlayerConfig::set_inline_player_danmaku_config(int32_t value) {
  _internal_set_inline_player_danmaku_config(value);
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.DanmuPlayerConfig.inline_player_danmaku_config)
}

// -------------------------------------------------------------------

// DanmuPlayerDynamicConfig

// int32 progress = 1;
inline void DanmuPlayerDynamicConfig::clear_progress() {
  _impl_.progress_ = 0;
}
inline int32_t DanmuPlayerDynamicConfig::_internal_progress() const {
  return _impl_.progress_;
}
inline int32_t DanmuPlayerDynamicConfig::progress() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DanmuPlayerDynamicConfig.progress)
  return _internal_progress();
}
inline void DanmuPlayerDynamicConfig::_internal_set_progress(int32_t value) {
  
  _impl_.progress_ = value;
}
inline void DanmuPlayerDynamicConfig::set_progress(int32_t value) {
  _internal_set_progress(value);
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.DanmuPlayerDynamicConfig.progress)
}

// float player_danmaku_domain = 2;
inline void DanmuPlayerDynamicConfig::clear_player_danmaku_domain() {
  _impl_.player_danmaku_domain_ = 0;
}
inline float DanmuPlayerDynamicConfig::_internal_player_danmaku_domain() const {
  return _impl_.player_danmaku_domain_;
}
inline float DanmuPlayerDynamicConfig::player_danmaku_domain() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.DanmuPlayerDynamicConfig.player_danmaku_domain)
  return _internal_player_danmaku_domain();
}
inline void DanmuPlayerDynamicConfig::_internal_set_player_danmaku_domain(float value) {
  
  _impl_.player_danmaku_domain_ = value;
}
inline void DanmuPlayerDynamicConfig::set_player_danmaku_domain(float value) {
  _internal_set_player_danmaku_domain(value);
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.DanmuPlayerDynamicConfig.player_danmaku_domain)
}

// -------------------------------------------------------------------

// PlayerDanmakuSwitch

// bool value = 1;
inline void PlayerDanmakuSwitch::clear_value() {
  _impl_.value_ = false;
}
inline bool PlayerDanmakuSwitch::_internal_value() const {
  return _impl_.value_;
}
inline bool PlayerDanmakuSwitch::value() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.PlayerDanmakuSwitch.value)
  return _internal_value();
}
inline void PlayerDanmakuSwitch::_internal_set_value(bool value) {
  
  _impl_.value_ = value;
}
inline void PlayerDanmakuSwitch::set_value(bool value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.PlayerDanmakuSwitch.value)
}

// bool canIgnore = 2;
inline void PlayerDanmakuSwitch::clear_canignore() {
  _impl_.canignore_ = false;
}
inline bool PlayerDanmakuSwitch::_internal_canignore() const {
  return _impl_.canignore_;
}
inline bool PlayerDanmakuSwitch::canignore() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.PlayerDanmakuSwitch.canIgnore)
  return _internal_canignore();
}
inline void PlayerDanmakuSwitch::_internal_set_canignore(bool value) {
  
  _impl_.canignore_ = value;
}
inline void PlayerDanmakuSwitch::set_canignore(bool value) {
  _internal_set_canignore(value);
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.PlayerDanmakuSwitch.canIgnore)
}

// -------------------------------------------------------------------

// PlayerDanmakuSwitchSave

// bool value = 1;
inline void PlayerDanmakuSwitchSave::clear_value() {
  _impl_.value_ = false;
}
inline bool PlayerDanmakuSwitchSave::_internal_value() const {
  return _impl_.value_;
}
inline bool PlayerDanmakuSwitchSave::value() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.PlayerDanmakuSwitchSave.value)
  return _internal_value();
}
inline void PlayerDanmakuSwitchSave::_internal_set_value(bool value) {
  
  _impl_.value_ = value;
}
inline void PlayerDanmakuSwitchSave::set_value(bool value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.PlayerDanmakuSwitchSave.value)
}

// -------------------------------------------------------------------

// PlayerDanmakuUseDefaultConfig

// bool value = 1;
inline void PlayerDanmakuUseDefaultConfig::clear_value() {
  _impl_.value_ = false;
}
inline bool PlayerDanmakuUseDefaultConfig::_internal_value() const {
  return _impl_.value_;
}
inline bool PlayerDanmakuUseDefaultConfig::value() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.PlayerDanmakuUseDefaultConfig.value)
  return _internal_value();
}
inline void PlayerDanmakuUseDefaultConfig::_internal_set_value(bool value) {
  
  _impl_.value_ = value;
}
inline void PlayerDanmakuUseDefaultConfig::set_value(bool value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.PlayerDanmakuUseDefaultConfig.value)
}

// -------------------------------------------------------------------

// PlayerDanmakuAiRecommendedSwitch

// bool value = 1;
inline void PlayerDanmakuAiRecommendedSwitch::clear_value() {
  _impl_.value_ = false;
}
inline bool PlayerDanmakuAiRecommendedSwitch::_internal_value() const {
  return _impl_.value_;
}
inline bool PlayerDanmakuAiRecommendedSwitch::value() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedSwitch.value)
  return _internal_value();
}
inline void PlayerDanmakuAiRecommendedSwitch::_internal_set_value(bool value) {
  
  _impl_.value_ = value;
}
inline void PlayerDanmakuAiRecommendedSwitch::set_value(bool value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedSwitch.value)
}

// -------------------------------------------------------------------

// PlayerDanmakuAiRecommendedLevel

// bool value = 1;
inline void PlayerDanmakuAiRecommendedLevel::clear_value() {
  _impl_.value_ = false;
}
inline bool PlayerDanmakuAiRecommendedLevel::_internal_value() const {
  return _impl_.value_;
}
inline bool PlayerDanmakuAiRecommendedLevel::value() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedLevel.value)
  return _internal_value();
}
inline void PlayerDanmakuAiRecommendedLevel::_internal_set_value(bool value) {
  
  _impl_.value_ = value;
}
inline void PlayerDanmakuAiRecommendedLevel::set_value(bool value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedLevel.value)
}

// -------------------------------------------------------------------

// PlayerDanmakuBlocktop

// bool value = 1;
inline void PlayerDanmakuBlocktop::clear_value() {
  _impl_.value_ = false;
}
inline bool PlayerDanmakuBlocktop::_internal_value() const {
  return _impl_.value_;
}
inline bool PlayerDanmakuBlocktop::value() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.PlayerDanmakuBlocktop.value)
  return _internal_value();
}
inline void PlayerDanmakuBlocktop::_internal_set_value(bool value) {
  
  _impl_.value_ = value;
}
inline void PlayerDanmakuBlocktop::set_value(bool value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.PlayerDanmakuBlocktop.value)
}

// -------------------------------------------------------------------

// PlayerDanmakuBlockscroll

// bool value = 1;
inline void PlayerDanmakuBlockscroll::clear_value() {
  _impl_.value_ = false;
}
inline bool PlayerDanmakuBlockscroll::_internal_value() const {
  return _impl_.value_;
}
inline bool PlayerDanmakuBlockscroll::value() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.PlayerDanmakuBlockscroll.value)
  return _internal_value();
}
inline void PlayerDanmakuBlockscroll::_internal_set_value(bool value) {
  
  _impl_.value_ = value;
}
inline void PlayerDanmakuBlockscroll::set_value(bool value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.PlayerDanmakuBlockscroll.value)
}

// -------------------------------------------------------------------

// PlayerDanmakuBlockbottom

// bool value = 1;
inline void PlayerDanmakuBlockbottom::clear_value() {
  _impl_.value_ = false;
}
inline bool PlayerDanmakuBlockbottom::_internal_value() const {
  return _impl_.value_;
}
inline bool PlayerDanmakuBlockbottom::value() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.PlayerDanmakuBlockbottom.value)
  return _internal_value();
}
inline void PlayerDanmakuBlockbottom::_internal_set_value(bool value) {
  
  _impl_.value_ = value;
}
inline void PlayerDanmakuBlockbottom::set_value(bool value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.PlayerDanmakuBlockbottom.value)
}

// -------------------------------------------------------------------

// PlayerDanmakuBlockcolorful

// bool value = 1;
inline void PlayerDanmakuBlockcolorful::clear_value() {
  _impl_.value_ = false;
}
inline bool PlayerDanmakuBlockcolorful::_internal_value() const {
  return _impl_.value_;
}
inline bool PlayerDanmakuBlockcolorful::value() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.PlayerDanmakuBlockcolorful.value)
  return _internal_value();
}
inline void PlayerDanmakuBlockcolorful::_internal_set_value(bool value) {
  
  _impl_.value_ = value;
}
inline void PlayerDanmakuBlockcolorful::set_value(bool value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.PlayerDanmakuBlockcolorful.value)
}

// -------------------------------------------------------------------

// PlayerDanmakuBlockrepeat

// bool value = 1;
inline void PlayerDanmakuBlockrepeat::clear_value() {
  _impl_.value_ = false;
}
inline bool PlayerDanmakuBlockrepeat::_internal_value() const {
  return _impl_.value_;
}
inline bool PlayerDanmakuBlockrepeat::value() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.PlayerDanmakuBlockrepeat.value)
  return _internal_value();
}
inline void PlayerDanmakuBlockrepeat::_internal_set_value(bool value) {
  
  _impl_.value_ = value;
}
inline void PlayerDanmakuBlockrepeat::set_value(bool value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.PlayerDanmakuBlockrepeat.value)
}

// -------------------------------------------------------------------

// PlayerDanmakuBlockspecial

// bool value = 1;
inline void PlayerDanmakuBlockspecial::clear_value() {
  _impl_.value_ = false;
}
inline bool PlayerDanmakuBlockspecial::_internal_value() const {
  return _impl_.value_;
}
inline bool PlayerDanmakuBlockspecial::value() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.PlayerDanmakuBlockspecial.value)
  return _internal_value();
}
inline void PlayerDanmakuBlockspecial::_internal_set_value(bool value) {
  
  _impl_.value_ = value;
}
inline void PlayerDanmakuBlockspecial::set_value(bool value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.PlayerDanmakuBlockspecial.value)
}

// -------------------------------------------------------------------

// PlayerDanmakuOpacity

// float value = 1;
inline void PlayerDanmakuOpacity::clear_value() {
  _impl_.value_ = 0;
}
inline float PlayerDanmakuOpacity::_internal_value() const {
  return _impl_.value_;
}
inline float PlayerDanmakuOpacity::value() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.PlayerDanmakuOpacity.value)
  return _internal_value();
}
inline void PlayerDanmakuOpacity::_internal_set_value(float value) {
  
  _impl_.value_ = value;
}
inline void PlayerDanmakuOpacity::set_value(float value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.PlayerDanmakuOpacity.value)
}

// -------------------------------------------------------------------

// PlayerDanmakuScalingfactor

// float value = 1;
inline void PlayerDanmakuScalingfactor::clear_value() {
  _impl_.value_ = 0;
}
inline float PlayerDanmakuScalingfactor::_internal_value() const {
  return _impl_.value_;
}
inline float PlayerDanmakuScalingfactor::value() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.PlayerDanmakuScalingfactor.value)
  return _internal_value();
}
inline void PlayerDanmakuScalingfactor::_internal_set_value(float value) {
  
  _impl_.value_ = value;
}
inline void PlayerDanmakuScalingfactor::set_value(float value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.PlayerDanmakuScalingfactor.value)
}

// -------------------------------------------------------------------

// PlayerDanmakuDomain

// float value = 1;
inline void PlayerDanmakuDomain::clear_value() {
  _impl_.value_ = 0;
}
inline float PlayerDanmakuDomain::_internal_value() const {
  return _impl_.value_;
}
inline float PlayerDanmakuDomain::value() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.PlayerDanmakuDomain.value)
  return _internal_value();
}
inline void PlayerDanmakuDomain::_internal_set_value(float value) {
  
  _impl_.value_ = value;
}
inline void PlayerDanmakuDomain::set_value(float value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.PlayerDanmakuDomain.value)
}

// -------------------------------------------------------------------

// PlayerDanmakuSpeed

// int32 value = 1;
inline void PlayerDanmakuSpeed::clear_value() {
  _impl_.value_ = 0;
}
inline int32_t PlayerDanmakuSpeed::_internal_value() const {
  return _impl_.value_;
}
inline int32_t PlayerDanmakuSpeed::value() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.PlayerDanmakuSpeed.value)
  return _internal_value();
}
inline void PlayerDanmakuSpeed::_internal_set_value(int32_t value) {
  
  _impl_.value_ = value;
}
inline void PlayerDanmakuSpeed::set_value(int32_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.PlayerDanmakuSpeed.value)
}

// -------------------------------------------------------------------

// PlayerDanmakuEnableblocklist

// bool value = 1;
inline void PlayerDanmakuEnableblocklist::clear_value() {
  _impl_.value_ = false;
}
inline bool PlayerDanmakuEnableblocklist::_internal_value() const {
  return _impl_.value_;
}
inline bool PlayerDanmakuEnableblocklist::value() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.PlayerDanmakuEnableblocklist.value)
  return _internal_value();
}
inline void PlayerDanmakuEnableblocklist::_internal_set_value(bool value) {
  
  _impl_.value_ = value;
}
inline void PlayerDanmakuEnableblocklist::set_value(bool value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.PlayerDanmakuEnableblocklist.value)
}

// -------------------------------------------------------------------

// InlinePlayerDanmakuSwitch

// bool value = 1;
inline void InlinePlayerDanmakuSwitch::clear_value() {
  _impl_.value_ = false;
}
inline bool InlinePlayerDanmakuSwitch::_internal_value() const {
  return _impl_.value_;
}
inline bool InlinePlayerDanmakuSwitch::value() const {
  // @@protoc_insertion_point(field_get:bilibili.community.service.dm.v1.InlinePlayerDanmakuSwitch.value)
  return _internal_value();
}
inline void InlinePlayerDanmakuSwitch::_internal_set_value(bool value) {
  
  _impl_.value_ = value;
}
inline void InlinePlayerDanmakuSwitch::set_value(bool value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:bilibili.community.service.dm.v1.InlinePlayerDanmakuSwitch.value)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace dm
}  // namespace service
}  // namespace community
}  // namespace bilibili

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::bilibili::community::service::dm::v1::DMAttrBit> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bilibili::community::service::dm::v1::DMAttrBit>() {
  return ::bilibili::community::service::dm::v1::DMAttrBit_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_reply_2eproto
